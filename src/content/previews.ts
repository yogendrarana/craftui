// @ts-nocheck
// This file is autogenerated by scripts/create-pr-content.ts.
// Do not edit this file directly.

import React from "react";

export type PreviewsType = typeof Previews;

export const Previews: Record<string, any> = {
    element: {
        "brutalist-button": {
            name: "brutalist-button",
            path: "elements/button/brutalist-button",
            component: React.lazy(
                () => import("@/content/registry/elements/button/brutalist-button")
            ),
            type: "button",
            rawCode:
                '"use client";\n\nimport { cn } from "@/lib/utils";\n\ninterface BrutalistButtonProps {\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport default function BrutalistButton({ children, className, onClick }: BrutalistButtonProps) {\n    return (\n        <button\n            onClick={onClick}\n            className={cn(\n                "h-12 w-28 px-4 flex items-center border-2 rounded-sm border-black shadow-[4px_4px_0_0_#000] transition-all duration-200",\n                "active:translate-x-1 active:translate-y-1 active:shadow-[2px_2px_0_0_#000]",\n                className\n            )}\n        >\n            {children || "Brutalist"}\n        </button>\n    );\n}\n'
        },
        "shimmer-button": {
            name: "shimmer-button",
            path: "elements/button/shimmer-button",
            component: React.lazy(
                () => import("@/content/registry/elements/button/shimmer-button")
            ),
            type: "button",
            rawCode:
                '"use client";\n\nimport React from "react";\nimport { cn } from "@/lib/utils";\n\ninterface ShimmerButtonProps {\n    className?: string;\n}\n\nconst ShimmerButton = ({ className }: ShimmerButtonProps) => {\n    return (\n        <>\n            <button\n                className={cn(\n                    "h-12 w-28 rounded-full relative cursor-pointer flex items-center justify-center border border-white/10 bg-black overflow-hidden",\n                    className\n                )}\n            >\n                <span\n                    className={cn(\n                        "absolute w-full aspect-[1] top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2",\n                        "before:content-[\'\'] before:absolute before:h-full before:w-full before:aspect-[1] top-1/2 left-100 before:-translate-x-1/2 before:-translate-y-1/2   before:bg-[conic-gradient(transparent,white_60deg,transparent_61deg)]",\n                        "before:animate-[lazy_2s_linear_infinite]"\n                    )}\n                ></span>\n\n                <span className="absolute inset-[2px] bg-black rounded-full"></span>\n                <span className="text-white z-10 text-sm">Shimmer</span>\n            </button>\n\n            <style>{`\n                @keyframes lazy {\n                    0% {\n                        transform: rotate(0deg);\n                    }\n\n                    100% {\n                        transform: rotate(360deg);\n                    }\n                }\n            `}</style>\n        </>\n    );\n};\n\nexport default ShimmerButton;\n'
        },
        "demo-checkbox": {
            name: "demo-checkbox",
            path: "elements/checkbox/demo-checkbox",
            component: React.lazy(
                () => import("@/content/registry/elements/checkbox/demo-checkbox")
            ),
            type: "checkbox",
            rawCode:
                '"use client";\n\nimport { useState } from "react";\nimport { motion } from "framer-motion";\n\nexport default function AmazingCheckbox() {\n    const [isChecked, setIsChecked] = useState(true);\n\n    const toggleCheckbox = () => setIsChecked(!isChecked);\n\n    return (\n        <div className="flex items-center justify-center">\n            <label className="relative inline-flex items-center cursor-pointer">\n                <input\n                    type="checkbox"\n                    className="sr-only"\n                    checked={isChecked}\n                    onChange={toggleCheckbox}\n                />\n                <motion.div\n                    className={`w-9 h-9 rounded-xl border ${\n                        isChecked\n                            ? "bg-gradient-to-br from-purple-500 via-pink-500 to-red-500"\n                            : "bg-white"\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{\n                        type: "spring",\n                        stiffness: 300,\n                        damping: 20\n                    }}\n                >\n                    <motion.svg\n                        className="w-full h-full p-2 text-white"\n                        viewBox="0 0 24 24"\n                        initial="hidden"\n                        animate={isChecked ? "visible" : "hidden"}\n                    >\n                        <motion.path\n                            d="M4 12.6111L8.92308 17.5L20 6.5"\n                            fill="none"\n                            stroke="currentColor"\n                            strokeWidth="3"\n                            strokeLinecap="round"\n                            strokeLinejoin="round"\n                            variants={{\n                                visible: {\n                                    pathLength: 1,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: "easeOut"\n                                    }\n                                },\n                                hidden: {\n                                    pathLength: 0,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: "easeIn"\n                                    }\n                                }\n                            }}\n                        />\n                    </motion.svg>\n                </motion.div>\n            </label>\n        </div>\n    );\n}\n'
        },
        "demo-input": {
            name: "demo-input",
            path: "elements/input/demo-input",
            component: React.lazy(() => import("@/content/registry/elements/input/demo-input")),
            type: "input",
            rawCode:
                'import React from "react";\nimport { cn } from "@/lib/utils";\n\nexport default function DemoInput() {\n    return (\n        <div>\n            <input\n                type="text"\n                name="text"\n                className={cn(\n                    "h-9 w-56 px-3 border border-black text-sm uppercase tracking-widest",\n                    "focus:outline-none focus:border-[0.5px] focus:shadow-[-5px_-5px_0px_0px_rgba(0,0,0,1)] placeholder:text-gray-500",\n                    "transition-all duration-100 ease-linear"\n                )}\n                placeholder="search..."\n            />\n        </div>\n    );\n}\n'
        },
        "classic-loader": {
            name: "classic-loader",
            path: "elements/loader/classic-loader",
            component: React.lazy(
                () => import("@/content/registry/elements/loader/classic-loader")
            ),
            type: "loader",
            rawCode:
                '"use client";\n\nimport React from "react";\n\nexport default function ClassicLoader({\n    size = "md",\n    color = "primary"\n}: {\n    size?: "sm" | "md" | "lg";\n    color?: "primary" | "secondary" | "white";\n}) {\n    const sizeClasses = {\n        sm: "w-5 h-5",\n        md: "w-8 h-8",\n        lg: "w-12 h-12"\n    };\n\n    const colorClasses = {\n        primary: "text-primary",\n        secondary: "text-secondary",\n        white: "text-white"\n    };\n\n    return (\n        <div className="flex items-center justify-center">\n            <div\n                className={`${sizeClasses[size]} ${colorClasses[color]} animate-spin`}\n                style={{\n                    borderRadius: "50%",\n                    border: "2px solid currentColor",\n                    borderTopColor: "transparent"\n                }}\n                role="status"\n                aria-label="loading"\n            >\n                <span className="sr-only">Loading...</span>\n            </div>\n            <style jsx>{`\n                @keyframes spin {\n                    to {\n                        transform: rotate(360deg);\n                    }\n                }\n                .animate-spin {\n                    animation: spin 1s linear infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n'
        },
        "three-body-loader": {
            name: "three-body-loader",
            path: "elements/loader/three-body-loader",
            component: React.lazy(
                () => import("@/content/registry/elements/loader/three-body-loader")
            ),
            type: "loader",
            rawCode:
                '"use client"\n\nimport React from "react";\n\nconst ThreeBodyLoader = () => {\n    return (\n        <>\n            <div className="relative inline-block h-[35px] w-[35px] animate-[spin78236_2s_infinite_linear]">\n                <div className="absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] left-0 rotate-[60deg]">\n                    <div\n                        className="absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]"\n                        style={{ animationDelay: "-0.24s" }}\n                    ></div>\n                </div>\n                <div className="absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] right-0 rotate-[-60deg]">\n                    <div\n                        className="absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]"\n                        style={{ animationDelay: "-0.12s" }}\n                    ></div>\n                </div>\n                <div className="absolute h-full w-[30%] bottom-[-5%] left-0 translate-x-[116.666%]">\n                    <div className="absolute h-0 w-full pb-[100%] bg-black rounded-full top-0 left-0 animate-[wobble2_0.8s_infinite_ease-in-out]"></div>\n                </div>\n            </div>\n\n            <style jsx>\n                {`\n                    @keyframes spin78236 {\n                        0% {\n                            transform: rotate(0deg);\n                        }\n                        100% {\n                            transform: rotate(360deg);\n                        }\n                    }\n                    @keyframes wobble1 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(-66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                    @keyframes wobble2 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                `}\n            </style>\n        </>\n    );\n};\n\nexport default ThreeBodyLoader;\n'
        },
        "demo-radio": {
            name: "demo-radio",
            path: "elements/radio/demo-radio",
            component: React.lazy(() => import("@/content/registry/elements/radio/demo-radio")),
            type: "radio",
            rawCode:
                '"use client";\n\nimport { useState } from "react";\n\ntype Option = {\n    id: string;\n    label: string;\n};\n\nconst options: Option[] = [\n    { id: "react", label: "React" },\n    { id: "vue", label: "Vue" },\n    { id: "svelte", label: "Svelte" }\n];\n\nexport default function DemoRadio() {\n    const [selectedOption, setSelectedOption] = useState<string | null>(null);\n\n    const handleOptionChange = (optionId: string) => {\n        setSelectedOption(optionId);\n    };\n\n    return (\n        <div className="flex flex-col justify-center">\n            {options.map((option) => (\n                <label\n                    key={option.id}\n                    className="flex items-center space-x-3 mb-3 cursor-pointer group"\n                >\n                    <div className="relative">\n                        <input\n                            type="radio"\n                            className="sr-only"\n                            name="radio-group"\n                            value={option.id}\n                            checked={selectedOption === option.id}\n                            onChange={() => handleOptionChange(option.id)}\n                        />\n                        <div\n                            className={`w-4 h-4 border-2 rounded-full ${\n                                selectedOption === option.id\n                                    ? "border-primary"\n                                    : "border-gray-300 group-hover:border-gray-400"\n                            } transition-colors duration-200 ease-in-out`}\n                        >\n                            <div\n                                className={`w-2 h-2 rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${\n                                    selectedOption === option.id\n                                        ? "bg-primary scale-100"\n                                        : "bg-gray-300 scale-0"\n                                } transition-all duration-200 ease-in-out`}\n                            ></div>\n                        </div>\n                    </div>\n                    <span className="text-gray-700 font-medium group-hover:text-gray-900 transition-colors duration-200 ease-in-out">\n                        {option.label}\n                    </span>\n                </label>\n            ))}\n        </div>\n    );\n}\n'
        },
        "demo-select": {
            name: "demo-select",
            path: "elements/select/demo-select",
            component: React.lazy(() => import("@/content/registry/elements/select/demo-select")),
            type: "select",
            rawCode:
                '"use client";\n\nimport React, { useState } from "react";\nimport { ChevronDown } from "lucide-react";\n\ntype Option = {\n    value: string;\n    label: string;\n};\n\nconst options: Option[] = [\n    { value: "node", label: "Node" },\n    { value: "laravel", label: "Laravel" },\n    { value: "django", label: "Django" },\n    { value: "rails", label: "Rails" }\n];\n\nexport default function DemoSelect() {\n    const [selectedOption, setSelectedOption] = useState("");\n\n    const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedOption(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className="w-40 relative">\n                <select\n                    value={selectedOption}\n                    onChange={handleChange}\n                    className="w-full px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary"\n                >\n                    <option value="" disabled>\n                        Framework\n                    </option>\n                    {options.map((option) => (\n                        <option key={option.value} value={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </select>\n                <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">\n                    <ChevronDown className="w-5 h-5 text-gray-400" />\n                </div>\n            </div>\n        </div>\n    );\n}\n'
        },
        "brutalist-switch": {
            name: "brutalist-switch",
            path: "elements/toggle-switch/brutalist-switch",
            component: React.lazy(
                () => import("@/content/registry/elements/toggle-switch/brutalist-switch")
            ),
            type: "toggle-switch",
            rawCode:
                '"use client";\n\nimport { useState } from "react";\nimport { motion } from "framer-motion";\n\nexport default function BrutalistSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    return (\n        <motion.button\n            className={`w-24 h-12 rounded-none border-4 border-black relative ${\n                isOn ? "bg-yellow-400" : "bg-white"\n            }`}\n            onClick={() => setIsOn(!isOn)}\n            aria-checked={isOn}\n            role="switch"\n        >\n            <motion.div\n                className="w-10 h-10 bg-black absolute top-0 left-0"\n                animate={{ x: isOn ? 52 : 0 }}\n                transition={{ type: "spring", stiffness: 700, damping: 30 }}\n            />\n        </motion.button>\n    );\n}\n'
        },
        "classic-switch": {
            name: "classic-switch",
            path: "elements/toggle-switch/classic-switch",
            component: React.lazy(
                () => import("@/content/registry/elements/toggle-switch/classic-switch")
            ),
            type: "toggle-switch",
            rawCode:
                '"use client";\n\nimport React from "react";\nimport { useState } from "react";\n\nexport default function ClassicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className="flex items-center justify-center">\n            <button\n                className={`w-14 h-8 flex items-center rounded-full p-1 cursor-pointer ${\n                    isOn ? "bg-green-500" : "bg-gray-300"\n                }`}\n                onClick={toggleSwitch}\n            >\n                <span\n                    className={`bg-white w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ease-in-out ${\n                        isOn ? "translate-x-6" : ""\n                    }`}\n                ></span>\n            </button>\n        </div>\n    );\n}\n'
        },
        "day-night-switch": {
            name: "day-night-switch",
            path: "elements/toggle-switch/day-night-switch",
            component: React.lazy(
                () => import("@/content/registry/elements/toggle-switch/day-night-switch")
            ),
            type: "toggle-switch",
            rawCode:
                '"use client";\n\nimport { useState } from "react";\nimport { cn } from "@/lib/utils";\n\nexport default function DayNightSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className="relative inline-block w-20 h-10 cursor-pointer">\n            <input\n                type="checkbox"\n                className="sr-only"\n                checked={isChecked}\n                onChange={(e) => setIsChecked(e.target.checked)}\n            />\n            <span\n                className={cn(\n                    "absolute inset-0 rounded-full transition-all duration-300 ease-in-out",\n                    isChecked ? "bg-indigo-900" : "bg-sky-400",\n                    "before:content-[\'\'] before:absolute before:w-8 before:h-8 before:rounded-full before:left-1 before:top-1",\n                    "before:transition-all before:duration-300 before:ease-in-out",\n                    isChecked\n                        ? "before:bg-yellow-200 before:translate-x-10 before:scale-[0.75] before:shadow-[inset_-4px_-2px_0px_0px_#eab308]"\n                        : "before:bg-yellow-300 before:scale-100 before:shadow-[inset_8px_-4px_0px_0px_#fbbf24]"\n                )}\n            >\n                {isChecked && (\n                    <span className="absolute inset-0 overflow-hidden rounded-full">\n                        <span className="absolute top-1 left-1 w-1 h-1 bg-white rounded-full opacity-50" />\n                        <span className="absolute top-3 left-6 w-1 h-1 bg-white rounded-full opacity-30" />\n                        <span className="absolute top-5 left-3 w-1 h-1 bg-white rounded-full opacity-70" />\n                    </span>\n                )}\n            </span>\n            <span className="sr-only">\n                {isChecked ? "Switch to day mode" : "Switch to night mode"}\n            </span>\n        </label>\n    );\n}\n'
        },
        "fluid-switch": {
            name: "fluid-switch",
            path: "elements/toggle-switch/fluid-switch",
            component: React.lazy(
                () => import("@/content/registry/elements/toggle-switch/fluid-switch")
            ),
            type: "toggle-switch",
            rawCode:
                '"use client";\n\nimport { useState } from "react";\n\nexport default function FluidSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div\n            className="relative h-8"\n            style={\n                {\n                    "--active-color": "#1868e3",\n                    "--inactive-color": "#d3d3d6"\n                } as React.CSSProperties\n            }\n        >\n            <input\n                type="checkbox"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n                className="appearance-none m-0 absolute z-10 top-0 left-0 w-full h-full cursor-pointer"\n            />\n            <svg\n                xmlns="http://www.w3.org/2000/svg"\n                viewBox="0 0 292 142"\n                className="w-full h-full overflow-visible"\n            >\n                <path\n                    d="M71 142C31.7878 142 0 110.212 0 71C0 31.7878 31.7878 0 71 0C110.212 0 119 30 146 30C173 30 182 0 221 0C260 0 292 31.7878 292 71C292 110.212 260.212 142 221 142C181.788 142 173 112 146 112C119 112 110.212 142 71 142Z"\n                    className={`transition-colors duration-500 ${\n                        isChecked ? "fill-[var(--active-color)]" : "fill-[var(--inactive-color)]"\n                    }`}\n                />\n                <g filter="url(#goo)">\n                    <rect\n                        fill="#fff"\n                        rx="29"\n                        height="58"\n                        width="116"\n                        y="42"\n                        x="13"\n                        className={`transition-transform duration-300 origin-center ${\n                            isChecked ? "translate-x-[150px]" : ""\n                        }`}\n                    />\n                    <rect\n                        fill="#fff"\n                        rx="58"\n                        height="114"\n                        width="114"\n                        y="14"\n                        x="14"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? "scale-0" : "scale-100"\n                        }`}\n                    />\n                    <rect\n                        fill="#fff"\n                        rx="58"\n                        height="114"\n                        width="114"\n                        y="14"\n                        x="164"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? "scale-100" : "scale-0"\n                        }`}\n                    />\n                </g>\n                <filter id="goo">\n                    <feGaussianBlur stdDeviation="10" result="blur" in="SourceGraphic" />\n                    <feColorMatrix\n                        result="goo"\n                        values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7"\n                        mode="matrix"\n                        in="blur"\n                    />\n                </filter>\n            </svg>\n        </div>\n    );\n}\n'
        },
        "gradient-switch": {
            name: "gradient-switch",
            path: "elements/toggle-switch/gradient-switch",
            component: React.lazy(
                () => import("@/content/registry/elements/toggle-switch/gradient-switch")
            ),
            type: "toggle-switch",
            rawCode:
                '"use client";\n\nimport { useState } from "react";\n\nexport default function GradientSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div>\n            <div className="checkbox-wrapper-25">\n                <input\n                    type="checkbox"\n                    checked={isChecked}\n                    onChange={() => setIsChecked(!isChecked)}\n                    className="appearance-none h-[25px] w-[75px] rounded-[25px] cursor-pointer transition-all duration-250 ease-in-out"\n                />\n            </div>\n\n            <style jsx>{`\n                .checkbox-wrapper-25 input[type="checkbox"] {\n                    background-image: -webkit-linear-gradient(\n                            hsla(0, 0%, 0%, 0.1),\n                            hsla(0, 0%, 100%, 0.1)\n                        ),\n                    -webkit-linear-gradient(left, #f66 50%, #6cf 50%);\n                    background-size: 100% 100%, 200% 100%;\n                    background-position: 0 0, 15px 0;\n                    box-shadow: inset 0 1px 4px hsla(0, 0%, 0%, 0.5),\n                        inset 0 0 10px hsla(0, 0%, 0%, 0.5), 0 0 0 1px hsla(0, 0%, 0%, 0.1),\n                        0 -1px 2px 2px hsla(0, 0%, 0%, 0.25), 0 2px 2px 2px hsla(0, 0%, 100%, 0.75);\n                    padding-right: 25px;\n                }\n\n                .checkbox-wrapper-25 input[type="checkbox"]:after {\n                    background-color: #eee;\n                    background-image: -webkit-linear-gradient(\n                        hsla(0, 0%, 100%, 0.1),\n                        hsla(0, 0%, 0%, 0.1)\n                    );\n                    border-radius: 25px;\n                    box-shadow: inset 0 1px 1px 1px hsla(0, 0%, 100%, 1),\n                        inset 0 -1px 1px 1px hsla(0, 0%, 0%, 0.25),\n                        0 1px 3px 1px hsla(0, 0%, 0%, 0.5), 0 0 2px hsla(0, 0%, 0%, 0.25);\n                    content: "";\n                    display: block;\n                    height: 25px;\n                    width: 50px;\n                }\n\n                .checkbox-wrapper-25 input[type="checkbox"]:checked {\n                    background-position: 0 0, 35px 0;\n                    padding-left: 25px;\n                    padding-right: 0;\n                }\n            `}</style>\n        </div>\n    );\n}\n'
        }
    },
    text: {
        "split-flap": {
            name: "split-flap",
            path: "text/split-flap",
            component: React.lazy(() => import("@/content/registry/text/split-flap")),
            type: "",
            rawCode:
                '"use client";\n\nimport React, { useState } from "react";\nimport { motion, AnimatePresence } from "framer-motion";\n\ninterface PropType {\n    text?: string;\n}\n\nexport default function SplitFlapTextEffect({ text = "Hover Me" }: PropType) {\n    const [isHovered, setIsHovered] = useState(false);\n\n    return (\n        <div className="h-full w-full border-4 flex items-center justify-center bg-gradient-to-br from-purple-700 to-indigo-900">\n            <h1\n                className="text-4xl md:text-6xl font-bold text-white cursor-pointer"\n                onMouseEnter={() => setIsHovered(true)}\n                onMouseLeave={() => setIsHovered(false)}\n            >\n                {text.split("").map((char, index) => (\n                    <div\n                        key={index}\n                        className="relative inline-block w-[1em] h-[1.2em] overflow-hidden"\n                    >\n                        <AnimatePresence mode="popLayout">\n                            {isHovered && (\n                                <>\n                                    <motion.span\n                                        key="exit"\n                                        initial={{ y: 0 }}\n                                        animate={{ y: "-100%" }}\n                                        exit={{ y: "-100%" }}\n                                        transition={{\n                                            duration: 0.3,\n                                            ease: "easeInOut",\n                                            delay: index * 0.05\n                                        }}\n                                        className="absolute inset-0 flex items-center justify-center"\n                                    >\n                                        {char}\n                                    </motion.span>\n                                    <motion.span\n                                        key="enter"\n                                        initial={{ y: "100%" }}\n                                        animate={{ y: 0 }}\n                                        transition={{\n                                            duration: 0.3,\n                                            ease: "easeInOut",\n                                            delay: index * 0.05\n                                        }}\n                                        className="absolute inset-0 flex items-center justify-center"\n                                    >\n                                        {char}\n                                    </motion.span>\n                                </>\n                            )}\n                        </AnimatePresence>\n                        <span className={isHovered ? "opacity-0" : "opacity-100"}>{char}</span>\n                    </div>\n                ))}\n            </h1>\n        </div>\n    );\n}\n'
        }
    }
};
