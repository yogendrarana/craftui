// @ts-nocheck
// This file is autogenerated by scripts/create-pr-content.ts.
// Do not edit this file directly.

import React from 'react';

export type PreviewsType = typeof Previews;

export const Previews: Record<string, any> = {
  "core": {
    "accordion": {
      name: "accordion",
      label: "accordion",
      path: "core/accordion",
      component: React.lazy(() => import("@/content/registry/core/accordion")),
      type: "",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport { ChevronDown } from \"lucide-react\";\nimport { motion, AnimatePresence, Variants } from \"framer-motion\";\nimport React, { createContext, useContext, useState } from \"react\";\n\n// Context\ninterface AccordionContextType {\n    openItems: string[];\n    toggleItem: (id: string) => void;\n}\n\nconst AccordionContext = createContext<AccordionContextType | undefined>(undefined);\n\n// Variants\nconst defaultVariants: Variants = {\n    hidden: {\n        opacity: 0,\n        height: 0,\n        transition: { duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }\n    },\n    visible: {\n        opacity: 1,\n        height: \"auto\",\n        transition: { duration: 0.3, ease: [0.04, 0.62, 0.23, 0.98] }\n    }\n};\n\n// Accordion\ninterface AccordionProps {\n    children: React.ReactNode;\n    allowMultipleOpen?: boolean;\n    defaultOpen?: string[];\n    className?: string;\n}\n\nexport const Accordion: React.FC<AccordionProps> = ({\n    children,\n    allowMultipleOpen = false,\n    defaultOpen = [],\n    className = \"\"\n}) => {\n    const [openItems, setOpenItems] = useState<string[]>(defaultOpen);\n\n    const toggleItem = (id: string) => {\n        setOpenItems((prev) => {\n            if (allowMultipleOpen) {\n                return prev.includes(id) ? prev.filter((item) => item !== id) : [...prev, id];\n            } else {\n                return prev.includes(id) ? [] : [id];\n            }\n        });\n    };\n\n    return (\n        <AccordionContext.Provider value={{ openItems, toggleItem }}>\n            <div className={cn(\"space-y-2\", className)}>{children}</div>\n        </AccordionContext.Provider>\n    );\n};\n\n// AccordionItem component\ninterface AccordionItemProps {\n    children: React.ReactNode;\n    id: string;\n    className?: string;\n}\n\nconst AccordionItemContext = createContext<{ id: string } | undefined>(undefined);\n\nexport const AccordionItem: React.FC<AccordionItemProps> = ({ children, id, className = \"\" }) => {\n    return (\n        <AccordionItemContext.Provider value={{ id }}>\n            <div className={cn(\"overflow-hidden\", className)} data-state={id}>\n                {children}\n            </div>\n        </AccordionItemContext.Provider>\n    );\n};\n\n// AccordionTrigger component\ninterface AccordionTriggerProps {\n    children: React.ReactNode;\n    className?: string;\n    icon?: React.ReactNode;\n    customOpenIcon?: React.ReactNode;\n    customClosedIcon?: React.ReactNode;\n}\n\nexport const AccordionTrigger: React.FC<AccordionTriggerProps> = ({\n    children,\n    className = \"\",\n    customOpenIcon,\n    customClosedIcon\n}) => {\n    const context = useContext(AccordionContext);\n    if (!context) throw new Error(\"AccordionTrigger must be used within an Accordion\");\n\n    const { openItems, toggleItem } = context;\n    const itemContext = useContext(AccordionItemContext);\n    if (!itemContext) throw new Error(\"AccordionTrigger must be used within an AccordionItem\");\n\n    const { id } = itemContext;\n    const isOpen = openItems.includes(id);\n\n    const renderIcon = () => {\n        if (isOpen && customOpenIcon) return customOpenIcon;\n        if (!isOpen && customClosedIcon) return customClosedIcon;\n        return <ChevronDown className=\"h-4 w-4 shrink-0\" />;\n    };\n\n    return (\n        <motion.button\n            className={cn(\n                \"w-full py-2 border-b flex items-center justify-between text-left bg-white hover:underline\",\n                className\n            )}\n            onClick={() => toggleItem(id)}\n            aria-expanded={isOpen}\n        >\n            <span className=\"font-medium text-md\">{children}</span>\n            <motion.div\n                initial={false}\n                animate={{ rotate: isOpen ? 180 : 0 }}\n                transition={{ duration: 0.3 }}\n            >\n                {renderIcon()}\n            </motion.div>\n        </motion.button>\n    );\n};\n\n// AccordionContent component\ninterface AccordionContentProps {\n    children: React.ReactNode;\n    className?: string;\n    variants?: Variants;\n}\n\nexport const AccordionContent: React.FC<AccordionContentProps> = ({\n    children,\n    className = \"\",\n    variants = defaultVariants\n}) => {\n    const context = useContext(AccordionContext);\n    if (!context) throw new Error(\"AccordionContent must be used within an Accordion\");\n\n    const { openItems } = context;\n    const itemContext = useContext(AccordionItemContext);\n    if (!itemContext) throw new Error(\"AccordionContent must be used within an AccordionItem\");\n\n    const { id } = itemContext;\n    const isOpen = openItems.includes(id);\n\n    return (\n        <AnimatePresence initial={false}>\n            {isOpen && (\n                <motion.div initial=\"hidden\" animate=\"visible\" exit=\"hidden\" variants={variants}>\n                    <div className={cn(\"py-2 bg-white text-gray-500\", className)}>{children}</div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n",
    },
    "button": {
      name: "button",
      label: "button",
      path: "core/button",
      component: React.lazy(() => import("@/content/registry/core/button")),
      type: "",
      rawCode: "\"use client\";\n\nimport * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { cva, type VariantProps } from \"class-variance-authority\";\n\nconst buttonVariants = cva(\n    \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n    {\n        variants: {\n            variant: {\n                default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n                danger: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n                secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n                outline:\n                    \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n                link: \"text-primary underline-offset-4 underline\"\n            },\n            size: {\n                default: \"h-9 px-4 py-2\",\n                sm: \"h-8 rounded-md px-3 text-xs\",\n                lg: \"h-10 rounded-md px-8\",\n                icon: \"h-9 w-9\"\n            }\n        },\n        defaultVariants: {\n            variant: \"default\",\n            size: \"default\"\n        }\n    }\n);\n\nexport interface ButtonProps\n    extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n        VariantProps<typeof buttonVariants> {\n    asChild?: boolean;\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n    (\n        { className, variant = \"default\", size = \"default\", asChild = false, children, ...props },\n        ref\n    ) => {\n        const Component = asChild ? \"span\" : \"button\";\n\n        return (\n            <Component\n                className={cn(buttonVariants({ variant, size }), className)}\n                ref={ref}\n                disabled={props.disabled}\n                {...props}\n            >\n                {children}\n            </Component>\n        );\n    }\n);\n\nButton.displayName = \"Button\";\n\nexport { Button, buttonVariants };\n",
    },
    "custom-cursor": {
      name: "custom-cursor",
      label: "custom cursor",
      path: "core/custom-cursor",
      component: React.lazy(() => import("@/content/registry/core/custom-cursor")),
      type: "",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\ninterface CustomCursorProps {\n    children: React.ReactNode;\n    cursor: string | React.ReactNode;\n    className?: string;\n}\n\nexport default function CustomCursor({ children, cursor, className }: CustomCursorProps) {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [isHovering, setIsHovering] = useState(false);\n    const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n\n    useEffect(() => {\n        const updateCursorPosition = (e: MouseEvent) => {\n            if (isHovering) {\n                const rect = containerRef.current?.getBoundingClientRect();\n                if (rect) {\n                    setCursorPosition({\n                        x: e.clientX - rect.left,\n                        y: e.clientY - rect.top\n                    });\n                }\n            }\n        };\n\n        document.addEventListener(\"mousemove\", updateCursorPosition);\n\n        return () => {\n            document.removeEventListener(\"mousemove\", updateCursorPosition);\n        };\n    }, [isHovering]);\n\n    const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n        const rect = containerRef.current?.getBoundingClientRect();\n        if (rect) {\n            const entryX = e.clientX - rect.left;\n            const entryY = e.clientY - rect.top;\n            setCursorPosition({ x: entryX, y: entryY });\n        }\n        setIsHovering(true);\n    };\n\n    const handleMouseLeave = () => setIsHovering(false);\n\n    return (\n        <div\n            ref={containerRef}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            className={cn(\"relative\", className)}\n            style={{ cursor: isHovering ? \"none\" : \"default\" }}\n        >\n            {children}\n            {isHovering && (\n                <div\n                    className=\"absolute pointer-events-none z-50, whitespace-nowrap\"\n                    style={{\n                        left: cursorPosition.x,\n                        top: cursorPosition.y,\n                        transform: \"translate(-50%, -50%)\",\n                        transformOrigin: \"left center\"\n                    }}\n                >\n                    {cursor}\n                </div>\n            )}\n        </div>\n    );\n}\n",
    },
    "dialog": {
      name: "dialog",
      label: "dialog",
      path: "core/dialog",
      component: React.lazy(() => import("@/content/registry/core/dialog")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { createPortal } from \"react-dom\";\nimport { Transition, Variants } from \"framer-motion\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\n// dialog context\nconst DialogContext = React.createContext<{\n    isOpen: boolean;\n    setIsOpen: (isOpen: boolean) => void;\n    titleId: string;\n    descriptionId: string;\n    variants: Variants;\n    transition: Transition;\n} | null>(null);\n\n// useDialog hook\nconst useDialog = () => {\n    const context = React.useContext(DialogContext);\n    if (!context) {\n        throw new Error(\"Dialog components must be used within a Dialog\");\n    }\n    return context;\n};\n\n// dialog component\ninterface DialogProps {\n    children: React.ReactNode;\n    variants?: Variants;\n    transition?: Transition;\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (isOpen: boolean) => void;\n}\n\nconst defaultVariants: Variants = {\n    initial: {\n        opacity: 0,\n        scale: 0.95\n    },\n    animate: {\n        opacity: 1,\n        scale: 1\n    }\n};\n\nconst defaultTransition: Transition = {\n    ease: \"easeOut\",\n    duration: 0.2\n};\n\nconst Dialog: React.FC<DialogProps> = ({\n    children,\n    variants = defaultVariants,\n    transition = defaultTransition,\n    defaultOpen = false,\n    onOpenChange,\n    open\n}) => {\n    const isControlled = open !== undefined;\n    const [uncontrolledOpen, setUncontrolledOpen] = React.useState(defaultOpen);\n    const isOpen = isControlled ? open : uncontrolledOpen;\n\n    const setIsOpen = React.useCallback(\n        (newOpen: boolean) => {\n            if (!isControlled) {\n                setUncontrolledOpen(newOpen);\n            }\n            onOpenChange?.(newOpen);\n        },\n        [isControlled, onOpenChange]\n    );\n\n    const titleId = React.useRef(\n        `dialog-title-${Math.random().toString(36).substring(2, 9)}`\n    ).current;\n    const descriptionId = React.useRef(\n        `dialog-description-${Math.random().toString(36).substring(2, 9)}`\n    ).current;\n\n    React.useEffect(() => {\n        onOpenChange?.(isOpen);\n    }, [isOpen, onOpenChange]);\n\n    return (\n        <DialogContext.Provider\n            value={{ isOpen, setIsOpen, titleId, descriptionId, variants, transition }}\n        >\n            {children}\n        </DialogContext.Provider>\n    );\n};\n\n// dialog trigger component\ninterface DialogTriggerProps {\n    children: React.ReactNode;\n    asChild?: boolean;\n    className?: string;\n}\n\nconst DialogTrigger: React.FC<DialogTriggerProps> = ({ children, asChild = false, className }) => {\n    const { setIsOpen } = useDialog();\n\n    const handleClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setIsOpen(true);\n    };\n\n    if (asChild && React.isValidElement(children)) {\n        return React.cloneElement(children as React.ReactElement<any>, {\n            onClick: (e: React.MouseEvent) => {\n                (children as React.ReactElement<any>).props.onClick?.(e);\n                handleClick(e);\n            }\n        });\n    }\n\n    return (\n        <button onClick={handleClick} className={className}>\n            {children}\n        </button>\n    );\n};\n\n// dialog content component\ninterface DialogContentProps {\n    children: React.ReactNode;\n    onClose?: () => void;\n    className?: string;\n    backdropClassName?: string;\n}\n\nconst DialogContent: React.FC<DialogContentProps> = ({\n    children,\n    onClose,\n    className,\n    backdropClassName\n}) => {\n    const { isOpen, setIsOpen, titleId, descriptionId, variants, transition } = useDialog();\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const dialogRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        const handleEscape = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                setIsOpen(false);\n                onClose?.();\n            }\n        };\n\n        if (isOpen) {\n            document.addEventListener(\"keydown\", handleEscape);\n            return () => document.removeEventListener(\"keydown\", handleEscape);\n        }\n    }, [isOpen, setIsOpen, onClose]);\n\n    React.useEffect(() => {\n        if (isOpen && contentRef.current) {\n            const focusableElements = Array.from(\n                contentRef.current.querySelectorAll(\n                    'button, [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n                )\n            ) as HTMLElement[];\n\n            if (focusableElements.length > 0) {\n                const firstElement = focusableElements[0];\n                const lastElement = focusableElements[focusableElements.length - 1];\n\n                const handleTabKey = (event: KeyboardEvent) => {\n                    if (event.key === \"Tab\") {\n                        if (event.shiftKey && document.activeElement === firstElement) {\n                            event.preventDefault();\n                            lastElement.focus();\n                        } else if (!event.shiftKey && document.activeElement === lastElement) {\n                            event.preventDefault();\n                            firstElement.focus();\n                        }\n                    }\n                };\n\n                firstElement.focus();\n\n                document.addEventListener(\"keydown\", handleTabKey);\n                return () => document.removeEventListener(\"keydown\", handleTabKey);\n            }\n        }\n    }, [isOpen]);\n\n    const portalContent = (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    ref={dialogRef}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                    variants={variants}\n                    className={cn(\n                        \"fixed inset-0 z-50 flex items-center justify-center overflow-y-auto\",\n                        \"bg-black/50 backdrop-blur-sm\",\n                        backdropClassName\n                    )}\n                    onClick={(e) => {\n                        if (e.target === dialogRef.current) {\n                            setIsOpen(false);\n                        }\n                    }}\n                >\n                    <motion.div\n                        ref={contentRef}\n                        initial=\"initial\"\n                        animate=\"animate\"\n                        exit=\"exit\"\n                        transition={transition}\n                        variants={variants}\n                        className={cn(\n                            \"w-full max-w-lg mx-auto p-6 relative bg-white rounded-lg shadow-md\",\n                            className\n                        )}\n                        role=\"dialog\"\n                        aria-modal=\"true\"\n                        aria-labelledby={titleId}\n                        aria-describedby={descriptionId}\n                    >\n                        {children}\n                    </motion.div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n\n    return typeof window !== \"undefined\" ? createPortal(portalContent, document.body) : null;\n};\n\n// dialog header components\nconst DialogHeader: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => <div className={cn(\"mb-4\", className)}>{children}</div>;\n\n// dialog title component\nconst DialogTitle: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => {\n    const { titleId } = useDialog();\n    return (\n        <h2 id={titleId} className={cn(\"text-xl font-semibold\", className)}>\n            {children}\n        </h2>\n    );\n};\n\n// dialog description component\nconst DialogDescription: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => {\n    const { descriptionId } = useDialog();\n    return (\n        <p id={descriptionId} className={cn(\"text-sm text-gray-500\", className)}>\n            {children}\n        </p>\n    );\n};\n\n// dialog close component\ninterface DialogCloseProps {\n    children: React.ReactNode;\n    asChild?: boolean;\n    className?: string;\n}\n\nconst DialogClose: React.FC<DialogCloseProps> = ({ children, asChild = false, className }) => {\n    const { setIsOpen } = useDialog();\n\n    const handleClose = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setIsOpen(false);\n    };\n\n    if (asChild && React.isValidElement(children)) {\n        return React.cloneElement(children as React.ReactElement<any>, {\n            onClick: (e: React.MouseEvent) => {\n                (children as React.ReactElement<any>).props.onClick?.(e);\n                handleClose(e);\n            }\n        });\n    }\n\n    return (\n        <button onClick={handleClose} className={cn(\"border\", className)}>\n            {children}\n        </button>\n    );\n};\n\nexport {\n    Dialog,\n    DialogTrigger,\n    DialogHeader,\n    DialogContent,\n    DialogTitle,\n    DialogDescription,\n    DialogClose,\n    useDialog\n};\n",
    },
    "dock": {
      name: "dock",
      label: "dock",
      path: "core/dock",
      component: React.lazy(() => import("@/content/registry/core/dock")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion } from \"framer-motion\";\n\nexport interface DockItemProps {\n    icon: React.ReactNode;\n    label: string;\n    onClick?: () => void;\n    className?: string;\n}\n\ninterface DockProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\n// dock\nexport function Dock({ children, className }: DockProps) {\n    return (\n        <motion.div\n            initial={{ opacity: 0 }}\n            animate={{ opacity: 1 }}\n            transition={{ type: \"spring\", stiffness: 260, damping: 20 }}\n            className={cn(\"px-4 py-2 flex gap-2 border rounded-2xl shadow-md\", className)}\n        >\n            {children}\n        </motion.div>\n    );\n}\n\n// dock item\nexport function DockItem({ icon, label, onClick, className, ...props }: DockItemProps) {\n    const [isHovered, setIsHovered] = React.useState(false);\n\n    return (\n        <motion.div\n            className={cn(\n                \"border relative flex items-center justify-center w-12 h-12 rounded-full shadow-md cursor-pointer\",\n                className\n            )}\n            onHoverStart={() => setIsHovered(true)}\n            onHoverEnd={() => setIsHovered(false)}\n            onClick={onClick}\n            {...props}\n        >\n            {icon}\n            {isHovered && (\n                <motion.div\n                    initial={{ opacity: 0, y: 10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    className=\"absolute bottom-full mb-2 px-2 py-1 bg-black/75 text-white text-xs rounded\"\n                >\n                    {label}\n                </motion.div>\n            )}\n        </motion.div>\n    );\n}\n",
    },
    "drawer": {
      name: "drawer",
      label: "drawer",
      path: "core/drawer",
      component: React.lazy(() => import("@/content/registry/core/drawer")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { createPortal } from \"react-dom\";\nimport { Transition, Variants } from \"framer-motion\";\nimport { AnimatePresence, motion } from \"framer-motion\";\nimport { X } from \"lucide-react\";\n\ntype DrawerOrigin = \"left\" | \"right\" | \"top\" | \"bottom\";\n\n// Drawer context\nconst DrawerContext = React.createContext<{\n    isOpen: boolean;\n    setIsOpen: (isOpen: boolean) => void;\n    origin: DrawerOrigin;\n    variants: Variants;\n    transition: Transition;\n} | null>(null);\n\n// useDrawer hook\nconst useDrawer = () => {\n    const context = React.useContext(DrawerContext);\n    if (!context) {\n        throw new Error(\"Drawer components must be used within a Drawer\");\n    }\n    return context;\n};\n\n// Drawer component\ninterface DrawerProps {\n    children: React.ReactNode;\n    origin?: DrawerOrigin;\n    variants?: Variants;\n    transition?: Transition;\n    defaultOpen?: boolean;\n    open?: boolean;\n    onOpenChange?: (isOpen: boolean) => void;\n}\n\nconst defaultVariants: Record<DrawerOrigin, Variants> = {\n    left: {\n        initial: { x: \"-100%\" },\n        animate: { x: 0 },\n        exit: { x: \"-100%\" }\n    },\n    right: {\n        initial: { x: \"100%\" },\n        animate: { x: 0 },\n        exit: { x: \"100%\" }\n    },\n    top: {\n        initial: { y: \"-100%\" },\n        animate: { y: 0 },\n        exit: { y: \"-100%\" }\n    },\n    bottom: {\n        initial: { y: \"100%\" },\n        animate: { y: 0 },\n        exit: { y: \"100%\" }\n    }\n};\n\nconst defaultTransition: Transition = {\n    type: \"spring\",\n    stiffness: 300,\n    damping: 30\n};\n\nconst Drawer: React.FC<DrawerProps> = ({\n    children,\n    origin = \"right\",\n    variants = defaultVariants[origin],\n    transition = defaultTransition,\n    defaultOpen = false,\n    onOpenChange,\n    open\n}) => {\n    const isControlled = open !== undefined;\n    const [uncontrolledOpen, setUncontrolledOpen] = React.useState(defaultOpen);\n    const isOpen = isControlled ? open : uncontrolledOpen;\n\n    const setIsOpen = React.useCallback(\n        (newOpen: boolean) => {\n            if (!isControlled) {\n                setUncontrolledOpen(newOpen);\n            }\n            onOpenChange?.(newOpen);\n        },\n        [isControlled, onOpenChange]\n    );\n\n    React.useEffect(() => {\n        onOpenChange?.(isOpen);\n    }, [isOpen, onOpenChange]);\n\n    return (\n        <DrawerContext.Provider value={{ isOpen, setIsOpen, origin, variants, transition }}>\n            {children}\n        </DrawerContext.Provider>\n    );\n};\n\n// DrawerTrigger component\ninterface DrawerTriggerProps {\n    children: React.ReactNode;\n    asChild?: boolean;\n    className?: string;\n}\n\nconst DrawerTrigger: React.FC<DrawerTriggerProps> = ({ children, asChild = false, className }) => {\n    const { setIsOpen } = useDrawer();\n\n    const handleClick = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setIsOpen(true);\n    };\n\n    if (asChild && React.isValidElement(children)) {\n        return React.cloneElement(children as React.ReactElement<any>, {\n            onClick: (e: React.MouseEvent) => {\n                (children as React.ReactElement<any>).props.onClick?.(e);\n                handleClick(e);\n            }\n        });\n    }\n\n    return (\n        <button onClick={handleClick} className={className}>\n            {children}\n        </button>\n    );\n};\n\n// DrawerContent component\ninterface DrawerContentProps {\n    children: React.ReactNode;\n    onClose?: () => void;\n    className?: string;\n    backdropClassName?: string;\n}\n\nconst DrawerContent: React.FC<DrawerContentProps> = ({\n    children,\n    onClose,\n    className,\n    backdropClassName\n}) => {\n    const { isOpen, setIsOpen, origin, variants, transition } = useDrawer();\n\n    const drawerRef = React.useRef<HTMLDivElement>(null);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n\n    React.useEffect(() => {\n        const handleEscape = (event: KeyboardEvent) => {\n            if (event.key === \"Escape\") {\n                setIsOpen(false);\n                onClose?.();\n            }\n        };\n\n        if (isOpen) {\n            document.addEventListener(\"keydown\", handleEscape);\n            return () => document.removeEventListener(\"keydown\", handleEscape);\n        }\n    }, [isOpen, setIsOpen, onClose]);\n\n    React.useEffect(() => {\n        if (isOpen && contentRef.current) {\n            const focusableElements = Array.from(\n                contentRef.current.querySelectorAll(\n                    'button, [href], input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex=\"-1\"])'\n                )\n            ) as HTMLElement[];\n\n            if (focusableElements.length > 0) {\n                const firstElement = focusableElements[0];\n                const lastElement = focusableElements[focusableElements.length - 1];\n\n                const handleTabKey = (event: KeyboardEvent) => {\n                    if (event.key === \"Tab\") {\n                        if (event.shiftKey && document.activeElement === firstElement) {\n                            event.preventDefault();\n                            lastElement.focus();\n                        } else if (!event.shiftKey && document.activeElement === lastElement) {\n                            event.preventDefault();\n                            firstElement.focus();\n                        }\n                    }\n                };\n\n                firstElement.focus();\n\n                document.addEventListener(\"keydown\", handleTabKey);\n                return () => document.removeEventListener(\"keydown\", handleTabKey);\n            }\n        }\n    }, [isOpen]);\n\n    const portalContent = (\n        <AnimatePresence>\n            {isOpen && (\n                <motion.div\n                    ref={drawerRef}\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    exit={{ opacity: 0 }}\n                    transition={{ duration: 0.2 }}\n                    className={cn(\n                        \"fixed inset-0 z-50 bg-black/50 backdrop-blur-sm\",\n                        backdropClassName\n                    )}\n                    onClick={(e) => {\n                        if (e.target === drawerRef.current) {\n                            setIsOpen(false);\n                        }\n                    }}\n                >\n                    <motion.div\n                        ref={contentRef}\n                        initial=\"initial\"\n                        animate=\"animate\"\n                        exit=\"exit\"\n                        transition={transition}\n                        variants={variants}\n                        className={cn(\n                            \"px-4 fixed bg-white shadow-md border\",\n                            origin === \"left\" || origin === \"right\"\n                                ? \"top-0 bottom-0 w-full md:w-1/4\"\n                                : \"left-0 right-0 h-80\",\n                            origin === \"left\"\n                                ? \"left-0\"\n                                : origin === \"right\"\n                                ? \"right-0\"\n                                : origin === \"top\"\n                                ? \"top-0\"\n                                : \"bottom-0\",\n                            className\n                        )}\n                    >\n                        {children}\n                    </motion.div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n\n    return typeof window !== \"undefined\" ? createPortal(portalContent, document.body) : null;\n};\n\n// DrawerHeader component\nconst DrawerHeader: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => <div className={cn(\"py-4 border-b border-gray-200\", className)}>{children}</div>;\n\n// DrawerTitle component\nconst DrawerTitle: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => <h2 className={cn(\"text-lg font-semibold\", className)}>{children}</h2>;\n\n// DrawerDescription component\nconst DrawerDescription: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => <p className={cn(\"text-sm text-gray-500\", className)}>{children}</p>;\n\n// DrawerClose component\ninterface DrawerCloseProps {\n    children?: React.ReactNode;\n    asChild?: boolean;\n    className?: string;\n}\n\nconst DrawerClose: React.FC<DrawerCloseProps> = ({ children, asChild = false, className }) => {\n    const { setIsOpen } = useDrawer();\n\n    const handleClose = (e: React.MouseEvent) => {\n        e.preventDefault();\n        setIsOpen(false);\n    };\n\n    if (asChild && React.isValidElement(children)) {\n        return React.cloneElement(children as React.ReactElement<any>, {\n            onClick: (e: React.MouseEvent) => {\n                (children as React.ReactElement<any>).props.onClick?.(e);\n                handleClose(e);\n            }\n        });\n    }\n\n    return (\n        <button\n            type=\"button\"\n            onClick={handleClose}\n            aria-label=\"Close drawer\"\n            className={cn(className)}\n        >\n            {children || <X className=\"h-4 w-4\" />}\n        </button>\n    );\n};\n\n// DrawerFooter component\nconst DrawerFooter: React.FC<{ children: React.ReactNode; className?: string }> = ({\n    children,\n    className\n}) => <div className={cn(\"py-4 border-t border-gray-200\", className)}>{children}</div>;\n\nexport {\n    Drawer,\n    DrawerTrigger,\n    DrawerContent,\n    DrawerHeader,\n    DrawerTitle,\n    DrawerDescription,\n    DrawerClose,\n    DrawerFooter\n};\n",
    },
    "magnetic": {
      name: "magnetic",
      label: "magnetic",
      path: "core/magnetic",
      component: React.lazy(() => import("@/content/registry/core/magnetic")),
      type: "",
      rawCode: "\"use client\";\n\nimport gsap from \"gsap\";\nimport { useEffect, useRef, isValidElement, cloneElement } from \"react\";\n\ntype PropType = {\n    children: React.ReactNode;\n};\n\nexport default function Magnetic({ children }: PropType) {\n    const ref = useRef<HTMLDivElement>(null);\n\n    useEffect(() => {\n        const xTo = gsap.quickTo(ref.current, \"x\", { duration: 1, ease: \"elastic.out(1, 0.3)\" });\n        const yTo = gsap.quickTo(ref.current, \"y\", { duration: 1, ease: \"elastic.out(1, 0.3)\" });\n\n        // mouse move event\n        const handleMouseMove = (e: MouseEvent) => {\n            const { clientX, clientY } = e;\n            const rect = ref.current?.getBoundingClientRect();\n\n            if (rect) {\n                const x = clientX - (rect.left + rect.width / 2);\n                const y = clientY - (rect.top + rect.height / 2);\n\n                xTo(x);\n                yTo(y);\n            }\n        };\n\n        const handleMouseLeave = () => {\n            xTo(0);\n            yTo(0);\n        };\n\n        ref.current?.addEventListener(\"mousemove\", handleMouseMove);\n        ref.current?.addEventListener(\"mouseleave\", handleMouseLeave);\n\n        return () => {\n            ref.current?.removeEventListener(\"mousemove\", handleMouseMove);\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            ref.current?.removeEventListener(\"mouseleave\", handleMouseLeave);\n        };\n    }, []);\n\n    const clonedElement = isValidElement(children) ? (\n        cloneElement(children as React.ReactElement<any>, { ref })\n    ) : (\n        <div />\n    );\n\n    return clonedElement;\n}\n",
    },
    "marquee": {
      name: "marquee",
      label: "marquee",
      path: "core/marquee",
      component: React.lazy(() => import("@/content/registry/core/marquee")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MarqueeProps {\n    duration?: number;\n    repeat?: number;\n    className?: string;\n    pauseOnHover?: boolean;\n    children: React.ReactNode;\n    direction?: \"left\" | \"right\";\n    gap?: number;\n}\n\nexport default function Marquee({\n    children,\n    className,\n    duration = 20,\n    repeat = 2,\n    direction = \"left\",\n    pauseOnHover = true,\n    gap = 0\n}: MarqueeProps) {\n    return (\n        <>\n            <div\n                className={cn(\n                    \"group relative flex overflow-hidden\",\n                    \"before:content-[''] before:absolute before:top-0 before:bottom-0 before:left-0 before:w-[50px] before:bg-gradient-to-r before:from-white before:to-transparent before:z-10\",\n                    \"after:content-[''] after:absolute after:top-0 after:bottom-0 after:right-0 after:w-[50px] after:bg-gradient-to-l after:from-white after:to-transparent after:z-10\",\n                    className\n                )}\n            >\n                {Array(repeat)\n                    .fill(0)\n                    .map((_, index) => (\n                        <div\n                            key={index}\n                            className={cn(\n                                `marquee-${direction}`,\n                                \"w-max md:w-full flex shrink-0 items-center justify-around\",\n                                {\n                                    \"group-hover:[animation-play-state:paused]\": pauseOnHover\n                                }\n                            )}\n                            style={{\n                                gap: `${gap}px`,\n                                ...(index === 1 && direction === \"left\"\n                                    ? { marginLeft: `${gap}px` }\n                                    : { marginRight: `${gap}px` })\n                            }}\n                        >\n                            {children}\n                        </div>\n                    ))}\n            </div>\n\n            <style jsx>{`\n                @keyframes marquee-left {\n                    0% {\n                        transform: translateX(0);\n                    }\n                    100% {\n                        transform: translateX(-100%);\n                    }\n                }\n\n                @keyframes marquee-right {\n                    0% {\n                        transform: translateX(-100%);\n                    }\n                    100% {\n                        transform: translateX(0);\n                    }\n                }\n\n                .marquee-left {\n                    animation: marquee-left ${duration}s linear infinite;\n                }\n\n                .marquee-right {\n                    animation: marquee-right ${duration}s linear infinite;\n                }\n            `}</style>\n        </>\n    );\n}\n",
    },
    "select": {
      name: "select",
      label: "select",
      path: "core/select",
      component: React.lazy(() => import("@/content/registry/core/select")),
      type: "",
      rawCode: "/**\n * @todo Add support for keyboard navigation\n * @todo Add support for custom option rendering\n * @todo Add support for loading custom options and extracting label and value\n * @todo Add support for maximum selected options i.e limit the number of selected options for multiple select\n */\n\n\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, AnimatePresence } from \"framer-motion\";\nimport { ChevronDown, X, Check, Loader2, Search } from \"lucide-react\";\n\ntype ValueType = string | string[] | null;\n\ninterface SelectContextType {\n    // core state\n    isOpen: boolean;\n    setIsOpen: (open: boolean) => void;\n    value: ValueType;\n    setValue: React.Dispatch<React.SetStateAction<ValueType>>;\n    searchValue: string;\n    setSearchValue: React.Dispatch<React.SetStateAction<string>>;\n\n    // features\n    multiple?: boolean;\n    loading?: boolean;\n    disabled?: boolean;\n    searchable?: boolean;\n    creatable?: boolean;\n\n    // option management\n    selectedOptions: string[];\n    filteredOptions: string[];\n    onCreateOption?: (value: string) => void;\n    loadedOptions: any[];\n\n    // Navigation\n    highlightedIndex: number;\n    setHighlightedIndex: (index: number) => void;\n\n    // Handlers\n    // handleSelect: (option: string) => void;\n    // handleKeyDown: (event: React.KeyboardEvent) => void;\n    handleCreateOption?: (value: string) => void;\n\n    // Custom behaviors\n    getOptionLabel?: (option: string) => string;\n    filterOption?: (option: string, searchValue: string) => boolean;\n\n    // misc\n    clearable?: boolean;\n    maxSelected?: number;\n}\n\n/* -------------------------------------------------------------------------------------------------\n * SelectContext and utility hook for it\n * -------------------------------------------------------------------------------------------------\n */\n\nconst SelectContext = React.createContext<SelectContextType | null>(null);\n\nconst useSelectContext = () => {\n    const context = React.useContext(SelectContext);\n    if (!context) {\n        throw new Error(\"Select components must be used within a Select provider\");\n    }\n    return context;\n};\n\n/* -------------------------------------------------------------------------------------------------\n * select context provider component as Select\n * -------------------------------------------------------------------------------------------------\n */\n\ninterface SelectProps {\n    // required\n    children: React.ReactNode;\n\n    // controlled value\n    defaultValue?: ValueType;\n    onValueChange?: (value: ValueType) => void;\n\n    // customizations\n    className?: string;\n    \n    // Options\n    getOptionLabel?: (option: string) => string;\n    loadOptions?: (inputValue: string) => Promise<Array<any>>;\n    filterOption?: (option: string, searchValue: string) => boolean;\n    onCreateOption?: (value: string) => void;\n\n    // features\n    multiple?: boolean;\n    searchable?: boolean;\n    disabled?: boolean;\n    loading?: boolean;\n    creatable?: boolean;\n    clearable?: boolean;\n\n    // limit\n    maxSelected?: number;\n\n    // controlled open\n    open?: boolean;\n    onOpenChange?: (open: boolean) => void;\n}\n\nconst Select = ({\n    children,\n    className,\n    loadOptions,\n    filterOption,\n    getOptionLabel,\n    onCreateOption,\n    open,\n    onOpenChange,\n    maxSelected,\n    multiple = false,\n    disabled = false,\n    creatable = false,\n    clearable = true,\n    searchable = false,\n    defaultValue = null,\n    loading: externalLoading = false\n}: SelectProps) => {\n    const id = React.useId();\n    const selectRef = React.useRef<HTMLDivElement>(null);\n\n    const [loading, setLoading] = React.useState(false);\n    const [searchValue, setSearchValue] = React.useState(\"\");\n    const [internalOpen, setInternalOpen] = React.useState(false);\n    const [highlightedIndex, setHighlightedIndex] = React.useState(-1);\n    const [loadedOptions, setLoadedOptions] = React.useState<any[]>([]);\n    const [value, setValue] = React.useState<ValueType>(\n        multiple ? (Array.isArray(defaultValue) ? defaultValue : []) : defaultValue\n    );\n\n    // open state management\n    const isControlledOpen = open !== undefined;\n    const isOpen = isControlledOpen ? open : internalOpen;\n    const setIsOpen = React.useCallback(\n        (newOpen: boolean) => {\n            if (!isControlledOpen) {\n                setInternalOpen(newOpen);\n            }\n            onOpenChange?.(newOpen);\n        },\n        [isControlledOpen, onOpenChange]\n    );\n\n    // Handle filtering of options\n    React.useEffect(() => {\n        if (isOpen && searchValue && !loadOptions) {\n            setLoadedOptions([]);\n        }\n    }, [isOpen, loadOptions, searchValue]);\n\n    // Handle loading of async options\n    React.useEffect(() => {\n        if (loadOptions && isOpen && searchValue) {\n            const debounceTimer = setTimeout(async () => {\n                setLoading(true);\n                try {\n                    const options = await loadOptions(searchValue);\n                    setLoadedOptions(options);\n                } catch (error) {\n                    console.error(\"Error loading options:\", error);\n                } finally {\n                    setLoading(false);\n                }\n            }, 300);\n\n            return () => clearTimeout(debounceTimer);\n        }\n    }, [loadOptions, searchValue, isOpen]);\n\n    // Close select when clicking outside\n    React.useEffect(() => {\n        const handleClickOutside = (event: MouseEvent) => {\n            if (selectRef.current && !selectRef.current.contains(event.target as Node)) {\n                setIsOpen(false);\n            }\n        };\n\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => document.removeEventListener(\"mousedown\", handleClickOutside);\n    }, [setIsOpen]);\n\n    const contextValue = {\n        isOpen,\n        setIsOpen,\n        value,\n        setValue,\n        searchValue,\n        setSearchValue,\n        multiple,\n        loading: loading || externalLoading,\n        disabled,\n        loadedOptions,\n        getOptionLabel,\n        filterOption,\n        searchable,\n        clearable,\n        creatable,\n        maxSelected,\n        selectedOptions: [],\n        filteredOptions: [],\n        highlightedIndex,\n        setHighlightedIndex,\n        onCreateOption\n    };\n\n    return (\n        <SelectContext.Provider value={contextValue}>\n            <div id={id} ref={selectRef} className={cn(\"w-60 relative inline-block\", className)}>\n                {children}\n            </div>\n        </SelectContext.Provider>\n    );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * select contents component\n * -------------------------------------------------------------------------------------------------\n */\n\ninterface SelectContentProps {\n    scrollbarWidth?: \"thin\" | \"none\" | \"auto\";\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst SelectContent = ({ children, className, scrollbarWidth = \"none\" }: SelectContentProps) => {\n    const context = useSelectContext();\n    const [filteredChildren, setFilteredChildren] = React.useState<React.ReactNode[]>([]);\n\n    React.useEffect(() => {\n        if (!children) {\n            setFilteredChildren([]);\n            return;\n        }\n\n        const result = React.Children.map(children, (child) => {\n            if (React.isValidElement(child)) {\n                if (child.type === SelectGroup) {\n                    const filteredGroupChildren = React.Children.toArray(child.props.children)\n                        .filter((groupChild) => {\n                            if (React.isValidElement(groupChild) && groupChild.props.children) {\n                                return String(groupChild.props.children)\n                                    .toLowerCase()\n                                    .includes(context.searchValue?.toLowerCase() || \"\");\n                            }\n                            return false;\n                        })\n                        .filter(Boolean);\n\n                    if (filteredGroupChildren.length > 0) {\n                        return React.cloneElement(child, {}, filteredGroupChildren);\n                    }\n                    return null;\n                }\n\n                if (child.type === SelectOption) {\n                    if (\n                        String(child.props.children)\n                            .toLowerCase()\n                            .includes(context.searchValue?.toLowerCase() || \"\")\n                    ) {\n                        return child;\n                    }\n                    return null;\n                }\n            }\n\n            return child;\n        });\n\n        setFilteredChildren(result || []);\n    }, [children, context.searchValue]);\n\n    // content\n    const content = React.useMemo(() => {\n        // Show loading state when initial load\n        if (context.loading && !context.searchValue) {\n            return (\n                <div className=\"px-4 py-2 text-sm text-gray-500 flex items-center gap-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Loading...\n                </div>\n            );\n        }\n\n        // Show loading state during async search\n        if (context.loading && context.searchValue) {\n            return (\n                <div className=\"px-4 py-2 text-sm text-gray-500 flex items-center gap-2\">\n                    <Loader2 className=\"w-4 h-4 animate-spin\" />\n                    Searching for &quot;{context.searchValue}&quot;...\n                </div>\n            );\n        }\n\n        if (filteredChildren.length === 0 && !context.loading) {\n            if (context.creatable && context.searchValue) {\n                return (\n                    <div\n                        className=\"flex items-center px-2 py-1.5 text-sm text-blue-600 cursor-pointer hover:bg-blue-50\"\n                        onClick={() => context.onCreateOption?.(context.searchValue)}\n                    >\n                        Cannot find &quot;{context.searchValue}&quot;. Create instead?\n                    </div>\n                );\n            }\n\n            return (\n                <div className=\"py-6 text-center text-sm text-gray-500\">\n                    {context.searchValue ? \"No results found\" : \"No options available\"}\n                </div>\n            );\n        }\n\n        return filteredChildren;\n    }, [context.loading, context.searchValue, filteredChildren, context.creatable]);\n\n    if (!context.isOpen) return null;\n\n    return (\n        <AnimatePresence>\n            {context.isOpen && (\n                <motion.div\n                    initial={{ opacity: 0, y: -10 }}\n                    animate={{ opacity: 1, y: 0 }}\n                    exit={{ opacity: 0, y: -10 }}\n                    transition={{ duration: 0.2 }}\n                    className={cn(\n                        \"absolute z-50 w-full mt-1 bg-white rounded shadow-lg overflow-hidden\",\n                        \"border border-gray-200\",\n                        \"max-h-80 overflow-auto\",\n                        className\n                    )}\n                    style={{\n                        scrollbarWidth: scrollbarWidth\n                    }}\n                    role=\"listbox\"\n                >\n                    {context.searchable && (\n                        <div className=\"relative flex items-center px-2 border-b border-gray-4200\">\n                            <Search size={16} className=\"text-gray-400\" />\n                            <input\n                                autoFocus\n                                type=\"text\"\n                                className=\"sticky top-0 w-full px-3 py-2 text-sm focus:outline-none\"\n                                placeholder=\"Search...\"\n                                value={context.searchValue}\n                                onChange={(e) => context.setSearchValue(e.target.value)}\n                                onKeyDown={(e) => e.stopPropagation()}\n                                disabled={context.disabled}\n                            />\n                        </div>\n                    )}\n                    <div>{content}</div>\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * select group component\n * -------------------------------------------------------------------------------------------------\n */\ninterface SelectGroupProps {\n    label: string;\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst SelectGroup = ({ children, className, label }: SelectGroupProps) => {\n    return (\n        <div className={cn(\"py-1\", className)} role=\"group\" aria-label={label}>\n            <div className=\"px-4 py-1.5 text-xs font-semibold text-gray-400 uppercase tracking-wider\">\n                {label}\n            </div>\n            {children}\n        </div>\n    );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * select value component\n * -------------------------------------------------------------------------------------------------\n */\ninterface SelectValueProps {\n    placeholder?: string;\n}\n\nconst SelectValue = ({ placeholder = \"Select an option ...\" }: SelectValueProps) => {\n    const context = useSelectContext();\n\n    if (context.multiple && Array.isArray(context.value)) {\n        return (\n            <div className=\"flex flex-wrap gap-1\">\n                {context.value.length === 0 ? (\n                    <span className=\"h-full w-full flex items-center text-gray-500\">\n                        {placeholder}\n                    </span>\n                ) : (\n                    <div className=\"flex flex-wrap gap-1\">\n                        {context.value.map((val) => (\n                            <span\n                                key={val}\n                                className=\"inline-flex items-center px-2 py-0.5 bg-blue-100 rounded-full text-xs\"\n                            >\n                                {val}\n                                <X\n                                    className=\"w-3 h-3 ml-1 cursor-pointer\"\n                                    onClick={(e) => {\n                                        e.stopPropagation();\n                                        if (!context.disabled) {\n                                            context.setValue(\n                                                (context.value as string[]).filter((v) => v !== val)\n                                            );\n                                        }\n                                    }}\n                                />\n                            </span>\n                        ))}\n                    </div>\n                )}\n            </div>\n        );\n    }\n\n    return (\n        <span\n            onClick={() => {\n                if (!context.isOpen) {\n                    context.setIsOpen(true);\n                }\n            }}\n            className={cn(\"h-full w-full flex items-center\", { \"text-gray-500\": !context.value })}\n        >\n            {context.value || placeholder}\n        </span>\n    );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * select trigger provider component\n * -------------------------------------------------------------------------------------------------\n */\ninterface SelectTriggerProps extends React.HTMLAttributes<HTMLDivElement> {\n    children?: React.ReactNode;\n    className?: string;\n}\n\nconst SelectTrigger = ({ children, className }: SelectTriggerProps) => {\n    const context = useSelectContext();\n\n    return (\n        <div\n            onClick={() => {\n                if (!context.disabled) {\n                    if (!context.isOpen && context.searchValue) {\n                        context.setSearchValue(\"\");\n                    }\n                    context.setIsOpen(!context.isOpen);\n                }\n            }}\n            className={cn(\n                \"w-full px-3 py-2 flex items-center justify-between text-sm border border-gray-300 rounded-md bg-white hover:bg-gray-50 focus-within:ring-2 focus-within:ring-gray-200\",\n                context.disabled ? \"opacity-50 cursor-not-allowed\" : \"cursor-pointer\",\n                className\n            )}\n        >\n            <div className=\"flex flex-1 items-center\">{children}</div>\n            <div className=\"h-full flex gap-2 items-center justify-center\">\n                {/* loading icon */}\n                {context.loading && <Loader2 className=\"w-4 h-4 animate-spin text-gray-400\" />}\n\n                {/* clear icon */}\n                {context.clearable &&\n                    (context.multiple\n                        ? Array.isArray(context.value) && context.value.length > 0\n                        : context.value) && (\n                        <X\n                            className={cn(\n                                \"p-1 transition-transform duration-200 rounded-full hover:bg-gray-200\",\n                                {\n                                    \"text-gray-400\": context.disabled\n                                }\n                            )}\n                            size={20}\n                            onClick={(e) => {\n                                e.stopPropagation();\n                                if (!context.disabled) {\n                                    context.setValue(context.multiple ? [] : null);\n                                    context.setIsOpen(false);\n                                }\n                            }}\n                        />\n                    )}\n\n                <ChevronDown\n                    className={cn(\"transition-transform duration-200\", {\n                        \"text-gray-400\": context.disabled,\n                        \"transform rotate-180\": context.isOpen\n                    })}\n                    size={18}\n                />\n            </div>\n        </div>\n    );\n};\n\n/* -------------------------------------------------------------------------------------------------\n * select option component\n * -------------------------------------------------------------------------------------------------\n */\ninterface SelectOptionProps {\n    value: string;\n    children: string;\n    highlighted?: boolean;\n    disabled?: boolean;\n    className?: string;\n}\n\nconst SelectOption = ({\n    value,\n    children,\n    highlighted,\n    disabled = false,\n    className = \"\"\n}: SelectOptionProps) => {\n    const context = useSelectContext();\n\n    const isSelected = context.multiple\n        ? Array.isArray(context.value) && context.value.includes(value)\n        : context.value === value;\n\n    const handleSelect = () => {\n        if (disabled || context.disabled) return;\n\n        if (context.multiple && Array.isArray(context.value)) {\n            const newValue = isSelected\n                ? context.value.filter((v) => v !== value)\n                : [...context.value, value];\n            context.setValue(newValue);\n        } else {\n            context.setValue(value);\n            context.setIsOpen(false);\n        }\n    };\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === \"Enter\" || e.key === \" \") {\n            e.preventDefault();\n            handleSelect();\n        }\n    };\n\n    const label = context.getOptionLabel\n        ? context.getOptionLabel(children)\n        : children?.toString() || value;\n\n    const isVisible = context.filterOption\n        ? context.filterOption(children, context.searchValue)\n        : !context.searchValue || label.toLowerCase().includes(context.searchValue.toLowerCase());\n\n    if (!isVisible) {\n        return null;\n    }\n\n    return (\n        <div\n            className={cn(\n                \"px-4 py-2 text-sm cursor-pointer hover:bg-gray-100 flex items-center justify-between\",\n                {\n                    \"opacity-50 cursor-not-allowed\": disabled,\n                    \"bg-gray-100\": highlighted,\n                    \"bg-blue-50 text-blue-600\": isSelected\n                },\n                className\n            )}\n            role=\"option\"\n            onClick={handleSelect}\n            onKeyDown={handleKeyDown}\n            aria-selected={isSelected}\n            aria-disabled={disabled}\n            tabIndex={0}\n        >\n            <span>{label}</span>\n            {isSelected && <Check className=\"w-4 h-4 text-blue-500\" />}\n        </div>\n    );\n};\n\nexport { Select, SelectTrigger, SelectContent, SelectOption, SelectValue, SelectGroup };\n",
    },
    "separator": {
      name: "separator",
      label: "separator",
      path: "core/separator",
      component: React.lazy(() => import("@/content/registry/core/separator")),
      type: "",
      rawCode: "import { cn } from \"@/lib/utils\";\nimport React from \"react\";\n\ninterface SeparatorProps extends React.HTMLAttributes<HTMLDivElement> {\n    orientation?: \"horizontal\" | \"vertical\";\n    decorative?: boolean;\n    className?: string;\n}\n\nconst Separator = React.forwardRef<HTMLDivElement, SeparatorProps>(\n    ({ orientation = \"horizontal\", decorative = true, className, ...props }, ref) => {\n        return (\n            <div\n                ref={ref}\n                role={decorative ? \"none\" : \"separator\"}\n                aria-orientation={decorative ? undefined : orientation}\n                data-orientation={orientation}\n                className={cn(\n                    \"shrink-0 bg-border\",\n                    orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n                    className\n                )}\n                {...props}\n            />\n        );\n    }\n);\n\nSeparator.displayName = \"Separator\";\n\nexport { Separator };\n",
    },
    "tabs": {
      name: "tabs",
      label: "tabs",
      path: "core/tabs",
      component: React.lazy(() => import("@/content/registry/core/tabs")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { motion, Variants, Transition, AnimatePresence } from \"framer-motion\";\n\ntype AnimationType = \"line\" | \"none\";\n\ninterface TabContextType {\n    activeTab: string;\n    setActiveTab: (tab: string) => void;\n    animationType: AnimationType;\n    instanceId: string;\n}\n\nconst TabContext = React.createContext<TabContextType | null>(null);\n\nconst useTabContext = () => {\n    const context = React.useContext(TabContext);\n    if (!context) {\n        throw new Error(\"Tab components must be used within a Tabs component\");\n    }\n    return context;\n};\n\ninterface TabsProps {\n    children: React.ReactNode;\n    defaultTab: string;\n    className?: string;\n    animationType?: AnimationType;\n    instanceId?: string;\n}\n\nconst Tabs = ({\n    children,\n    defaultTab,\n    className,\n    animationType = \"line\",\n    instanceId = Math.random().toString(36).slice(2)\n}: TabsProps) => {\n    const [activeTab, setActiveTab] = React.useState(defaultTab);\n\n    return (\n        <TabContext.Provider value={{ activeTab, setActiveTab, animationType, instanceId }}>\n            <div className={cn(\"w-full\", className)}>{children}</div>\n        </TabContext.Provider>\n    );\n};\n\ninterface TabListProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst TabList = ({ children, className }: TabListProps) => {\n    return (\n        <div className={cn(\"relative flex gap-2 border-b border-gray-200\", className)}>\n            {children}\n        </div>\n    );\n};\n\ninterface TabProps {\n    children: React.ReactNode;\n    value: string;\n    className?: string;\n    icon?: React.ReactNode;\n}\n\nconst Tab = ({ children, value, className, icon }: TabProps) => {\n    const { activeTab, setActiveTab, animationType, instanceId } = useTabContext();\n    const isActive = activeTab === value;\n\n    const getAnimationProps = () => {\n        switch (animationType) {\n            case \"line\":\n                return {\n                    layoutId: `activeTab-${instanceId}`,\n                    className: \"absolute -bottom-[1px] left-0 right-0 h-[2px] bg-black rounded-full\"\n                };\n            default:\n                return {};\n        }\n    };\n\n    return (\n        <motion.button\n            onClick={() => setActiveTab(value)}\n            className={cn(\n                \"relative px-4 py-2 text-sm font-medium transition-colors flex items-center gap-2\",\n                isActive ? \"text-black\" : \"text-[#707070] hover:text-black\",\n                className\n            )}\n        >\n            {icon && <span>{icon}</span>}\n            {children}\n            {isActive && animationType !== \"none\" && <motion.div {...getAnimationProps()} />}\n        </motion.button>\n    );\n};\n\ninterface TabPanelsProps {\n    children: React.ReactNode;\n    className?: string;\n}\n\nconst TabPanels = ({ children, className }: TabPanelsProps) => {\n    return <div className={cn(\"mt-3\", className)}>{children}</div>;\n};\n\ninterface TabPanelProps {\n    children: React.ReactNode;\n    value: string;\n    className?: string;\n    variants?: Variants;\n    transition?: Transition;\n}\n\nconst TabPanel = ({\n    children,\n    value,\n    className,\n    variants = undefined,\n    transition = undefined\n}: TabPanelProps) => {\n    const { activeTab } = useTabContext();\n    if (activeTab !== value) return null;\n\n    return (\n        <AnimatePresence mode=\"wait\">\n            {activeTab === value && (\n                <motion.div\n                    initial=\"initial\"\n                    animate=\"animate\"\n                    exit=\"exit\"\n                    variants={variants}\n                    transition={transition}\n                    className={cn(\"p-3 bg-gray-100 rounded-sm\", className)}\n                >\n                    {children}\n                </motion.div>\n            )}\n        </AnimatePresence>\n    );\n};\n\nexport { Tabs, TabList, Tab, TabPanels, TabPanel };\n",
    },
    "text-scramble": {
      name: "text-scramble",
      label: "text scramble",
      path: "core/text-scramble",
      component: React.lazy(() => import("@/content/registry/core/text-scramble")),
      type: "",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\ninterface PropType {\n    children: string;\n    speed?: number;\n    duration?: number;\n    trigger?: boolean;\n    className?: string;\n    characterSet?: string;\n    as?: React.ElementType;\n    onScrambleEnd?: () => void;\n}\n\nconst defaultCharacterSet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n\nexport default function TextScramble({\n    children = \"Hello, World!\",\n    speed = 50,\n    duration = 3,\n    trigger = true,\n    className = \"\",\n    characterSet = defaultCharacterSet,\n    as: Component = \"span\",\n    onScrambleEnd\n}: PropType) {\n    const [scrambledText, setScrambledText] = useState(children);\n\n    const scrambleText = useCallback(() => {\n        let currentIndex = 0;\n        const endTime = Date.now() + duration * 1000;\n\n        const scrambleInterval = setInterval(() => {\n            if (Date.now() > endTime) {\n                clearInterval(scrambleInterval);\n                setScrambledText(children);\n                onScrambleEnd && onScrambleEnd();\n                return;\n            }\n\n            const scrambled = children\n                .split(\"\")\n                .map((char, index) => {\n                    if (char === \" \") {\n                        return \" \";\n                    }\n                    return index < currentIndex\n                        ? char\n                        : characterSet[Math.floor(Math.random() * characterSet.length)];\n                })\n                .join(\"\");\n\n            setScrambledText(scrambled);\n            currentIndex = Math.min(currentIndex + 1, children.length);\n        }, speed);\n\n        return () => clearInterval(scrambleInterval);\n    }, [children, duration, speed, characterSet, onScrambleEnd]);\n\n    useEffect(() => {\n        if (trigger) {\n            const cleanup = scrambleText();\n            return cleanup;\n        } else {\n            setScrambledText(children);\n        }\n    }, [trigger, scrambleText, children]);\n\n    return <Component className={cn(\"font-mono\", className)}>{scrambledText}</Component>;\n}\n",
    },
    "tooltip": {
      name: "tooltip",
      label: "tooltip",
      path: "core/tooltip",
      component: React.lazy(() => import("@/content/registry/core/tooltip")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\nimport { cva } from \"class-variance-authority\";\n\n// variant styles\nexport const tooltipVariants = cva(\"absolute px-3 py-1.5 rounded shadow-lg text-sm\", {\n    variants: {\n        variant: {\n            default: \"bg-zinc-900 text-white\",\n            primary: \"bg-blue-500 text-white\",\n            secondary: \"bg-gray-100 text-gray-900\",\n            destructive: \"bg-red-500 text-white\"\n        }\n    },\n    defaultVariants: {\n        variant: \"default\"\n    }\n});\n\n// Types\ntype TooltipDirection = \"top\" | \"right\" | \"bottom\" | \"left\";\ntype TooltipVariant = \"default\" | \"primary\" | \"secondary\" | \"destructive\";\n\n// Context\nconst TooltipContext = React.createContext<\n    | {\n          isVisible: boolean;\n          setIsVisible: (value: boolean) => void;\n          triggerRef: React.RefObject<HTMLElement>;\n          variant?: TooltipVariant;\n          direction?: TooltipDirection;\n          delay?: number;\n      }\n    | undefined\n>(undefined);\n\n// TooltipProvider component\nconst TooltipProvider = ({ children }: { children: React.ReactNode }) => (\n    <div data-tooltip-provider>{children}</div>\n);\n\n// Tooltip component\ninterface TooltipProps {\n    children: React.ReactNode;\n    variant?: TooltipVariant;\n    direction?: TooltipDirection;\n    delay?: number;\n}\n\nconst Tooltip = ({\n    children,\n    variant = \"default\",\n    direction = \"top\",\n    delay = 200\n}: TooltipProps) => {\n    const [isVisible, setIsVisible] = React.useState(false);\n    const triggerRef = React.useRef<HTMLElement>(null);\n\n    return (\n        <TooltipContext.Provider\n            value={{\n                isVisible,\n                setIsVisible,\n                triggerRef,\n                variant,\n                direction,\n                delay\n            }}\n        >\n            <div className=\"inline-block\">{children}</div>\n        </TooltipContext.Provider>\n    );\n};\n\n// TooltipTrigger component\nconst TooltipTrigger = ({ children }: { children: React.ReactNode }) => {\n    const context = React.useContext(TooltipContext);\n    if (!context) throw new Error(\"TooltipTrigger must be used within Tooltip\");\n\n    const { setIsVisible, triggerRef, delay } = context;\n    let showTimeout: string | number | NodeJS.Timeout | undefined;\n\n    const handleMouseEnter = () => {\n        showTimeout = setTimeout(() => setIsVisible(true), delay);\n    };\n\n    const handleMouseLeave = () => {\n        clearTimeout(showTimeout);\n        setIsVisible(false);\n    };\n\n    return React.cloneElement(React.Children.only(children) as React.ReactElement, {\n        ref: triggerRef,\n        onMouseEnter: handleMouseEnter,\n        onMouseLeave: handleMouseLeave\n    });\n};\n\n// TooltipContent component\nconst TooltipContent = ({ children }: { children: React.ReactNode }) => {\n    const context = React.useContext(TooltipContext);\n    if (!context) throw new Error(\"TooltipContent must be used within Tooltip\");\n\n    const { isVisible, triggerRef, direction = \"top\", variant = \"default\" } = context;\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const [position, setPosition] = React.useState({ top: 0, left: 0 });\n\n    const variants = {\n        hidden: { opacity: 0, scale: 0.95 },\n        visible: { opacity: 1, scale: 1 }\n    };\n\n    React.useEffect(() => {\n        if (isVisible && triggerRef.current && contentRef.current) {\n            const triggerRect = triggerRef.current.getBoundingClientRect();\n            const contentRect = contentRef.current.getBoundingClientRect();\n            const gap = 10;\n\n            let top = 0;\n            let left = 0;\n\n            switch (direction) {\n                case \"top\":\n                    top = triggerRect.top - contentRect.height - gap;\n                    left = triggerRect.left + (triggerRect.width - contentRect.width) / 2;\n                    break;\n                case \"right\":\n                    top = triggerRect.top + (triggerRect.height - contentRect.height) / 2;\n                    left = triggerRect.right + gap;\n                    break;\n                case \"bottom\":\n                    top = triggerRect.bottom + gap;\n                    left = triggerRect.left + (triggerRect.width - contentRect.width) / 2;\n                    break;\n                case \"left\":\n                    top = triggerRect.top + (triggerRect.height - contentRect.height) / 2;\n                    left = triggerRect.left - contentRect.width - gap;\n                    break;\n            }\n\n            setPosition({ top, left });\n        }\n    }, [isVisible, direction, triggerRef]);\n\n    if (!isVisible) return null;\n\n    return (\n        <div className=\"fixed inset-0 z-50 pointer-events-none\">\n            <motion.div\n                ref={contentRef}\n                className={tooltipVariants({ variant })}\n                style={{ top: position.top, left: position.left }}\n                initial=\"hidden\"\n                animate=\"visible\"\n                exit=\"hidden\"\n                variants={variants}\n            >\n                {children}\n            </motion.div>\n        </div>\n    );\n};\n\nexport { TooltipProvider, Tooltip, TooltipTrigger, TooltipContent };\n",
    },
    "typing-effect": {
      name: "typing-effect",
      label: "typing effect",
      path: "core/typing-effect",
      component: React.lazy(() => import("@/content/registry/core/typing-effect")),
      type: "",
      rawCode: "\"use client\";\n\nimport React, { useState, useEffect } from \"react\";\nimport { motion } from \"framer-motion\";\n\ninterface TypingEffectProps {\n    children: string;\n    typingSpeed?: number;\n    className?: string;\n}\n\nexport default function TypingEffect({\n    children,\n    typingSpeed = 100,\n    className = \"\"\n}: TypingEffectProps) {\n    const [displayedText, setDisplayedText] = useState(\"\");\n\n    const text = children;\n\n    useEffect(() => {\n        let currentIndex = 0;\n        const intervalId = setInterval(() => {\n            if (currentIndex <= text.length) {\n                setDisplayedText(text.slice(0, currentIndex));\n                currentIndex++;\n            } else {\n                clearInterval(intervalId);\n            }\n        }, typingSpeed);\n\n        return () => clearInterval(intervalId);\n    }, [text, typingSpeed]);\n\n    return (\n        <div className={`font-mono ${className}`}>\n            {displayedText}\n            <motion.span\n                animate={{ opacity: [0, 1] }}\n                transition={{ duration: 0.5, repeat: Infinity, repeatType: \"reverse\" }}\n            >\n                |\n            </motion.span>\n        </div>\n    );\n}\n",
    },
  },
  "element": {
    "brutalist-button": {
      name: "brutalist-button",
      label: "brutalist button",
      path: "elements/button/brutalist-button",
      component: React.lazy(() => import("@/content/registry/elements/button/brutalist-button")),
      type: "button",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface BrutalistButtonProps {\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport default function BrutalistButton({ children, className, onClick }: BrutalistButtonProps) {\n    return (\n        <button\n            onClick={onClick}\n            className={cn(\n                \"h-12 w-28 px-4 flex items-center justify-center border-2 rounded-sm border-black shadow-[4px_4px_0_0_#000] transition-all duration-200\",\n                \"active:translate-x-1 active:translate-y-1 active:shadow-[2px_2px_0_0_#000]\",\n                className\n            )}\n        >\n            {children || \"Button\"}\n        </button>\n    );\n}\n",
    },
    "neumorphic-button-01": {
      name: "neumorphic-button-01",
      label: "neumorphic button 01",
      path: "elements/button/neumorphic-button-01",
      component: React.lazy(() => import("@/content/registry/elements/button/neumorphic-button-01")),
      type: "button",
      rawCode: "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface PropType {\n    children?: React.ReactNode;\n    className?: string;\n}\n\nexport default function NeumorphicButton({ children, className = \"\" }: PropType) {\n    return (\n        <button\n            className={cn(\n                \"h-12 w-24 rounded-md border transition-all duration-300 cursor-pointer bg-[#fafafa] shadow-[4px_4px_8px_#cbcbcb,_-4px_-4px_8px_#ffffff]\",\n                \"hover:shadow-[inset_2px_2px_4px_#c9c9c9,_inset_-2px_-2px_4px_#ffffff]\",\n                className\n            )}\n        >\n            {children || \"Button\"}\n        </button>\n    );\n}\n\n",
    },
    "shimmer-button": {
      name: "shimmer-button",
      label: "shimmer button",
      path: "elements/button/shimmer-button",
      component: React.lazy(() => import("@/content/registry/elements/button/shimmer-button")),
      type: "button",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ShimmerButtonProps {\n    className?: string;\n}\n\nconst ShimmerButton = ({ className }: ShimmerButtonProps) => {\n    return (\n        <>\n            <button\n                className={cn(\n                    \"h-12 w-28 rounded-full relative cursor-pointer flex items-center justify-center border border-white/10 bg-black overflow-hidden\",\n                    className\n                )}\n            >\n                <span\n                    className={cn(\n                        \"absolute w-full aspect-[1] top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n                        \"before:content-[''] before:absolute before:h-full before:w-full before:aspect-[1] top-1/2 left-100 before:-translate-x-1/2 before:-translate-y-1/2   before:bg-[conic-gradient(transparent,white_60deg,transparent_61deg)]\",\n                        \"before:animate-[lazy_2s_linear_infinite]\"\n                    )}\n                ></span>\n\n                <span className=\"absolute inset-[2px] bg-black rounded-full\"></span>\n                <span className=\"text-white z-10 text-sm\">Shimmer</span>\n            </button>\n\n            <style>{`\n                @keyframes lazy {\n                    0% {\n                        transform: rotate(0deg);\n                    }\n\n                    100% {\n                        transform: rotate(360deg);\n                    }\n                }\n            `}</style>\n        </>\n    );\n};\n\nexport default ShimmerButton;\n",
    },
    "skeuomorphic-button-01": {
      name: "skeuomorphic-button-01",
      label: "skeuomorphic button 01",
      path: "elements/button/skeuomorphic-button-01",
      component: React.lazy(() => import("@/content/registry/elements/button/skeuomorphic-button-01")),
      type: "button",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface ButtonProps {\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport default function SkeuomorphicButton({ children, className, ...props }: ButtonProps) {\n    return (\n        <button\n            className={cn(\n                \"h-12 w-24 bg-gradient-to-b from-gray-100 to-gray-300 rounded-md\",\n                \"text-gray-700 font-semibold\",\n                \"border border-gray-400 shadow-md\",\n                \"hover:from-gray-200 hover:to-gray-400\",\n                \"active:from-gray-300 active:to-gray-500\",\n                \"transition-all duration-300\",\n                className\n            )}\n            {...props}\n        >\n            {children || \"Button\"}\n        </button>\n    );\n}\n",
    },
    "animated-checkbox-01": {
      name: "animated-checkbox-01",
      label: "animated checkbox 01",
      path: "elements/checkbox/animated-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/animated-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function CustomCheckbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div className=\"flex items-center\">\n            <label className=\"cursor-pointer relative\">\n                <input\n                    type=\"checkbox\"\n                    className=\"hidden\"\n                    checked={isChecked}\n                    onChange={() => setIsChecked(!isChecked)}\n                />\n                <span\n                    className={`block border-2 border-gray-700 rounded-md transition-all duration-500 ${\n                        isChecked\n                            ? \"h-7 w-4 rotate-45 -translate-y-1 border-t-transparent border-l-transparent rounded-none\"\n                            : \"h-7 w-7\"\n                    }`}\n                ></span>\n            </label>\n        </div>\n    );\n}\n",
    },
    "animated-checkbox-02": {
      name: "animated-checkbox-02",
      label: "animated checkbox 02",
      path: "elements/checkbox/animated-checkbox-02",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/animated-checkbox-02")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function AnimatedCheckbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"hidden\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n            />\n            <svg viewBox=\"0 0 64 64\" className=\"h-7 w-7 overflow-visible\">\n                <path\n                    d=\"M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16\"\n                    pathLength=\"575.0541381835938\"\n                    className=\"fill-none stroke-black stroke-[4] stroke-round transition-all duration-500 ease-in-out\"\n                    style={{\n                        strokeDasharray: isChecked ? \"70.5096664428711 9999999\" : \"241 9999999\",\n                        strokeDashoffset: isChecked ? \"-262.2723388671875\" : \"0\"\n                    }}\n                />\n            </svg>\n        </label>\n    );\n}\n",
    },
    "fill-checkbox-01": {
      name: "fill-checkbox-01",
      label: "fill checkbox 01",
      path: "elements/checkbox/fill-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/fill-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useState } from \"react\";\n\nexport default function CustomCheckbox() {\n    const [isChecked, setIsChecked] = useState(true);\n\n    return (\n        <label className=\"flex items-center\">\n            <input\n                type=\"checkbox\"\n                className={cn(\n                    \"relative w-7 h-7 outline-none appearance-none border-2 rounded-md transition-all cursor-pointer duration-500\",\n                    \"before:content-[''] before:absolute before:w-5 before:h-5 before:top-1/2 before:left-1/2 before:transform before:-translate-x-1/2 before:-translate-y-1/2 before:rounded-sm before:bg-gray-400 before:transition-[transform] before:duration-300\",\n                    isChecked && \"before:scale-1\",\n                    !isChecked && \"before:scale-0\"\n                )}\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n            />\n            {/* <span className=\"ml-3\">Option A</span> */}\n        </label>\n    );\n}\n",
    },
    "gradient-checkbox-01": {
      name: "gradient-checkbox-01",
      label: "gradient checkbox 01",
      path: "elements/checkbox/gradient-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/gradient-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nexport default function GradientCheckbox() {\n    const [isChecked, setIsChecked] = useState(true);\n\n    const toggleCheckbox = () => setIsChecked(!isChecked);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                    type=\"checkbox\"\n                    className=\"sr-only\"\n                    checked={isChecked}\n                    onChange={toggleCheckbox}\n                />\n                <motion.div\n                    className={`w-8 h-8 rounded-md border ${\n                        isChecked\n                            ? \"bg-gradient-to-br from-purple-500 via-pink-500 to-red-500\"\n                            : \"bg-white\"\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{\n                        type: \"spring\",\n                        stiffness: 300,\n                        damping: 20\n                    }}\n                >\n                    <motion.svg\n                        className=\"w-full h-full p-2 text-white\"\n                        viewBox=\"0 0 24 24\"\n                        initial=\"hidden\"\n                        animate={isChecked ? \"visible\" : \"hidden\"}\n                    >\n                        <motion.path\n                            d=\"M4 12.6111L8.92308 17.5L20 6.5\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"3\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            variants={{\n                                visible: {\n                                    pathLength: 1,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: \"easeOut\"\n                                    }\n                                },\n                                hidden: {\n                                    pathLength: 0,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: \"easeIn\"\n                                    }\n                                }\n                            }}\n                        />\n                    </motion.svg>\n                </motion.div>\n            </label>\n        </div>\n    );\n}\n",
    },
    "neo-brutalist-checkbox-01": {
      name: "neo-brutalist-checkbox-01",
      label: "neo brutalist checkbox 01",
      path: "elements/checkbox/neo-brutalist-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/neo-brutalist-checkbox-01")),
      type: "checkbox",
      rawCode: "import React from \"react\";\n\nexport default function NeoBrutalistCheckbox() {\n    return (\n        <label className=\"cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-7 h-7 bg-white border-2 border-black shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] peer-checked:bg-yellow-400 transition-all\">\n                <svg\n                    className=\"w-7 h-7 text-black fill-current hidden peer-checked:block\"\n                    viewBox=\"0 0 20 20\"\n                >\n                    <path d=\"M0 11l2-2 5 5L18 3l2 2L7 18z\" />\n                </svg>\n            </div>\n        </label>\n    );\n}\n",
    },
    "neo-brutalist-checkbox-02": {
      name: "neo-brutalist-checkbox-02",
      label: "neo brutalist checkbox 02",
      path: "elements/checkbox/neo-brutalist-checkbox-02",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/neo-brutalist-checkbox-02")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function Checkbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"relative cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n                className=\"absolute opacity-0\"\n            />\n            <div\n                className={`w-[30px] h-[30px] relative border-2 border-[#323232] rounded-[5px] shadow-[4px_4px_#323232] transition-all duration-300\n                ${isChecked ? \"bg-green-500\" : \"bg-[#ccc]\"}`}\n            >\n                {isChecked && (\n                    <div className=\"w-[7px] h-[15px] absolute top-[2px] left-[8px] border-r-[2.5px] border-b-[2.5px] border-solid border-white transform rotate-45\"></div>\n                )}\n            </div>\n        </label>\n    );\n}\n",
    },
    "neomorphic-checkbox-01": {
      name: "neomorphic-checkbox-01",
      label: "neomorphic checkbox 01",
      path: "elements/checkbox/neomorphic-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/neomorphic-checkbox-01")),
      type: "checkbox",
      rawCode: "import React from \"react\";\n\nexport default function NeomorphicCheckbox() {\n    return (\n        <label className=\"cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-7 h-7 bg-gray-200 rounded-md shadow-[inset_-2px_-2px_5px_rgba(255,255,255,0.7),inset_2px_2px_5px_rgba(0,0,0,0.1)] peer-checked:bg-blue-500\">\n                <svg\n                    className=\"w-7 h-7 text-white fill-current hidden peer-checked:block\"\n                    viewBox=\"0 0 20 20\"\n                >\n                    <path d=\"M0 11l2-2 5 5L18 3l2 2L7 18z\" />\n                </svg>\n            </div>\n        </label>\n    );\n}\n",
    },
    "skeuomorphic-checkbox-01": {
      name: "skeuomorphic-checkbox-01",
      label: "skeuomorphic checkbox 01",
      path: "elements/checkbox/skeuomorphic-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/skeuomorphic-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function SkeuomorphicCheckbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    const handleChange = () => {\n        setIsChecked((prev) => !prev);\n    };\n\n    return (\n        <label className=\"cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"\n                    appearance-none w-7 h-7 bg-white border-2 border-gray-300 duration-300 \n                    rounded-sm shadow-md checked:bg-blue-400 checked:border-blue-500 \n                    relative group cursor-pointer\n                \"\n                checked={isChecked}\n                onChange={handleChange}\n            />\n        </label>\n    );\n}\n",
    },
    "classic": {
      name: "classic",
      label: "classic",
      path: "elements/loader/classic",
      component: React.lazy(() => import("@/content/registry/elements/loader/classic")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Classic({\n    size = \"md\",\n    color = \"primary\"\n}: {\n    size?: \"sm\" | \"md\" | \"lg\";\n    color?: \"primary\" | \"secondary\" | \"white\";\n}) {\n    const sizeClasses = {\n        sm: \"w-5 h-5\",\n        md: \"w-8 h-8\",\n        lg: \"w-12 h-12\"\n    };\n\n    const colorClasses = {\n        primary: \"text-primary\",\n        secondary: \"text-secondary\",\n        white: \"text-white\"\n    };\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <div\n                className={`${sizeClasses[size]} ${colorClasses[color]} animate-spin`}\n                style={{\n                    borderRadius: \"50%\",\n                    border: \"2px solid currentColor\",\n                    borderTopColor: \"transparent\"\n                }}\n                role=\"status\"\n                aria-label=\"loading\"\n            >\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n            <style jsx>{`\n                @keyframes spin {\n                    to {\n                        transform: rotate(360deg);\n                    }\n                }\n                .animate-spin {\n                    animation: spin 1s linear infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "jumping-dots": {
      name: "jumping-dots",
      label: "jumping dots",
      path: "elements/loader/jumping-dots",
      component: React.lazy(() => import("@/content/registry/elements/loader/jumping-dots")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function JumpingDots() {\n    return (\n        <div className=\"flex items-end justify-between w-[47px] h-[23.5px]\">\n            {Array.from({ length: 4 }).map((_, index) => (\n                <div\n                    key={index}\n                    className={`flex-shrink-0 w-[8px] h-[8px] rounded-full bg-black`}\n                    style={{\n                        animation: `jump 1s ease-in-out calc(1s * -${(4 - index) * 0.15}) infinite`\n                    }}\n                ></div>\n            ))}\n\n            <style jsx>{`\n                @keyframes jump {\n                    0%,\n                    100% {\n                        transform: translateY(0);\n                    }\n                    50% {\n                        transform: translateY(-200%);\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "leapfrog": {
      name: "leapfrog",
      label: "leapfrog",
      path: "elements/loader/leapfrog",
      component: React.lazy(() => import("@/content/registry/elements/loader/leapfrog")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function LeapFrog() {\n    // Array of dot configurations\n    const dots = [\n        { delay: \"0s\", translateX: \"translate-x-0\" },\n        { delay: \"-0.833s\", translateX: \"translate-x-4\" },\n        { delay: \"-1.667s\", translateX: \"translate-x-8\" }\n    ];\n\n    return (\n        <div className=\"h-10 w-10 relative flex items-center justify-between\">\n            {dots.map((dot, index) => (\n                <div\n                    key={index}\n                    className={`\n                        absolute top-0 left-0 flex items-center justify-start w-full h-full\n                        before:content-[''] before:block before:h-2 before:w-2 before:rounded-full before:bg-black\n                        before:transition-colors before:duration-300 before:ease-in-out\n                        animate-leapFrog\n                    `}\n                    style={{\n                        animationDelay: dot.delay\n                    }}\n                />\n            ))}\n\n            <style jsx>{`\n                @keyframes leapFrog {\n                    0% {\n                        transform: translateX(0) rotate(0deg);\n                    }\n                    33.333% {\n                        transform: translateX(0) rotate(180deg);\n                    }\n                    66.666% {\n                        transform: translateX(-15px) rotate(180deg);\n                    }\n                    99.999% {\n                        transform: translateX(-31px) rotate(180deg);\n                    }\n                    100% {\n                        transform: translateX(0) rotate(0deg);\n                    }\n                }\n\n                .animate-leapFrog {\n                    animation: leapFrog 2.5s ease infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "line-spinner": {
      name: "line-spinner",
      label: "line spinner",
      path: "elements/loader/line-spinner",
      component: React.lazy(() => import("@/content/registry/elements/loader/line-spinner")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n\nexport default function LineSpinner() {\n    return (\n        <div className=\"relative w-12 h-12\">\n            {[...Array(12)].map((_, i) => (\n                <motion.div\n                    key={i}\n                    className=\"absolute w-1 h-4 bg-primary\"\n                    style={{\n                        left: \"50%\",\n                        top: \"50%\",\n                        transform: `rotate(${i * 30}deg)`,\n                        transformOrigin: \"0% 0%\"\n                    }}\n                    animate={{\n                        opacity: [0.1, 1, 0.1]\n                    }}\n                    transition={{\n                        duration: 1,\n                        repeat: Infinity,\n                        delay: i * 0.1\n                    }}\n                />\n            ))}\n        </div>\n    );\n}\n",
    },
    "line-wobble": {
      name: "line-wobble",
      label: "line wobble",
      path: "elements/loader/line-wobble",
      component: React.lazy(() => import("@/content/registry/elements/loader/line-wobble")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function LineWobble() {\n    return (\n        <div className=\"relative flex items-center justify-center h-[5px] w-[80px] rounded-[2.5px] overflow-hidden transform\">\n            <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-10 transition-colors duration-300\"></div>\n            <div className=\"h-full w-full rounded-[2.5px] animate-wobble bg-black transition-colors duration-300\"></div>\n\n            <style jsx>{`\n                @keyframes wobble {\n                    0%,\n                    100% {\n                        transform: translateX(-95%);\n                    }\n                    50% {\n                        transform: translateX(95%);\n                    }\n                }\n                .animate-wobble {\n                    animation: wobble 1.75s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "newtons-cradle": {
      name: "newtons-cradle",
      label: "newtons cradle",
      path: "elements/loader/newtons-cradle",
      component: React.lazy(() => import("@/content/registry/elements/loader/newtons-cradle")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function NewtonsCradle() {\n    return (\n        <div className=\"h-10 w-10 relative flex items-center justify-center\">\n            <div className=\"dot animate-swing\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot animate-swing2\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot\">\n                <div className=\"dot-inner\" />\n            </div>\n\n            <style jsx>{`\n                .dot {\n                    position: relative;\n                    display: flex;\n                    flex-shrink: 0;\n                    align-items: center;\n                    justify-content: center;\n                    height: 100%;\n                    width: 25%;\n                    transform-origin: center top;\n                }\n\n                .dot-inner {a\n                    content: \"\";\n                    display: block;\n                    width: 100%;\n                    height: 25%;\n                    border-radius: 50%;\n                    background-color: black;\n                    transition: background-color 0.3s ease;\n                }\n\n                .dot:first-child {\n                    animation: swing 1.4s linear infinite;\n                }\n\n                .dot:last-child {\n                    animation: swing2 1.4s linear infinite;\n                }\n\n                @keyframes swing {\n                    0% {\n                        transform: rotate(0deg);\n                        animation-timing-function: ease-out;\n                    }\n                    25% {\n                        transform: rotate(70deg);\n                        animation-timing-function: ease-in;\n                    }\n                    50% {\n                        transform: rotate(0deg);\n                        animation-timing-function: linear;\n                    }\n                }\n\n                @keyframes swing2 {\n                    0% {\n                        transform: rotate(0deg);\n                        animation-timing-function: linear;\n                    }\n                    50% {\n                        transform: rotate(0deg);\n                        animation-timing-function: ease-out;\n                    }\n                    75% {\n                        transform: rotate(-70deg);\n                        animation-timing-function: ease-in;\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "orbit": {
      name: "orbit",
      label: "orbit",
      path: "elements/loader/orbit",
      component: React.lazy(() => import("@/content/registry/elements/loader/orbit")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Orbit() {\n    return (\n        <div>\n            <div className=\"relative h-[14px] w-[35px]\">\n                <div className=\"absolute h-[14px] w-[14px] rounded-full bg-black animate-[orbit_1.4s_linear_infinite]\"></div>\n                <div className=\"absolute h-[14px] w-[14px] rounded-full bg-black animate-[orbit_1.4s_linear_infinite] delay-700\"></div>\n            </div>\n\n            <style jsx>{`\n                @keyframes orbit {\n                    0% {\n                        transform: translateX(calc(35px * 0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                    5% {\n                        transform: translateX(calc(35px * 0.235)) scale(0.684208);\n                        opacity: 0.58;\n                    }\n                    10% {\n                        transform: translateX(calc(35px * 0.182)) scale(0.631576);\n                        opacity: 0.51;\n                    }\n                    15% {\n                        transform: translateX(calc(35px * 0.129)) scale(0.578944);\n                        opacity: 0.44;\n                    }\n                    20% {\n                        transform: translateX(calc(35px * 0.076)) scale(0.526312);\n                        opacity: 0.37;\n                    }\n                    25% {\n                        transform: translateX(0%) scale(0.47368);\n                        opacity: 0.3;\n                    }\n                    30% {\n                        transform: translateX(calc(35px * -0.076)) scale(0.526312);\n                        opacity: 0.37;\n                    }\n                    35% {\n                        transform: translateX(calc(35px * -0.129)) scale(0.578944);\n                        opacity: 0.44;\n                    }\n                    40% {\n                        transform: translateX(calc(35px * -0.182)) scale(0.631576);\n                        opacity: 0.51;\n                    }\n                    45% {\n                        transform: translateX(calc(35px * -0.235)) scale(0.684208);\n                        opacity: 0.58;\n                    }\n                    50% {\n                        transform: translateX(calc(35px * -0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                    55% {\n                        transform: translateX(calc(35px * -0.235)) scale(0.789472);\n                        opacity: 0.72;\n                    }\n                    60% {\n                        transform: translateX(calc(35px * -0.182)) scale(0.842104);\n                        opacity: 0.79;\n                    }\n                    65% {\n                        transform: translateX(calc(35px * -0.129)) scale(0.894736);\n                        opacity: 0.86;\n                    }\n                    70% {\n                        transform: translateX(calc(35px * -0.076)) scale(0.947368);\n                        opacity: 0.93;\n                    }\n                    75% {\n                        transform: translateX(0%) scale(1);\n                        opacity: 1;\n                    }\n                    80% {\n                        transform: translateX(calc(35px * 0.076)) scale(0.947368);\n                        opacity: 0.93;\n                    }\n                    85% {\n                        transform: translateX(calc(35px * 0.129)) scale(0.894736);\n                        opacity: 0.86;\n                    }\n                    90% {\n                        transform: translateX(calc(35px * 0.182)) scale(0.842104);\n                        opacity: 0.79;\n                    }\n                    95% {\n                        transform: translateX(calc(35px * 0.235)) scale(0.789472);\n                        opacity: 0.72;\n                    }\n                    100% {\n                        transform: translateX(calc(35px * 0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "pendulum": {
      name: "pendulum",
      label: "pendulum",
      path: "elements/loader/pendulum",
      component: React.lazy(() => import("@/content/registry/elements/loader/pendulum")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport { motion } from \"framer-motion\";\n\ninterface PendulumLoadingProps {\n    swingDuration?: number;\n    swingAngle?: number;\n    threadLength?: number;\n}\n\nexport default function Pendulum(props: PendulumLoadingProps) {\n    const swingDuration = props.swingDuration || 1.5;\n    const swingAngle = props.swingAngle || 30; // degrees\n    const threadLength = props.threadLength || 60; // pixels\n\n    return (\n        <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n            {/* Pendulum anchor point */}\n            <circle cx=\"100\" cy=\"50\" r=\"3\" fill=\"black\" />\n\n            {/* Pendulum thread */}\n            <motion.line\n                x1=\"100\"\n                y1=\"50\"\n                x2=\"100\"\n                y2={50 + threadLength}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                animate={{\n                    rotate: [swingAngle, -swingAngle]\n                }}\n                transition={{\n                    duration: swingDuration,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                    repeatType: \"reverse\"\n                }}\n                style={{ originX: \"100px\", originY: \"50px\" }}\n            />\n\n            {/* Pendulum bob (circle) */}\n            <motion.circle\n                cx=\"100\"\n                cy={50 + threadLength}\n                r=\"8\"\n                fill=\"black\"\n                animate={{\n                    rotate: [swingAngle, -swingAngle]\n                }}\n                transition={{\n                    duration: swingDuration,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                    repeatType: \"reverse\"\n                }}\n                style={{ originX: \"100px\", originY: \"50px\" }}\n            />\n        </svg>\n    );\n}\n",
    },
    "pulsating-dots": {
      name: "pulsating-dots",
      label: "pulsating dots",
      path: "elements/loader/pulsating-dots",
      component: React.lazy(() => import("@/content/registry/elements/loader/pulsating-dots")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function PulsingDots() {\n    return (\n        <div className=\"relative flex items-center justify-between w-[43px] h-[10.32px]\">\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-0\"></div>\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-200\"></div>\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-400\"></div>\n\n            <style jsx>{`\n                @keyframes pulse {\n                    0%,\n                    100% {\n                        transform: scale(0);\n                    }\n                    50% {\n                        transform: scale(1);\n                    }\n                }\n\n                .animate-pulse {\n                    animation: pulse 1.3s ease-in-out infinite;\n                }\n\n                .delay-0 {\n                    animation-delay: calc(1.3s * -0.25);\n                }\n\n                .delay-200 {\n                    animation-delay: calc(1.3s * -0.125);\n                }\n\n                .delay-400 {\n                    animation-delay: 0s;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "spinner": {
      name: "spinner",
      label: "spinner",
      path: "elements/loader/spinner",
      component: React.lazy(() => import("@/content/registry/elements/loader/spinner")),
      type: "loader",
      rawCode: "import React from \"react\";\n\nexport default function SpinnerLoader() {\n    return (\n        <div\n            className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-black\"\n            aria-label=\"Loading\"\n        >\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n",
    },
    "spiral": {
      name: "spiral",
      label: "spiral",
      path: "elements/loader/spiral",
      component: React.lazy(() => import("@/content/registry/elements/loader/spiral")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Spiral() {\n    return (\n        <div className=\"relative flex items-center justify-start h-[40px] w-[40px]\">\n            {Array.from({ length: 8 }).map((_, index) => (\n                <div\n                    key={index}\n                    className=\"absolute top-0 left-0 flex items-center justify-start h-full w-full\"\n                    style={{ transform: `rotate(${index * 45}deg)` }}\n                >\n                    <div\n                        className={`h-[20%] w-[20%] rounded-full bg-black opacity-50 animate-pulse`}\n                        style={{\n                            animationDelay: `-${index * 0.1125}s`,\n                            animationDuration: \"0.9s\",\n                        }}\n                    ></div>\n                </div>\n            ))}\n            <style jsx>{`\n                @keyframes pulse {\n                    0%,\n                    100% {\n                        transform: scale(0);\n                        opacity: 0.5;\n                    }\n                    50% {\n                        transform: scale(1);\n                        opacity: 1;\n                    }\n                }\n                .animate-pulse {\n                    animation: pulse 0.9s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "three-body": {
      name: "three-body",
      label: "three body",
      path: "elements/loader/three-body",
      component: React.lazy(() => import("@/content/registry/elements/loader/three-body")),
      type: "loader",
      rawCode: "\"use client\"\n\nimport React from \"react\";\n\nexport default function ThreeBody() {\n    return (\n        <>\n            <div className=\"relative inline-block h-[35px] w-[35px] animate-[spin78236_2s_infinite_linear]\">\n                <div className=\"absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] left-0 rotate-[60deg]\">\n                    <div\n                        className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]\"\n                        style={{ animationDelay: \"-0.24s\" }}\n                    ></div>\n                </div>\n                <div className=\"absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] right-0 rotate-[-60deg]\">\n                    <div\n                        className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]\"\n                        style={{ animationDelay: \"-0.12s\" }}\n                    ></div>\n                </div>\n                <div className=\"absolute h-full w-[30%] bottom-[-5%] left-0 translate-x-[116.666%]\">\n                    <div className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full top-0 left-0 animate-[wobble2_0.8s_infinite_ease-in-out]\"></div>\n                </div>\n            </div>\n\n            <style jsx>\n                {`\n                    @keyframes spin78236 {\n                        0% {\n                            transform: rotate(0deg);\n                        }\n                        100% {\n                            transform: rotate(360deg);\n                        }\n                    }\n                    @keyframes wobble1 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(-66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                    @keyframes wobble2 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                `}\n            </style>\n        </>\n    );\n};",
    },
    "zoomies": {
      name: "zoomies",
      label: "zoomies",
      path: "elements/loader/zoomies",
      component: React.lazy(() => import("@/content/registry/elements/loader/zoomies")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Zoomies() {\n    return (\n        <div className=\"relative flex items-center justify-center h-[5px] w-[80px] rounded-[2.5px] overflow-hidden transform\">\n            <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-10 transition-colors duration-300\"></div>\n            <div className=\"h-full w-full rounded-[2.5px] animate-zoom bg-black transition-colors duration-300\"></div>\n\n            <style jsx>{`\n                @keyframes zoom {\n                    0% {\n                        transform: translateX(-100%);\n                    }\n                    100% {\n                        transform: translateX(100%);\n                    }\n                }\n                .animate-zoom {\n                    animation: zoom 1.4s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "demo-select": {
      name: "demo-select",
      label: "demo select",
      path: "elements/select/demo-select",
      component: React.lazy(() => import("@/content/registry/elements/select/demo-select")),
      type: "select",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { ChevronDown } from \"lucide-react\";\n\ntype Option = {\n    value: string;\n    label: string;\n};\n\nconst options: Option[] = [\n    { value: \"node\", label: \"Node\" },\n    { value: \"laravel\", label: \"Laravel\" },\n    { value: \"django\", label: \"Django\" },\n    { value: \"rails\", label: \"Rails\" }\n];\n\nexport default function DemoSelect() {\n    const [selectedOption, setSelectedOption] = useState(\"\");\n\n    const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedOption(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"w-40 relative\">\n                <select\n                    value={selectedOption}\n                    onChange={handleChange}\n                    className=\"w-full px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary\"\n                >\n                    <option value=\"\" disabled>\n                        Framework\n                    </option>\n                    {options.map((option) => (\n                        <option key={option.value} value={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none\">\n                    <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
    },
    "brutalist-switch-01": {
      name: "brutalist-switch-01",
      label: "brutalist switch 01",
      path: "elements/toggle-switch/brutalist-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/brutalist-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function BrutalistSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <button\n                onClick={toggleSwitch}\n                className={`w-16 h-10 border-4 border-black flex items-center justify-start p-1 ${\n                    isOn ? \"bg-yellow-400\" : \"bg-gray-300\"\n                }`}\n            >\n                <div\n                    className={`w-6 h-6 bg-black transform duration-100 ${\n                        isOn ? \"translate-x-6\" : \"\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "classic-switch-01": {
      name: "classic-switch-01",
      label: "classic switch 01",
      path: "elements/toggle-switch/classic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/classic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function ClassicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <button\n                className={`w-14 h-8 flex items-center rounded-full p-1 cursor-pointer ${\n                    isOn ? \"bg-green-500\" : \"bg-gray-300\"\n                }`}\n                onClick={toggleSwitch}\n            >\n                <span\n                    className={`bg-white w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ease-in-out ${\n                        isOn ? \"translate-x-6\" : \"\"\n                    }`}\n                ></span>\n            </button>\n        </div>\n    );\n}\n",
    },
    "day-night-switch-01": {
      name: "day-night-switch-01",
      label: "day night switch 01",
      path: "elements/toggle-switch/day-night-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/day-night-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function DayNightSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"relative inline-block w-20 h-10 cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"sr-only\"\n                checked={isChecked}\n                onChange={(e) => setIsChecked(e.target.checked)}\n            />\n            <span\n                className={cn(\n                    \"absolute inset-0 rounded-full transition-all duration-300 ease-in-out\",\n                    isChecked ? \"bg-indigo-900\" : \"bg-sky-400\",\n                    \"before:content-[''] before:absolute before:w-8 before:h-8 before:rounded-full before:left-1 before:top-1\",\n                    \"before:transition-all before:duration-300 before:ease-in-out\",\n                    isChecked\n                        ? \"before:bg-yellow-200 before:translate-x-10 before:scale-[0.75] before:shadow-[inset_-4px_-2px_0px_0px_#eab308]\"\n                        : \"before:bg-yellow-300 before:scale-100 before:shadow-[inset_8px_-4px_0px_0px_#fbbf24]\"\n                )}\n            >\n                {isChecked && (\n                    <span className=\"absolute inset-0 overflow-hidden rounded-full\">\n                        <span className=\"absolute top-1 left-1 w-1 h-1 bg-white rounded-full opacity-50\" />\n                        <span className=\"absolute top-3 left-6 w-1 h-1 bg-white rounded-full opacity-30\" />\n                        <span className=\"absolute top-5 left-3 w-1 h-1 bg-white rounded-full opacity-70\" />\n                    </span>\n                )}\n            </span>\n            <span className=\"sr-only\">\n                {isChecked ? \"Switch to day mode\" : \"Switch to night mode\"}\n            </span>\n        </label>\n    );\n}\n",
    },
    "emoji-switch-01": {
      name: "emoji-switch-01",
      label: "emoji switch 01",
      path: "elements/toggle-switch/emoji-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/emoji-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function EmojiSwitch() {\n  const [isOn, setIsOn] = useState(false);\n  const handleToggle = () => setIsOn(!isOn);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-center\">\n        <button\n          className={`w-16 h-9 flex items-center rounded-full p-1 cursor-pointer ${\n            isOn ? \"bg-yellow-400\" : \"bg-gray-300\"\n          }`}\n          onClick={handleToggle}\n        >\n          <span\n            className={`w-8 h-8 rounded-full text-2xl transform transition-transform duration-300 ease-in-out ${\n              isOn ? \"translate-x-6\" : \"\"\n            }`}\n          >\n            {isOn ? \"😊\" : \"😴\"}\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n}\n",
    },
    "fluid-switch-01": {
      name: "fluid-switch-01",
      label: "fluid switch 01",
      path: "elements/toggle-switch/fluid-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/fluid-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function FluidSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div\n            className=\"relative h-8\"\n            style={\n                {\n                    \"--active-color\": \"#1868e3\",\n                    \"--inactive-color\": \"#d3d3d6\"\n                } as React.CSSProperties\n            }\n        >\n            <input\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n                className=\"appearance-none m-0 absolute z-10 top-0 left-0 w-full h-full cursor-pointer\"\n            />\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 292 142\"\n                className=\"w-full h-full overflow-visible\"\n            >\n                <path\n                    d=\"M71 142C31.7878 142 0 110.212 0 71C0 31.7878 31.7878 0 71 0C110.212 0 119 30 146 30C173 30 182 0 221 0C260 0 292 31.7878 292 71C292 110.212 260.212 142 221 142C181.788 142 173 112 146 112C119 112 110.212 142 71 142Z\"\n                    className={`transition-colors duration-500 ${\n                        isChecked ? \"fill-[var(--active-color)]\" : \"fill-[var(--inactive-color)]\"\n                    }`}\n                />\n                <g filter=\"url(#goo)\">\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"29\"\n                        height=\"58\"\n                        width=\"116\"\n                        y=\"42\"\n                        x=\"13\"\n                        className={`transition-transform duration-300 origin-center ${\n                            isChecked ? \"translate-x-[150px]\" : \"\"\n                        }`}\n                    />\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"58\"\n                        height=\"114\"\n                        width=\"114\"\n                        y=\"14\"\n                        x=\"14\"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? \"scale-0\" : \"scale-100\"\n                        }`}\n                    />\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"58\"\n                        height=\"114\"\n                        width=\"114\"\n                        y=\"14\"\n                        x=\"164\"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? \"scale-100\" : \"scale-0\"\n                        }`}\n                    />\n                </g>\n                <filter id=\"goo\">\n                    <feGaussianBlur stdDeviation=\"10\" result=\"blur\" in=\"SourceGraphic\" />\n                    <feColorMatrix\n                        result=\"goo\"\n                        values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\"\n                        mode=\"matrix\"\n                        in=\"blur\"\n                    />\n                </filter>\n            </svg>\n        </div>\n    );\n}\n",
    },
    "glassmorphic-switch-01": {
      name: "glassmorphic-switch-01",
      label: "glassmorphic switch 01",
      path: "elements/toggle-switch/glassmorphic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/glassmorphic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function GlassmorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <div\n                className={`relative w-16 h-8 rounded-full p-1 transition-all duration-300 ${\n                    isOn ? \"bg-gradient-to-r from-blue-500 to-purple-500\" : \"bg-gray-200\"\n                }`}\n                onClick={handleToggle}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full bg-white backdrop-blur-md shadow-lg transform transition-all duration-300 ${\n                        isOn ? \"translate-x-8\" : \"translate-x-0\"\n                    }`}\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.2)\",\n                        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n                        border: \"1px solid rgba(255, 255, 255, 0.3)\"\n                    }}\n                ></div>\n            </div>\n        </div>\n    );\n}\n",
    },
    "glow-switch-01": {
      name: "glow-switch-01",
      label: "glow switch 01",
      path: "elements/toggle-switch/glow-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/glow-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function GlowSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`\n                    w-14 h-7 rounded-full transition-all duration-300\n                    ${isOn ? \"bg-blue-500 shadow-[0_0_15px_rgba(59,130,246,0.5)]\" : \"bg-gray-700\"}\n                `}\n            >\n                <div\n                    className={`\n                        w-5 h-5 rounded-full bg-white transition-transform duration-200\n                        m-1 shadow-md\n                        ${isOn ? \"translate-x-7\" : \"translate-x-0\"}\n                    `}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "gradient-switch-01": {
      name: "gradient-switch-01",
      label: "gradient switch 01",
      path: "elements/toggle-switch/gradient-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/gradient-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function GradientSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div>\n            <div className=\"checkbox-wrapper-25\">\n                <input\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={() => setIsChecked(!isChecked)}\n                    className=\"appearance-none h-[25px] w-[75px] rounded-[25px] cursor-pointer transition-all duration-250 ease-in-out\"\n                />\n            </div>\n\n            <style jsx>{`\n                .checkbox-wrapper-25 input[type=\"checkbox\"] {\n                    background-image: -webkit-linear-gradient(\n                            hsla(0, 0%, 0%, 0.1),\n                            hsla(0, 0%, 100%, 0.1)\n                        ),\n                    -webkit-linear-gradient(left, #f66 50%, #6cf 50%);\n                    background-size: 100% 100%, 200% 100%;\n                    background-position: 0 0, 15px 0;\n                    box-shadow: inset 0 1px 4px hsla(0, 0%, 0%, 0.5),\n                        inset 0 0 10px hsla(0, 0%, 0%, 0.5), 0 0 0 1px hsla(0, 0%, 0%, 0.1),\n                        0 -1px 2px 2px hsla(0, 0%, 0%, 0.25), 0 2px 2px 2px hsla(0, 0%, 100%, 0.75);\n                    padding-right: 25px;\n                }\n\n                .checkbox-wrapper-25 input[type=\"checkbox\"]:after {\n                    background-color: #eee;\n                    background-image: -webkit-linear-gradient(\n                        hsla(0, 0%, 100%, 0.1),\n                        hsla(0, 0%, 0%, 0.1)\n                    );\n                    border-radius: 25px;\n                    box-shadow: inset 0 1px 1px 1px hsla(0, 0%, 100%, 1),\n                        inset 0 -1px 1px 1px hsla(0, 0%, 0%, 0.25),\n                        0 1px 3px 1px hsla(0, 0%, 0%, 0.5), 0 0 2px hsla(0, 0%, 0%, 0.25);\n                    content: \"\";\n                    display: block;\n                    height: 25px;\n                    width: 50px;\n                }\n\n                .checkbox-wrapper-25 input[type=\"checkbox\"]:checked {\n                    background-position: 0 0, 35px 0;\n                    padding-left: 25px;\n                    padding-right: 0;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "gradient-switch-02": {
      name: "gradient-switch-02",
      label: "gradient switch 02",
      path: "elements/toggle-switch/gradient-switch-02",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/gradient-switch-02")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function GradientSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-8 rounded-full p-1 duration-300 ease-in-out ${\n                    isOn\n                        ? \"bg-gradient-to-r from-purple-400 via-pink-500 to-red-500\"\n                        : \"bg-gradient-to-r from-gray-200 to-gray-300\"\n                }`}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full bg-white shadow-md transform duration-300 ease-in-out ${\n                        isOn ? \"translate-x-8\" : \"\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "minimalist-switch-01": {
      name: "minimalist-switch-01",
      label: "minimalist switch 01",
      path: "elements/toggle-switch/minimalist-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/minimalist-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function MinimalistSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button onClick={handleToggle} className=\"w-12 h-6 flex items-center\">\n                <div\n                    className={`\n                        w-full h-[2px] bg-gray-200 relative transition-all duration-200\n                        ${isOn ? \"bg-black\" : \"\"}\n                    `}\n                >\n                    <div\n                        className={`\n                            absolute top-1/2 -translate-y-1/2 w-4 h-4 rounded-full border-2 \n                            transition-all duration-200 cursor-pointer\n                            ${\n                                isOn\n                                    ? \"right-0 border-black bg-black\"\n                                    : \"left-0 border-gray-200 bg-gray-100\"\n                            }\n                        `}\n                    />\n                </div>\n            </button>\n        </div>\n    );\n}\n",
    },
    "neo-brutalist-switch-01": {
      name: "neo-brutalist-switch-01",
      label: "neo brutalist switch 01",
      path: "elements/toggle-switch/neo-brutalist-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neo-brutalist-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function NeoBrutalistToggleSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                className={`\n                    relative w-28 h-12\n                    bg-black border-4 border-black\n                    shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]\n                    transition-all duration-300 ease-in-out\n                `}\n                onClick={toggleSwitch}\n                aria-checked={isOn}\n                role=\"switch\"\n            >\n                <div\n                    className={`\n                    absolute top-0 left-0 w-1/2 h-full bg-white\n                    transform transition-transform duration-300 ease-in-out\n                    flex items-center justify-center\n                    ${isOn ? \"translate-x-full\" : \"translate-x-0\"}\n                `}\n                >\n                    <span className=\"text-black font-bold text-xs\">{isOn ? \"ON\" : \"OFF\"}</span>\n                </div>\n            </button>\n        </div>\n    );\n}\n",
    },
    "neomorphic-switch-01": {
      name: "neomorphic-switch-01",
      label: "neomorphic switch 01",
      path: "elements/toggle-switch/neomorphic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neomorphic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function NeomorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-8 rounded-full bg-gray-200 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] flex items-center justify-start p-1`}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-8 bg-white shadow-[0_2px_4px_rgba(0,0,0,0.1)]\"\n                            : \"bg-gray-300 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "neomorphic-switch-02": {
      name: "neomorphic-switch-02",
      label: "neomorphic switch 02",
      path: "elements/toggle-switch/neomorphic-switch-02",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neomorphic-switch-02")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function NeomorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className=\"w-16 h-8 rounded-full bg-gray-100 shadow-[inset_0px_2px_4px_rgba(0,0,0,0.1)] p-1\"\n            >\n                <div\n                    className={`\n                            w-6 h-6 rounded-full transition-all duration-200\n                            ${\n                                isOn\n                                    ? \"bg-blue-500 shadow-lg translate-x-8\"\n                                    : \"bg-white shadow-md translate-x-0\"\n                            }\n                        `}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "neon-switch-01": {
      name: "neon-switch-01",
      label: "neon switch 01",
      path: "elements/toggle-switch/neon-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neon-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function NeonSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-8 rounded-full p-1 duration-300 ease-in-out ${\n                    isOn\n                        ? \"bg-purple-900 shadow-[0_0_10px_2px_rgba(147,51,234,0.7)]\"\n                        : \"bg-gray-500\"\n                }`}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-8 bg-purple-400 shadow-[0_0_10px_2px_rgba(167,139,250,0.7)]\"\n                            : \"bg-gray-400\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "retro-switch-01": {
      name: "retro-switch-01",
      label: "retro switch 01",
      path: "elements/toggle-switch/retro-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/retro-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function RetroSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-10 rounded-lg bg-gradient-to-b from-gray-300 to-gray-400 border-2 border-gray-600 shadow-inner flex items-center justify-start p-1`}\n            >\n                <div\n                    className={`w-6 h-6 rounded transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-7 bg-gradient-to-b from-red-400 to-red-600 border-2 border-red-700\"\n                            : \"bg-gradient-to-b from-gray-600 to-gray-800 border-2 border-gray-900\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "skeuomorphic-switch-01": {
      name: "skeuomorphic-switch-01",
      label: "skeuomorphic switch 01",
      path: "elements/toggle-switch/skeuomorphic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/skeuomorphic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function SkeuomorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-10 rounded-full bg-gradient-to-b from-gray-300 to-gray-400 border border-gray-400 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] flex items-center justify-start p-1`}\n            >\n                <div\n                    className={`w-8 h-8 rounded-full transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-6 bg-gradient-to-b from-green-400 to-green-500 border border-green-600 shadow-md\"\n                            : \"bg-gradient-to-b from-gray-100 to-gray-300 border border-gray-400 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "theme-switch-01": {
      name: "theme-switch-01",
      label: "theme switch 01",
      path: "elements/toggle-switch/theme-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/theme-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Monitor, Moon, Sun } from \"lucide-react\";\n\ntype Theme = \"system\" | \"light\" | \"dark\";\n\nexport default function ThemeSwitch() {\n    const [theme, setTheme] = useState<Theme>(\"system\");\n\n    useEffect(() => {\n        const savedTheme = localStorage.getItem(\"theme\") as Theme;\n        if (savedTheme) {\n            setTheme(savedTheme);\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(\"theme\", theme);\n\n        if (theme === \"dark\") {\n            document.documentElement.classList.add(\"dark\");\n        } else if (theme === \"light\") {\n            document.documentElement.classList.remove(\"dark\");\n        } else {\n            if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n                document.documentElement.classList.add(\"dark\");\n            } else {\n                document.documentElement.classList.remove(\"dark\");\n            }\n        }\n    }, [theme]);\n\n    return (\n        <div>\n            <div className=\"relative flex bg-gray-200 rounded-full p-1 gap-1 items-center h-10\">\n                {/* Sliding background */}\n                <div\n                    className={`absolute h-8 my-1 w-8 bg-white rounded-full shadow-sm transition-transform duration-200 ease-in-out ${\n                        theme === \"system\"\n                            ? \"translate-x-0\"\n                            : theme === \"light\"\n                            ? \"translate-x-9\"\n                            : \"translate-x-[4.5rem]\"\n                    }`}\n                />\n\n                {/* System theme button */}\n                <button\n                    onClick={() => setTheme(\"system\")}\n                    className={`relative z-10 p-2 rounded-full transition-colors duration-200 ${\n                        theme === \"system\" ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\"\n                    }`}\n                    aria-label=\"System theme\"\n                >\n                    <Sun className=\"h-4 w-4\" />\n                </button>\n\n                {/* Light theme button */}\n                <button\n                    onClick={() => setTheme(\"light\")}\n                    className={`relative z-10 p-2 rounded-full transition-colors duration-200 ${\n                        theme === \"light\" ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\"\n                    }`}\n                    aria-label=\"Light theme\"\n                >\n                    <Monitor className=\"h-4 w-4\" />\n                </button>\n\n                {/* Dark theme button */}\n                <button\n                    onClick={() => setTheme(\"dark\")}\n                    className={`relative z-10 p-2 rounded-full transition-colors duration-200 ${\n                        theme === \"dark\" ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\"\n                    }`}\n                    aria-label=\"Dark theme\"\n                >\n                    <Moon className=\"h-4 w-4\" />\n                </button>\n            </div>\n        </div>\n    );\n}\n",
    },
  },
  "examples": {
    "accordion-custom-icons": {
      name: "accordion-custom-icons",
      label: "accordion custom icons",
      path: "accordion-custom-icons",
      component: React.lazy(() => import("@/content/examples/accordion-custom-icons")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionTrigger,\n    AccordionContent\n} from \"../registry/core/accordion\";\nimport { Plus, Minus } from \"lucide-react\";\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion className=\"w-full md:w-[500px]\">\n            <AccordionItem id=\"item-1\">\n                <AccordionItem id=\"item-1\">\n                    <AccordionTrigger\n                        customOpenIcon={<Minus size={14} />}\n                        customClosedIcon={<Plus size={14} />}\n                    >\n                        What is React?\n                    </AccordionTrigger>\n                    <AccordionContent>\n                        React is a JavaScript library for building user interfaces. It lets you\n                        create reusable UI components.\n                    </AccordionContent>\n                </AccordionItem>\n            </AccordionItem>\n            <AccordionItem id=\"item-2\">\n                <AccordionTrigger\n                    customOpenIcon={<Minus size={14} />}\n                    customClosedIcon={<Plus size={14} />}\n                >\n                    What is Tailwind CSS?\n                </AccordionTrigger>\n                <AccordionContent>\n                    Tailwind CSS is a utility-first CSS framework packed with classes like flex,\n                    pt-4, text-center and rotate-90 that can be composed to build any design,\n                    directly in your markup.\n                </AccordionContent>\n            </AccordionItem>\n\n            <AccordionItem id=\"item-3\">\n                <AccordionTrigger\n                    customOpenIcon={<Minus size={14} />}\n                    customClosedIcon={<Plus size={14} />}\n                >\n                    Why use Framer Motion?\n                </AccordionTrigger>\n                <AccordionContent>\n                    Framer Motion is a motion library for React. It provides a declarative, flexible\n                    API to add smooth animations and gestures to your components.\n                </AccordionContent>\n            </AccordionItem>\n        </Accordion>\n    );\n}\n",
    },
    "accordion-default-open": {
      name: "accordion-default-open",
      label: "accordion default open",
      path: "accordion-default-open",
      component: React.lazy(() => import("@/content/examples/accordion-default-open")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionTrigger,\n    AccordionContent\n} from \"../registry/core/accordion\";\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion defaultOpen={[\"item-1\"]} className=\"w-full md:w-[500px]\">\n            <AccordionItem id=\"item-1\">\n                <AccordionTrigger>What is React?</AccordionTrigger>\n                <AccordionContent>\n                    React is a JavaScript library for building user interfaces. It lets you create\n                    reusable UI components.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem id=\"item-3\">\n                <AccordionTrigger>What is Tailwind CSS?</AccordionTrigger>\n                <AccordionContent>\n                    Tailwind CSS is a utility-first CSS framework packed with classes like flex,\n                    pt-4, text-center and rotate-90 that can be composed to build any design,\n                    directly in your markup.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem id=\"item-2\">\n                <AccordionTrigger>Why use Framer Motion?</AccordionTrigger>\n                <AccordionContent>\n                    Framer Motion is a motion library for React. It provides a declarative, flexible\n                    API to add smooth animations and gestures to your components.\n                </AccordionContent>\n            </AccordionItem>\n        </Accordion>\n    );\n}\n",
    },
    "accordion-multiple-open": {
      name: "accordion-multiple-open",
      label: "accordion multiple open",
      path: "accordion-multiple-open",
      component: React.lazy(() => import("@/content/examples/accordion-multiple-open")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionTrigger,\n    AccordionContent\n} from \"../registry/core/accordion\";\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion allowMultipleOpen className=\"w-full md:w-[500px]\">\n            <AccordionItem id=\"item-1\">\n                <AccordionTrigger>What is React?</AccordionTrigger>\n                <AccordionContent>\n                    React is a JavaScript library for building user interfaces. It lets you create\n                    reusable UI components.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem id=\"item-2\">\n                <AccordionTrigger>What is Tailwind CSS?</AccordionTrigger>\n                <AccordionContent>\n                    Tailwind CSS is a utility-first CSS framework packed with classes like flex,\n                    pt-4, text-center and rotate-90 that can be composed to build any design,\n                    directly in your markup.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem id=\"item-3\">\n                <AccordionTrigger>Why use Framer Motion?</AccordionTrigger>\n                <AccordionContent>\n                    Framer Motion is a motion library for React. It provides a declarative, flexible\n                    API to add smooth animations and gestures to your components.\n                </AccordionContent>\n            </AccordionItem>\n        </Accordion>\n    );\n}\n",
    },
    "accordion-single-open": {
      name: "accordion-single-open",
      label: "accordion single open",
      path: "accordion-single-open",
      component: React.lazy(() => import("@/content/examples/accordion-single-open")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Accordion,\n    AccordionItem,\n    AccordionTrigger,\n    AccordionContent\n} from \"../registry/core/accordion\";\n\nexport default function AccordionDemo() {\n    return (\n        <Accordion className=\"w-full md:w-[500px]\">\n            <AccordionItem id=\"item-1\">\n                <AccordionTrigger>What is React?</AccordionTrigger>\n                <AccordionContent>\n                    React is a JavaScript library for building user interfaces. It lets you create\n                    reusable UI components.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem id=\"item-3\">\n                <AccordionTrigger>What is Tailwind CSS?</AccordionTrigger>\n                <AccordionContent>\n                    Tailwind CSS is a utility-first CSS framework packed with classes like flex,\n                    pt-4, text-center and rotate-90 that can be composed to build any design,\n                    directly in your markup.\n                </AccordionContent>\n            </AccordionItem>\n            <AccordionItem id=\"item-2\">\n                <AccordionTrigger>Why use Framer Motion?</AccordionTrigger>\n                <AccordionContent>\n                    Framer Motion is a motion library for React. It provides a declarative, flexible\n                    API to add smooth animations and gestures to your components.\n                </AccordionContent>\n            </AccordionItem>\n        </Accordion>\n    );\n}\n",
    },
    "button-as-child": {
      name: "button-as-child",
      label: "button as child",
      path: "button-as-child",
      component: React.lazy(() => import("@/content/examples/button-as-child")),
      type: "",
      rawCode: "import React from \"react\";\nimport { Button } from \"../registry/core/button\";\n\nexport default function ButtonDemo() {\n    return (\n        <Button variant=\"outline\" asChild>\n            <span>Button</span>\n        </Button>\n    );\n}\n",
    },
    "button-demo": {
      name: "button-demo",
      label: "button demo",
      path: "button-demo",
      component: React.lazy(() => import("@/content/examples/button-demo")),
      type: "",
      rawCode: "import React from \"react\";\nimport { Button } from \"../registry/core/button\";\n\nexport default function ButtonDemo() {\n    return <Button>Button</Button>;\n}\n",
    },
    "button-icon": {
      name: "button-icon",
      label: "button icon",
      path: "button-icon",
      component: React.lazy(() => import("@/content/examples/button-icon")),
      type: "",
      rawCode: "import React from \"react\";\nimport { Button } from \"../registry/core/button\";\nimport { Sun } from \"lucide-react\";\n\nexport default function ButtonDemo() {\n    return (\n        <Button variant=\"outline\" size=\"icon\">\n            <Sun size={18} />\n        </Button>\n    );\n}\n",
    },
    "button-variants": {
      name: "button-variants",
      label: "button variants",
      path: "button-variants",
      component: React.lazy(() => import("@/content/examples/button-variants")),
      type: "",
      rawCode: "import React from \"react\";\nimport { Button } from \"../registry/core/button\";\n\nexport default function ButtonDemo() {\n    return (\n        <div className=\"flex flex-col md:flex-row gap-2\">\n            <Button>Default</Button>\n            <Button variant=\"secondary\">Secondary</Button>\n            <Button variant=\"outline\">Danger</Button>\n            <Button variant=\"danger\">Outline</Button>\n            <Button variant=\"link\">Link</Button>\n        </div>\n    );\n}\n",
    },
    "confetti-demo": {
      name: "confetti-demo",
      label: "confetti demo",
      path: "confetti-demo",
      component: React.lazy(() => import("@/content/examples/confetti-demo")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { triggerConfetti } from \"../registry/functions/confetti\";\n\nexport default function ConfettiDemo() {\n    return (\n        <div className=\"flex gap-4\">\n            <button\n                onClick={() => {\n                    triggerConfetti({\n                        particleCount: 20,\n                        origin: \"left\",\n                        duration: 5000\n                    });\n                }}\n                className=\"w-20 bg-gray-200 py-2 rounded-sm\"\n            >\n                Left\n            </button>\n\n            <button\n                onClick={() => {\n                    triggerConfetti({\n                        particleCount: 60,\n                        origin: \"center\",\n                        duration: 5000\n                    });\n                }}\n                className=\"w-20 bg-gray-200 py-2 rounded-sm\"\n            >\n                Center\n            </button>\n\n            <button\n                onClick={() => {\n                    triggerConfetti({\n                        particleCount: 40,\n                        origin: \"right\",\n                        duration: 5000\n                    });\n                }}\n                className=\"w-20 bg-gray-200 py-2 rounded-sm\"\n            >\n                Right\n            </button>\n        </div>\n    );\n}\n",
    },
    "custom-cursor-basic": {
      name: "custom-cursor-basic",
      label: "custom cursor basic",
      path: "custom-cursor-basic",
      component: React.lazy(() => import("@/content/examples/custom-cursor-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport CustomCursor from \"../registry/core/custom-cursor\";\n\nexport default function CustomCursorBasic() {\n    return (\n        <CustomCursor cursor={<span>👋</span>}>\n            <div className=\"px-8 py-4 border rounded-md\">Hover me!</div>\n        </CustomCursor>\n    );\n}\n",
    },
    "custom-cursor-complex": {
      name: "custom-cursor-complex",
      label: "custom cursor complex",
      path: "custom-cursor-complex",
      component: React.lazy(() => import("@/content/examples/custom-cursor-complex")),
      type: "",
      rawCode: "\"use client\";\n\nimport { ArrowRight, Sparkles } from \"lucide-react\";\nimport CustomCursor from \"@/content/registry/core/custom-cursor\";\n\nexport default function CustomCursorComplex() {\n    return (\n        <CustomCursor\n            cursor={\n                <div className=\"flex items-center space-x-2 bg-yellow-300 px-3 py-1 rounded-full shadow-lg\">\n                    <Sparkles className=\"w-4 h-4 text-yellow-600\" />\n                    <span className=\"text-sm font-semibold text-yellow-800\">Click Here!</span>\n                    <ArrowRight className=\"w-4 h-4 text-yellow-600\" />\n                </div>\n            }\n        >\n            <div className=\"border p-8 rounded-md text-center\">\n                <h2 className=\"text-xl font-semibold mb-2\">Custom Cursor</h2>\n                <p>Hover over this area to see a custom cursor</p>\n            </div>\n        </CustomCursor>\n    );\n}\n",
    },
    "custom-cursor-text": {
      name: "custom-cursor-text",
      label: "custom cursor text",
      path: "custom-cursor-text",
      component: React.lazy(() => import("@/content/examples/custom-cursor-text")),
      type: "",
      rawCode: "\"use client\";\n\nimport CustomCursor from \"@/content/registry/core/custom-cursor\";\n\nexport default function CursorChangerText() {\n    return (\n        <CustomCursor\n            cursor={\n                <span className=\"text-sm border bg-white text-black px-2 py-1 rounded shadow\">\n                    Hello, World!\n                </span>\n            }\n        >\n            <div className=\"border p-8 rounded-md text-center\">\n                <h2 className=\"text-xl font-semibold mb-2\">Text Cursor</h2>\n                <p>Hover over this area to see a text cursor</p>\n            </div>\n        </CustomCursor>\n    );\n}\n",
    },
    "dialog-basic": {
      name: "dialog-basic",
      label: "dialog basic",
      path: "dialog-basic",
      component: React.lazy(() => import("@/content/examples/dialog-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Dialog,\n    DialogTrigger,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogDescription,\n    DialogClose\n} from \"@/content/registry/core/dialog\";\n\nexport default function DialogBasic() {\n    return (\n        <Dialog>\n            <DialogTrigger>\n                <button className=\"px-4 py-2 bg-gray-200 rounded\">Open Dialog</button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Dialog Title</DialogTitle>\n                    <DialogDescription>This is a dialog description.</DialogDescription>\n                </DialogHeader>\n                <p>This is the main content of the dialog.</p>\n                <div className=\"mt-6 flex justify-end\">\n                    <DialogClose className=\"px-4 py-2 text-sm bg-gray-200 text-gray-800 rounded hover:bg-gray-300 mr-2\">\n                        Cancel\n                    </DialogClose>\n                    <button className=\"px-4 py-2 text-sm bg-zinc-800 text-white rounded\">\n                        Confirm\n                    </button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
    },
    "dialog-controlled": {
      name: "dialog-controlled",
      label: "dialog controlled",
      path: "dialog-controlled",
      component: React.lazy(() => import("@/content/examples/dialog-controlled")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogDescription,\n    DialogClose\n} from \"@/content/registry/core/dialog\";\n\nexport default function DialogControlled() {\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return (\n        <Dialog open={isOpen} onOpenChange={setIsOpen}>\n            <button className=\"px-4 py-2 bg-gray-200 rounded\" onClick={() => setIsOpen(!isOpen)}>\n                Open Dialog\n            </button>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Dialog Title</DialogTitle>\n                    <DialogDescription>This is a dialog description.</DialogDescription>\n                </DialogHeader>\n                <p>This is the main content of the dialog.</p>\n                <div className=\"mt-6 flex justify-end\">\n                    <DialogClose className=\"px-4 py-2 text-sm bg-gray-200 text-gray-800 rounded hover:bg-gray-300 mr-2\">\n                        Cancel\n                    </DialogClose>\n                    <button className=\"px-4 py-2 text-sm bg-zinc-800 text-white rounded\">\n                        Confirm\n                    </button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
    },
    "dialog-custom-backdrop": {
      name: "dialog-custom-backdrop",
      label: "dialog custom backdrop",
      path: "dialog-custom-backdrop",
      component: React.lazy(() => import("@/content/examples/dialog-custom-backdrop")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Dialog,\n    DialogTrigger,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogDescription,\n    DialogClose\n} from \"@/content/registry/core/dialog\";\n\nexport default function DialogBasic() {\n    return (\n        <Dialog>\n            <DialogTrigger>\n                <button className=\"px-4 py-2 bg-gray-200 rounded\">Open Dialog</button>\n            </DialogTrigger>\n            <DialogContent\n                backdropClassName=\"bg-white/70\"\n                className=\"border shadow-[0_0_5px_rgba(0,0,0,0.1)]\"\n            >\n                <DialogHeader>\n                    <DialogTitle>Dialog Title</DialogTitle>\n                    <DialogDescription>This is a dialog description.</DialogDescription>\n                </DialogHeader>\n                <p>This is the main content of the dialog.</p>\n                <div className=\"mt-6 flex justify-end\">\n                    <DialogClose className=\"px-4 py-2 text-sm bg-gray-200 text-gray-800 rounded hover:bg-gray-300 mr-2\">\n                        Cancel\n                    </DialogClose>\n                    <button className=\"px-4 py-2 text-sm bg-zinc-800 text-white rounded\">\n                        Confirm\n                    </button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
    },
    "dialog-custom-variant-transition": {
      name: "dialog-custom-variant-transition",
      label: "dialog custom variant transition",
      path: "dialog-custom-variant-transition",
      component: React.lazy(() => import("@/content/examples/dialog-custom-variant-transition")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Dialog,\n    DialogTrigger,\n    DialogContent,\n    DialogHeader,\n    DialogTitle,\n    DialogDescription,\n    DialogClose\n} from \"@/content/registry/core/dialog\";\nimport { Variants, Transition } from \"framer-motion\";\n\nconst customVariants: Variants = {\n    initial: { opacity: 0, y: \"100%\" },\n    animate: { opacity: 1, y: \"0%\" },\n    exit: { opacity: 0, transition: { duration: 0.3 } }\n};\n\nconst customTransition: Transition = {\n    type: \"spring\",\n    damping: 30,\n    stiffness: 300\n};\n\nexport default function DialogCustomVariantTransion() {\n    return (\n        <Dialog variants={customVariants} transition={customTransition}>\n            <DialogTrigger>\n                <button className=\"px-4 py-2 bg-gray-200 rounded\">Open Dialog</button>\n            </DialogTrigger>\n            <DialogContent>\n                <DialogHeader>\n                    <DialogTitle>Dialog Title</DialogTitle>\n                    <DialogDescription>This is a dialog description.</DialogDescription>\n                </DialogHeader>\n                <p>This is the main content of the dialog.</p>\n                <div className=\"mt-6 flex justify-end\">\n                    <DialogClose className=\"px-4 py-2 text-sm bg-gray-200 text-gray-800 rounded hover:bg-gray-300 mr-2\">\n                        Cancel\n                    </DialogClose>\n                    <button className=\"px-4 py-2 text-sm bg-zinc-800 text-white rounded\">\n                        Confirm\n                    </button>\n                </div>\n            </DialogContent>\n        </Dialog>\n    );\n}\n",
    },
    "dock-basic": {
      name: "dock-basic",
      label: "dock basic",
      path: "dock-basic",
      component: React.lazy(() => import("@/content/examples/dock-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport { Dock, DockItem } from \"../registry/core/dock\";\nimport { Home, Settings, Mail, Calendar, Music, ImageIcon } from \"lucide-react\";\n\nexport default function DockBasic() {\n    const dockItems = [\n        { id: \"1\", icon: <Home className=\"w-4 h-4 text-gray-500\" />, label: \"Home\" },\n        { id: \"2\", icon: <Settings className=\"w-4 h-4 text-gray-500\" />, label: \"Settings\" },\n        { id: \"3\", icon: <Mail className=\"w-4 h-4 text-gray-500\" />, label: \"Mail\" },\n        { id: \"4\", icon: <Calendar className=\"w-4 h-4 text-gray-500\" />, label: \"Calendar\" },\n        { id: \"5\", icon: <ImageIcon className=\"w-4 h-4 text-gray-500\" />, label: \"Photos\" },\n        { id: \"5\", icon: <Music className=\"w-4 h-4 text-gray-500\" />, label: \"Music\" }\n    ];\n\n    return (\n        <Dock>\n            {dockItems.map(({ id, icon, label }) => (\n                <DockItem key={id} icon={icon} label={label} />\n            ))}\n        </Dock>\n    );\n}\n",
    },
    "drawer-controlled": {
      name: "drawer-controlled",
      label: "drawer controlled",
      path: "drawer-controlled",
      component: React.lazy(() => import("@/content/examples/drawer-controlled")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Drawer,\n    DrawerTrigger,\n    DrawerContent,\n    DrawerHeader,\n    DrawerFooter,\n    DrawerTitle,\n    DrawerClose,\n    DrawerDescription\n} from \"../registry/core/drawer\";\n\nexport default function DrawerDemo() {\n    const [open, setOpen] = React.useState(false);\n    return (\n        <Drawer open={open} onOpenChange={setOpen}>\n            <DrawerTrigger>\n                <button className=\"px-4 py-2 bg-gray-200 rounded\">Open Drawer</button>\n            </DrawerTrigger>\n            <DrawerContent className=\"flex flex-col h-full\">\n                <DrawerHeader className=\"flex justify-between items-center\">\n                    <div>\n                        <DrawerTitle>Title</DrawerTitle>\n                        <DrawerDescription>This is the description of the drawer</DrawerDescription>\n                    </div>\n                    <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                </DrawerHeader>\n\n                {/* your content */}\n                <div className=\"py-4 flex-grow overflow-auto\">\n                    <p>The content of the drawer goes here.</p>\n                </div>\n\n                <DrawerFooter className=\"flex gap-2 justify-end\">\n                    <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                        Close\n                    </button>\n                    <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                        Save\n                    </button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>\n    );\n}\n",
    },
    "drawer-custom-background": {
      name: "drawer-custom-background",
      label: "drawer custom background",
      path: "drawer-custom-background",
      component: React.lazy(() => import("@/content/examples/drawer-custom-background")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Drawer,\n    DrawerTrigger,\n    DrawerContent,\n    DrawerHeader,\n    DrawerFooter,\n    DrawerTitle,\n    DrawerClose,\n    DrawerDescription\n} from \"../registry/core/drawer\";\n\nexport default function DrawerDemo() {\n    return (\n        <Drawer>\n            <DrawerTrigger>\n                <button className=\"px-4 py-2 bg-gray-200 rounded\">Open Drawer</button>\n            </DrawerTrigger>\n\n            <DrawerContent\n                className=\"flex flex-col h-full border shadow-[0_0_5px_rgba(0,0,0,0.1)]\"\n                backdropClassName=\"bg-white/20\"\n            >\n                <DrawerHeader className=\"flex justify-between items-center\">\n                    <div>\n                        <DrawerTitle>Title</DrawerTitle>\n                        <DrawerDescription>This is the description of the drawer</DrawerDescription>\n                    </div>\n                    <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                </DrawerHeader>\n\n                {/* your content */}\n                <div className=\"py-4 flex-grow overflow-auto\">\n                    <p>The content of the drawer goes here.</p>\n                </div>\n\n                <DrawerFooter className=\"flex gap-2 justify-end\">\n                    <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                        Close\n                    </button>\n                    <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                        Save\n                    </button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>\n    );\n}\n",
    },
    "drawer-default": {
      name: "drawer-default",
      label: "drawer default",
      path: "drawer-default",
      component: React.lazy(() => import("@/content/examples/drawer-default")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Drawer,\n    DrawerTrigger,\n    DrawerContent,\n    DrawerHeader,\n    DrawerFooter,\n    DrawerTitle,\n    DrawerClose,\n    DrawerDescription\n} from \"../registry/core/drawer\";\n\nexport default function DrawerDemo() {\n    return (\n        <Drawer>\n            <DrawerTrigger>\n                <button className=\"px-4 py-2 bg-gray-200 rounded\">Open Drawer</button>\n            </DrawerTrigger>\n            <DrawerContent className=\"flex flex-col h-full\">\n                <DrawerHeader className=\"flex justify-between items-center\">\n                    <div>\n                        <DrawerTitle>Title</DrawerTitle>\n                        <DrawerDescription>This is the description of the drawer</DrawerDescription>\n                    </div>\n                    <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                </DrawerHeader>\n\n                {/* your content */}\n                <div className=\"py-4 flex-grow overflow-auto\">\n                    <p>The content of the drawer goes here.</p>\n                </div>\n\n                <DrawerFooter className=\"flex gap-2 justify-end\">\n                    <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                        Close\n                    </button>\n                    <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                        Save\n                    </button>\n                </DrawerFooter>\n            </DrawerContent>\n        </Drawer>\n    );\n}\n",
    },
    "drawer-origins": {
      name: "drawer-origins",
      label: "drawer origins",
      path: "drawer-origins",
      component: React.lazy(() => import("@/content/examples/drawer-origins")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Drawer,\n    DrawerTrigger,\n    DrawerContent,\n    DrawerHeader,\n    DrawerFooter,\n    DrawerTitle,\n    DrawerClose,\n    DrawerDescription\n} from \"../registry/core/drawer\";\n\nexport default function DialogDemo() {\n    return (\n        <div className=\"grid grid-cols-2 gap-2\">\n            <Drawer origin=\"left\">\n                <DrawerTrigger asChild>\n                    <button className=\"px-4 py-2 bg-gray-200 rounded\">Left</button>\n                </DrawerTrigger>\n                <DrawerContent className=\"flex flex-col\">\n                    <DrawerHeader className=\"flex justify-between items-center\">\n                        <div>\n                            <DrawerTitle>Title</DrawerTitle>\n                            <DrawerDescription>\n                                This is the description of the drawer\n                            </DrawerDescription>\n                        </div>\n                        <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                    </DrawerHeader>\n\n                    {/* your content */}\n                    <div className=\"py-4 flex-grow overflow-auto\">\n                        <p>The content of the drawer goes here.</p>\n                    </div>\n\n                    <DrawerFooter className=\"flex gap-2 justify-end\">\n                        <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                            Close\n                        </button>\n                        <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                            Save\n                        </button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n\n            <Drawer origin=\"right\">\n                <DrawerTrigger asChild>\n                    <button className=\"px-4 py-2 bg-gray-200 rounded\">Right</button>\n                </DrawerTrigger>\n                <DrawerContent className=\"flex flex-col\">\n                    <DrawerHeader className=\"flex justify-between items-center\">\n                        <div>\n                            <DrawerTitle>Title</DrawerTitle>\n                            <DrawerDescription>\n                                This is the description of the drawer\n                            </DrawerDescription>\n                        </div>\n                        <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                    </DrawerHeader>\n\n                    {/* your content */}\n                    <div className=\"py-4 flex-grow overflow-auto\">\n                        <p>The content of the drawer goes here.</p>\n                    </div>\n\n                    <DrawerFooter className=\"flex gap-2 justify-end\">\n                        <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                            Close\n                        </button>\n                        <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                            Save\n                        </button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n\n            <Drawer origin=\"top\">\n                <DrawerTrigger asChild>\n                    <button className=\"px-4 py-2 bg-gray-200 rounded\">Top</button>\n                </DrawerTrigger>\n                <DrawerContent className=\"flex flex-col\">\n                    <DrawerHeader className=\"flex justify-between items-center\">\n                        <div>\n                            <DrawerTitle>Title</DrawerTitle>\n                            <DrawerDescription>\n                                This is the description of the drawer\n                            </DrawerDescription>\n                        </div>\n                        <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                    </DrawerHeader>\n\n                    {/* your content */}\n                    <div className=\"py-4 flex-grow overflow-auto\">\n                        <p>The content of the drawer goes here.</p>\n                    </div>\n\n                    <DrawerFooter className=\"flex gap-2 justify-end\">\n                        <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                            Close\n                        </button>\n                        <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                            Save\n                        </button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n\n            <Drawer origin=\"bottom\">\n                <DrawerTrigger asChild>\n                    <button className=\"px-4 py-2 bg-gray-200 rounded\">Bottom</button>\n                </DrawerTrigger>\n                <DrawerContent className=\"flex flex-col\">\n                    <DrawerHeader className=\"flex justify-between items-center\">\n                        <div>\n                            <DrawerTitle>Title</DrawerTitle>\n                            <DrawerDescription>\n                                This is the description of the drawer\n                            </DrawerDescription>\n                        </div>\n                        <DrawerClose className=\"p-2 rounded-full hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-gray-200\" />\n                    </DrawerHeader>\n\n                    {/* your content */}\n                    <div className=\"py-4 flex-grow overflow-auto\">\n                        <p>The content of the drawer goes here.</p>\n                    </div>\n\n                    <DrawerFooter className=\"flex gap-2 justify-end\">\n                        <button className=\"px-5 py-1.5 text-sm border rounded-sm shadow-sm hover:bg-accent\">\n                            Close\n                        </button>\n                        <button className=\"px-5 py-1.5 text-sm bg-black text-white border rounded-sm\">\n                            Save\n                        </button>\n                    </DrawerFooter>\n                </DrawerContent>\n            </Drawer>\n        </div>\n    );\n}\n",
    },
    "magnetic-basic": {
      name: "magnetic-basic",
      label: "magnetic basic",
      path: "magnetic-basic",
      component: React.lazy(() => import("@/content/examples/magnetic-basic")),
      type: "",
      rawCode: "import React from \"react\";\nimport Magnetic from \"@/content/registry/core/magnetic\";\n\nexport default function MagneticBasic() {\n    return (\n        <Magnetic>\n            <div className=\"p-2 cursor-pointer\">Hover Me</div>\n        </Magnetic>\n    );\n}\n",
    },
    "magnetic-navbar-items": {
      name: "magnetic-navbar-items",
      label: "magnetic navbar items",
      path: "magnetic-navbar-items",
      component: React.lazy(() => import("@/content/examples/magnetic-navbar-items")),
      type: "",
      rawCode: "import React from \"react\";\nimport Magnetic from \"@/content/registry/core/magnetic\";\n\n// nav items\nconst navMenu = [\n    {\n        name: \"Home\",\n        link: \"#\"\n    },\n    {\n        name: \"About\",\n        link: \"#\"\n    },\n    {\n        name: \"Services\",\n        link: \"#\"\n    },\n    {\n        name: \"Contact\",\n        link: \"#\"\n    }\n];\n\n// Icons\ntype IconProps = React.HTMLAttributes<SVGElement>;\nconst Icons = {\n    GitHub: (props: IconProps) => (\n        <svg\n            viewBox=\"0 0 256 250\"\n            width=\"256\"\n            height=\"250\"\n            fill=\"#24292f\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"xMidYMid\"\n            {...props}\n        >\n            <path d=\"M128.001 0C57.317 0 0 57.307 0 128.001c0 56.554 36.676 104.535 87.535 121.46 6.397 1.185 8.746-2.777 8.746-6.158 0-3.052-.12-13.135-.174-23.83-35.61 7.742-43.124-15.103-43.124-15.103-5.823-14.795-14.213-18.73-14.213-18.73-11.613-7.944.876-7.78.876-7.78 12.853.902 19.621 13.19 19.621 13.19 11.417 19.568 29.945 13.911 37.249 10.64 1.149-8.272 4.466-13.92 8.127-17.116-28.431-3.236-58.318-14.212-58.318-63.258 0-13.975 5-25.394 13.188-34.358-1.329-3.224-5.71-16.242 1.24-33.874 0 0 10.749-3.44 35.21 13.121 10.21-2.836 21.16-4.258 32.038-4.307 10.878.049 21.837 1.47 32.066 4.307 24.431-16.56 35.165-13.12 35.165-13.12 6.967 17.63 2.584 30.65 1.255 33.873 8.207 8.964 13.173 20.383 13.173 34.358 0 49.163-29.944 59.988-58.447 63.157 4.591 3.972 8.682 11.762 8.682 23.704 0 17.126-.148 30.91-.148 35.126 0 3.407 2.304 7.398 8.792 6.14C219.37 232.5 256 184.537 256 128.002 256 57.307 198.691 0 128.001 0Zm-80.06 182.34c-.282.636-1.283.827-2.194.39-.929-.417-1.45-1.284-1.15-1.922.276-.655 1.279-.838 2.205-.399.93.418 1.46 1.293 1.139 1.931Zm6.296 5.618c-.61.566-1.804.303-2.614-.591-.837-.892-.994-2.086-.375-2.66.63-.566 1.787-.301 2.626.591.838.903 1 2.088.363 2.66Zm4.32 7.188c-.785.545-2.067.034-2.86-1.104-.784-1.138-.784-2.503.017-3.05.795-.547 2.058-.055 2.861 1.075.782 1.157.782 2.522-.019 3.08Zm7.304 8.325c-.701.774-2.196.566-3.29-.49-1.119-1.032-1.43-2.496-.726-3.27.71-.776 2.213-.558 3.315.49 1.11 1.03 1.45 2.505.701 3.27Zm9.442 2.81c-.31 1.003-1.75 1.459-3.199 1.033-1.448-.439-2.395-1.613-2.103-2.626.301-1.01 1.747-1.484 3.207-1.028 1.446.436 2.396 1.602 2.095 2.622Zm10.744 1.193c.036 1.055-1.193 1.93-2.715 1.95-1.53.034-2.769-.82-2.786-1.86 0-1.065 1.202-1.932 2.733-1.958 1.522-.03 2.768.818 2.768 1.868Zm10.555-.405c.182 1.03-.875 2.088-2.387 2.37-1.485.271-2.861-.365-3.05-1.386-.184-1.056.893-2.114 2.376-2.387 1.514-.263 2.868.356 3.061 1.403Z\" />\n        </svg>\n    ),\n    LinkedIn: (props: IconProps) => (\n        <svg\n            width=\"256\"\n            height=\"256\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            preserveAspectRatio=\"xMidYMid\"\n            viewBox=\"0 0 256 256\"\n            fill=\"#0077b5\"\n            {...props}\n        >\n            <path\n                d=\"M218.123 218.127h-37.931v-59.403c0-14.165-.253-32.4-19.728-32.4-19.756 0-22.779 15.434-22.779 31.369v60.43h-37.93V95.967h36.413v16.694h.51a39.907 39.907 0 0 1 35.928-19.733c38.445 0 45.533 25.288 45.533 58.186l-.016 67.013ZM56.955 79.27c-12.157.002-22.014-9.852-22.016-22.009-.002-12.157 9.851-22.014 22.008-22.016 12.157-.003 22.014 9.851 22.016 22.008A22.013 22.013 0 0 1 56.955 79.27m18.966 138.858H37.95V95.967h37.97v122.16ZM237.033.018H18.89C8.58-.098.125 8.161-.001 18.471v219.053c.122 10.315 8.576 18.582 18.89 18.474h218.144c10.336.128 18.823-8.139 18.966-18.474V18.454c-.147-10.33-8.635-18.588-18.966-18.453\"\n                fill=\"#0A66C2\"\n            />\n        </svg>\n    ),\n    X: (props: IconProps) => (\n        <svg\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width=\"1200\"\n            height=\"1227\"\n            fill=\"none\"\n            viewBox=\"0 0 1200 1227\"\n            {...props}\n        >\n            <path\n                fill=\"#000\"\n                d=\"M714.163 519.284 1160.89 0h-105.86L667.137 450.887 357.328 0H0l468.492 681.821L0 1226.37h105.866l409.625-476.152 327.181 476.152H1200L714.137 519.284h.026ZM569.165 687.828l-47.468-67.894-377.686-540.24h162.604l304.797 435.991 47.468 67.894 396.2 566.721H892.476L569.165 687.854v-.026Z\"\n            />\n        </svg>\n    )\n};\n\nexport default function MagneticNavbarItems() {\n    return (\n        <div className=\"w-full flex items-center justify-around\">\n            <div className=\"flex items-center\">\n                <div className=\"flex gap-8 items-center\">\n                    {navMenu.map((nav, index) => (\n                        <Magnetic key={index}>\n                            <div className=\"group relative\">\n                                <div className=\"cursor-pointer\">{nav.name}</div>\n                                <div className=\"h-2 w-2 bg-black rounded-full absolute -bottom-4 left-1/2 -translate-x-1/2 scale-0 group-hover:scale-100 transition-all ease duration-300\"></div>\n                            </div>\n                        </Magnetic>\n                    ))}\n                </div>\n            </div>\n\n            <div className=\"mr-[2rem] flex gap-6\">\n                <Magnetic>\n                    <div>\n                        <Icons.GitHub className=\"h-4 w-4 cursor-pointer\" />\n                    </div>\n                </Magnetic>\n                <Magnetic>\n                    <div>\n                        <Icons.LinkedIn className=\"h-4 w-4 cursor-pointer\" />\n                    </div>\n                </Magnetic>\n                <Magnetic>\n                    <div>\n                        <Icons.X className=\"h-4 w-4 cursor-pointer\" />\n                    </div>\n                </Magnetic>\n            </div>\n        </div>\n    );\n}\n",
    },
    "marquee-basic": {
      name: "marquee-basic",
      label: "marquee basic",
      path: "marquee-basic",
      component: React.lazy(() => import("@/content/examples/marquee-basic")),
      type: "",
      rawCode: "import React from \"react\";\nimport { Icons } from \"@/components/website/icons\";\nimport Marquee from \"@/content/registry/core/marquee\";\n\nconst data = [\n    {\n        name: \"React\",\n        icon: Icons.react\n    },\n    {\n        name: \"Next\",\n        icon: Icons.next\n    },\n    {\n        name: \"Remix\",\n        icon: Icons.remix\n    },\n    {\n        name: \"Svelte\",\n        icon: Icons.svelte\n    },\n    {\n        name: \"Vue\",\n        icon: Icons.vue\n    },\n    {\n        name: \"Nuxt\",\n        icon: Icons.nuxt\n    },\n    {\n        name: \"Astro\",\n        icon: Icons.astro\n    }\n];\n\nexport default function MarqueeBasic() {\n    return (\n        <Marquee duration={20} repeat={2} direction=\"left\" pauseOnHover className=\"w-[500px]\">\n            {data.map((item, index) => (\n                <div key={`${item.name}-${index}`} className=\"flex flex-col items-center\">\n                    <item.icon className=\"h-14 w-14 px-4 dark:invert\" />\n                </div>\n            ))}\n        </Marquee>\n    );\n}\n",
    },
    "marquee-reverse": {
      name: "marquee-reverse",
      label: "marquee reverse",
      path: "marquee-reverse",
      component: React.lazy(() => import("@/content/examples/marquee-reverse")),
      type: "",
      rawCode: "import React from \"react\";\nimport Marquee from \"@/content/registry/core/marquee\";\n\nconst team = [\n    {\n        name: \"Jack Thompson\",\n        role: \"Product Designer\",\n        id: 1\n    },\n    {\n        name: \"Maria Rodriguez\",\n        role: \"Marketing Director\",\n        id: 2\n    },\n    {\n        name: \"Alex Chen\",\n        role: \"Tech Lead\",\n        id: 3\n    },\n    {\n        name: \"Sarah Wilson\",\n        role: \"Startup Founder\",\n        id: 4\n    },\n    {\n        name: \"David Lee\",\n        role: \"Creative Director\",\n        id: 5\n    },\n    {\n        name: \"Nina Patel\",\n        role: \"UX Researcher\",\n        id: 6\n    }\n];\n\nexport default function TestimonialsMarquee() {\n    return (\n        <Marquee\n            duration={35}\n            repeat={2}\n            direction=\"right\"\n            gap={12}\n            className=\"w-[1000px] py-8\"\n            pauseOnHover\n        >\n            {team.map((item) => (\n                <div\n                    key={item.id}\n                    className=\"border rounded-md p-6 flex flex-col items-center justify-center\"\n                >\n                    <span className=\"text-gray-500 text-sm text-center\">{item.name}</span>\n                    <span className=\"mt-1 text-sm text-center\">{item.role}</span>\n                </div>\n            ))}\n        </Marquee>\n    );\n}\n",
    },
    "select-controlled": {
      name: "select-controlled",
      label: "select controlled",
      path: "select-controlled",
      component: React.lazy(() => import("@/content/examples/select-controlled")),
      type: "",
      rawCode: "import React from \"react\";\nimport {\n    Select,\n    SelectTrigger,\n    SelectContent,\n    SelectOption,\n    SelectGroup,\n    SelectValue\n} from \"../registry/core/select\";\n\nexport default function SelectDemo() {\n    const [open, setOpen] = React.useState(false);\n\n    return (\n        <Select open={open} onOpenChange={setOpen} searchable>\n            <SelectTrigger>\n                <SelectValue placeholder=\"Select ...\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectGroup label=\"Fruits\">\n                    <SelectOption value=\"apple\">Apple</SelectOption>\n                    <SelectOption value=\"banana\">Banana</SelectOption>\n                </SelectGroup>\n                <SelectGroup label=\"Vegetables\">\n                    <SelectOption value=\"carrot\">Carrot</SelectOption>\n                    <SelectOption value=\"broccoli\">Broccoli</SelectOption>\n                </SelectGroup>\n            </SelectContent>\n        </Select>\n    );\n}\n",
    },
    "select-creatable": {
      name: "select-creatable",
      label: "select creatable",
      path: "select-creatable",
      component: React.lazy(() => import("@/content/examples/select-creatable")),
      type: "",
      rawCode: "import React from \"react\";\nimport {\n    Select,\n    SelectTrigger,\n    SelectContent,\n    SelectOption,\n    SelectValue\n} from \"../registry/core/select\";\n\nexport default function SelectDemo() {\n    return (\n        <Select\n            searchable\n            creatable\n            onCreateOption={(value) =>\n                alert(\n                    `Do something to create  ${value}. Like sending a request to the server or open a form modal.`\n                )\n            }\n        >\n            <SelectTrigger>\n                <SelectValue placeholder=\"Select a fruit ...\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectOption value=\"mango\">Mango</SelectOption>\n                <SelectOption value=\"apple\">Apple</SelectOption>\n                <SelectOption value=\"banana\">Banana</SelectOption>\n                <SelectOption value=\"orange\">Orange</SelectOption>\n                <SelectOption value=\"coconut\">Coconut</SelectOption>\n            </SelectContent>\n        </Select>\n    );\n}\n",
    },
    "select-demo": {
      name: "select-demo",
      label: "select demo",
      path: "select-demo",
      component: React.lazy(() => import("@/content/examples/select-demo")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport {\n    Select,\n    SelectTrigger,\n    SelectContent,\n    SelectOption,\n    SelectGroup,\n    SelectValue\n} from \"../registry/core/select\";\n\nexport default function SelectDemo() {\n    return (\n        <Select>\n            <SelectTrigger>\n                <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectGroup label=\"Frontend\">\n                    <SelectOption value=\"react\">React</SelectOption>\n                    <SelectOption value=\"vue\">Vue</SelectOption>\n                    <SelectOption value=\"svelte\">Svelte</SelectOption>\n                </SelectGroup>\n                <SelectGroup label=\"Backend\">\n                    <SelectOption value=\"node\">Node</SelectOption>\n                    <SelectOption value=\"deno\">Deno</SelectOption>\n                    <SelectOption value=\"bun\">Bun</SelectOption>\n                </SelectGroup>\n            </SelectContent>\n        </Select>\n    );\n}\n",
    },
    "select-multiple": {
      name: "select-multiple",
      label: "select multiple",
      path: "select-multiple",
      component: React.lazy(() => import("@/content/examples/select-multiple")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Select, SelectTrigger, SelectContent, SelectOption, SelectValue } from \"../registry/core/select\";\n\nexport default function SelectDemo() {\n    return (\n        <Select multiple>\n            <SelectTrigger>\n                <SelectValue placeholder=\"Select fruits ...\" />\n            </SelectTrigger>\n            <SelectContent>\n                <SelectOption value=\"apple\">Apple</SelectOption>\n                <SelectOption value=\"banana\">Banana</SelectOption>\n                <SelectOption value=\"orange\">Orange</SelectOption>\n                <SelectOption value=\"mango\">Mango</SelectOption>\n            </SelectContent>\n        </Select>\n    );\n}\n",
    },
    "select-searchable": {
      name: "select-searchable",
      label: "select searchable",
      path: "select-searchable",
      component: React.lazy(() => import("@/content/examples/select-searchable")),
      type: "",
      rawCode: "import React from \"react\";\nimport {\n    Select,\n    SelectTrigger,\n    SelectContent,\n    SelectOption,\n    SelectValue\n} from \"../registry/core/select\";\n\nconst countries = [\n    { label: \"Australia\", value: \"AU\" },\n    { label: \"China\", value: \"CN\" },\n    { label: \"Canada\", value: \"CA\" },\n    { label: \"Spain\", value: \"ES\" },\n    { label: \"France\", value: \"FR\" },\n    { label: \"Germany\", value: \"DE\" },\n    { label: \"Italy\", value: \"IT\" },\n    { label: \"Japan\", value: \"JP\" },\n    { label: \"United Kingdom\", value: \"UK\" },\n    { label: \"United States\", value: \"US\" }\n];\n\nexport default function SearchableSelectDemo() {\n    return (\n        <Select searchable>\n            <SelectTrigger>\n                <SelectValue placeholder=\"Select country ...\" />\n            </SelectTrigger>\n            <SelectContent>\n                {countries.map((country) => (\n                    <SelectOption key={country.value} value={country.value}>\n                        {country.label}\n                    </SelectOption>\n                ))}\n            </SelectContent>\n        </Select>\n    );\n}\n",
    },
    "separator-demo": {
      name: "separator-demo",
      label: "separator demo",
      path: "separator-demo",
      component: React.lazy(() => import("@/content/examples/separator-demo")),
      type: "",
      rawCode: "import { Separator } from \"../registry/core/separator\";\n\nexport default function SeparatorDemo() {\n    return (\n        <div className=\"space-y-6\">\n            <div>\n                <h4 className=\"text-sm font-medium leading-none\">Horizontal</h4>\n                <p className=\"text-sm text-muted-foreground\">A horizontal separator</p>\n                <Separator className=\"my-4\" />\n            </div>\n            <div className=\"flex h-5 items-center space-x-4 text-sm\">\n                <div>Item 1</div>\n                <Separator orientation=\"vertical\" />\n                <div>Item 2</div>\n                <Separator orientation=\"vertical\" />\n                <div>Item 3</div>\n            </div>\n        </div>\n    );\n}\n",
    },
    "tabs-basic": {
      name: "tabs-basic",
      label: "tabs basic",
      path: "tabs-basic",
      component: React.lazy(() => import("@/content/examples/tabs-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"../registry/core/tabs\";\n\nexport default function TabsDemo() {\n    return (\n        <div>\n            <Tabs defaultTab=\"tab1\" instanceId=\"tabs-basic\">\n                <TabList>\n                    <Tab value=\"tab1\">First Tab</Tab>\n                    <Tab value=\"tab2\">Second Tab</Tab>\n                    <Tab value=\"tab3\">Third Tab</Tab>\n                    <Tab value=\"tab4\">Fourth Tab</Tab>\n                </TabList>\n\n                <TabPanels>\n                    <TabPanel value=\"tab1\">\n                        <div className=\"h-20 text-sm\">Content for first tab</div>\n                    </TabPanel>\n                    <TabPanel value=\"tab2\">\n                        <div className=\"h-20 text-sm\">Content for second tab</div>\n                    </TabPanel>\n                    <TabPanel value=\"tab3\">\n                        <div className=\"h-20 text-sm\">Content for third tab</div>\n                    </TabPanel>\n                    <TabPanel value=\"tab4\">\n                        <div className=\"h-20 text-sm\">Content for fourth tab</div>\n                    </TabPanel>\n                </TabPanels>\n            </Tabs>\n        </div>\n    );\n}\n",
    },
    "tabs-custom-icons": {
      name: "tabs-custom-icons",
      label: "tabs custom icons",
      path: "tabs-custom-icons",
      component: React.lazy(() => import("@/content/examples/tabs-custom-icons")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Bell, Home, Settings, User } from \"lucide-react\";\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"../registry/core/tabs\";\n\nexport default function TabsDemo() {\n    const variants = {\n        initial: { opacity: 0, scale: 0.95 },\n        animate: { opacity: 1, scale: 1 },\n        exit: { opacity: 0, scale: 0.95 }\n    };\n\n    const transition = { duration: 0.25, ease: \"easeInOut\" };\n\n    return (\n        <div>\n            <Tabs defaultTab=\"home\" instanceId=\"tabs-custom-icons\">\n                <TabList>\n                    <Tab value=\"home\" icon={<Home className=\"h-4 w-4\" />}>\n                        Home\n                    </Tab>\n                    <Tab value=\"profile\" icon={<User className=\"h-4 w-4\" />}>\n                        Profile\n                    </Tab>\n                    <Tab value=\"notifications\" icon={<Bell className=\"h-4 w-4\" />}>\n                        Notifications\n                    </Tab>\n                    <Tab value=\"settings\" icon={<Settings className=\"h-4 w-4\" />}>\n                        Settings\n                    </Tab>\n                </TabList>\n                <TabPanels>\n                    <TabPanel value=\"home\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Home content</div>\n                    </TabPanel>\n                    <TabPanel value=\"profile\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Profile content</div>\n                    </TabPanel>\n                    <TabPanel value=\"notifications\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Notifications content</div>\n                    </TabPanel>\n                    <TabPanel value=\"settings\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Settings content</div>\n                    </TabPanel>\n                </TabPanels>\n            </Tabs>\n        </div>\n    );\n}\n",
    },
    "tabs-custom-variants-transition": {
      name: "tabs-custom-variants-transition",
      label: "tabs custom variants transition",
      path: "tabs-custom-variants-transition",
      component: React.lazy(() => import("@/content/examples/tabs-custom-variants-transition")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Tabs, TabList, Tab, TabPanels, TabPanel } from \"../registry/core/tabs\";\n\nexport default function TabsDemo() {\n    const variants = {\n        initial: { opacity: 0, y: -20 },\n        animate: { opacity: 1, y: 0 },\n        exit: { opacity: 0, y: -20 }\n    };\n\n    const transition = { duration: 0.25, ease: \"easeInOut\" };\n\n    return (\n        <div>\n            <Tabs defaultTab=\"tab1\" instanceId=\"tabs-custom-variants-transition\">\n                <TabList>\n                    <Tab value=\"tab1\">First Tab</Tab>\n                    <Tab value=\"tab2\">Second Tab</Tab>\n                    <Tab value=\"tab3\">Third Tab</Tab>\n                    <Tab value=\"tab4\">Fourth Tab</Tab>\n                </TabList>\n\n                <TabPanels>\n                    <TabPanel value=\"tab1\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Content for first tab</div>\n                    </TabPanel>\n                    <TabPanel value=\"tab2\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Content for second tab</div>\n                    </TabPanel>\n                    <TabPanel value=\"tab3\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Content for third tab</div>\n                    </TabPanel>\n                    <TabPanel value=\"tab4\" variants={variants} transition={transition}>\n                        <div className=\"h-20 text-sm\">Content for fourth tab</div>\n                    </TabPanel>\n                </TabPanels>\n            </Tabs>\n        </div>\n    );\n}\n",
    },
    "text-scramble-basic": {
      name: "text-scramble-basic",
      label: "text scramble basic",
      path: "text-scramble-basic",
      component: React.lazy(() => import("@/content/examples/text-scramble-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport TextScramble from \"@/content/registry/core/text-scramble\";\n\nexport default function TextScrambleBasic() {\n    return (\n        <TextScramble speed={50}>\n            Welcome to Text Scramble!\n        </TextScramble>\n    );\n}\n",
    },
    "text-scramble-custom-chars": {
      name: "text-scramble-custom-chars",
      label: "text scramble custom chars",
      path: "text-scramble-custom-chars",
      component: React.lazy(() => import("@/content/examples/text-scramble-custom-chars")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport TextScramble from \"@/content/registry/core/text-scramble\";\n\nexport default function TextScrambleCustomChars() {\n    return (\n        <TextScramble speed={50} characterSet=\".\">\n            Custom Scramble\n        </TextScramble>\n    );\n}\n",
    },
    "text-scramble-custom-trigger": {
      name: "text-scramble-custom-trigger",
      label: "text scramble custom trigger",
      path: "text-scramble-custom-trigger",
      component: React.lazy(() => import("@/content/examples/text-scramble-custom-trigger")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport TextScramble from \"@/content/registry/core/text-scramble\";\n\nexport default function TextScrambleCustomTrigger() {\n    const [triggerScramble, setTriggerScramble] = React.useState(false);\n    return (\n        <div\n            onMouseEnter={() => setTriggerScramble(true)}\n            onMouseLeave={() => setTriggerScramble(false)}\n        >\n            <TextScramble speed={50} className=\"cursor-pointer uppercase\" trigger={triggerScramble}>\n                Hover to scramble this text!\n            </TextScramble>\n        </div>\n    );\n}\n",
    },
    "tooltip-basic": {
      name: "tooltip-basic",
      label: "tooltip basic",
      path: "tooltip-basic",
      component: React.lazy(() => import("@/content/examples/tooltip-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Tooltip, TooltipTrigger, TooltipContent } from \"../registry/core/tooltip\";\n\nexport default function TooltipDemo() {\n    return (\n        <Tooltip>\n            <TooltipTrigger>\n                <button className=\"px-4 py-2 shadow bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                    Hover\n                </button>\n            </TooltipTrigger>\n            <TooltipContent>Basic Tooltip</TooltipContent>\n        </Tooltip>\n    );\n}\n",
    },
    "tooltip-custom-content": {
      name: "tooltip-custom-content",
      label: "tooltip custom content",
      path: "tooltip-custom-content",
      component: React.lazy(() => import("@/content/examples/tooltip-custom-content")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Tooltip, TooltipTrigger, TooltipContent } from \"../registry/core/tooltip\";\n\nexport default function TooltipDemo() {\n    return (\n        <div className=\"flex gap-4\">\n            <Tooltip direction=\"right\">\n                <TooltipTrigger>\n                    <button className=\"px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors\">\n                        Complex Tooltip\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent>\n                    <div className=\"space-y-2\">\n                        <p className=\"font-medium\">Custom Tooltip</p>\n                        <p className=\"text-sm opacity-90\">With multiple lines</p>\n                        <div className=\"h-px bg-white/20\" />\n                        <p className=\"text-xs opacity-75\">And custom styling</p>\n                    </div>\n                </TooltipContent>\n            </Tooltip>\n\n            <Tooltip delay={1000}>\n                <TooltipTrigger>\n                    <button className=\"px-4 py-2 bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                        Delayed Tooltip\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent>Appears after 1 second</TooltipContent>\n            </Tooltip>\n        </div>\n    );\n}\n",
    },
    "tooltip-directions": {
      name: "tooltip-directions",
      label: "tooltip directions",
      path: "tooltip-directions",
      component: React.lazy(() => import("@/content/examples/tooltip-directions")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Tooltip, TooltipTrigger, TooltipContent } from \"../registry/core/tooltip\";\n\nexport default function TooltipDemo() {\n    return (\n        <div className=\"grid grid-cols-2 gap-2\">\n            <Tooltip direction=\"top\">\n                <TooltipTrigger>\n                    <button className=\"w-24 py-2 shadow bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                        Top\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent>Tooltip on Top</TooltipContent>\n            </Tooltip>\n\n            <Tooltip direction=\"right\">\n                <TooltipTrigger>\n                    <button className=\"w-24 py-2 shadow bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                        Right\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent>Tooltip on Right</TooltipContent>\n            </Tooltip>\n\n            <Tooltip direction=\"left\">\n                <TooltipTrigger>\n                    <button className=\"w-24 py-2 shadow bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                        Left\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent>Tooltip on Left</TooltipContent>\n            </Tooltip>\n\n            <Tooltip direction=\"bottom\">\n                <TooltipTrigger>\n                    <button className=\"w-24 py-2 shadow bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                        Bottom\n                    </button>\n                </TooltipTrigger>\n                <TooltipContent>Tooltip on Bottom</TooltipContent>\n            </Tooltip>\n        </div>\n    );\n}\n",
    },
    "tooltip-example": {
      name: "tooltip-example",
      label: "tooltip example",
      path: "tooltip-example",
      component: React.lazy(() => import("@/content/examples/tooltip-example")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Bell, Camera, Info, Settings } from \"lucide-react\";\nimport { Tooltip, TooltipTrigger, TooltipContent } from \"../registry/core/tooltip\";\n\nexport default function TooltipDemo() {\n    return (\n        <div className=\"flex gap-6\">\n            {(\n                [\n                    { Icon: Camera, text: \"Take photo\", variant: \"default\" },\n                    { Icon: Bell, text: \"Notifications\", variant: \"primary\" },\n                    { Icon: Settings, text: \"Settings\", variant: \"secondary\" },\n                    { Icon: Info, text: \"Important info\", variant: \"destructive\" }\n                ] as const\n            ).map(({ Icon, text, variant }, index) => (\n                <Tooltip key={index} variant={variant}>\n                    <TooltipTrigger>\n                        <div className=\"p-2 hover:bg-gray-100 rounded-full cursor-pointer\">\n                            <Icon className=\"w-5 h-5 text-gray-600\" />\n                        </div>\n                    </TooltipTrigger>\n                    <TooltipContent>{text}</TooltipContent>\n                </Tooltip>\n            ))}\n        </div>\n    );\n}\n",
    },
    "tooltip-variants": {
      name: "tooltip-variants",
      label: "tooltip variants",
      path: "tooltip-variants",
      component: React.lazy(() => import("@/content/examples/tooltip-variants")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { Tooltip, TooltipTrigger, TooltipContent } from \"../registry/core/tooltip\";\n\nexport default function TooltipDemo() {\n    return (\n        <div className=\"flex flex-wrap gap-2\">\n            {([\"default\", \"primary\", \"secondary\", \"destructive\"] as const).map((variant) => (\n                <Tooltip key={variant} variant={variant}>\n                    <TooltipTrigger>\n                        <button className=\"px-4 py-2 shadow bg-white border border-gray-200 rounded-md hover:bg-gray-50 transition-colors\">\n                            {variant.charAt(0).toUpperCase() + variant.slice(1)}\n                        </button>\n                    </TooltipTrigger>\n                    <TooltipContent>\n                        {variant.charAt(0).toUpperCase() + variant.slice(1)} tooltip\n                    </TooltipContent>\n                </Tooltip>\n            ))}\n        </div>\n    );\n}\n",
    },
    "typing-effect-basic": {
      name: "typing-effect-basic",
      label: "typing effect basic",
      path: "typing-effect-basic",
      component: React.lazy(() => import("@/content/examples/typing-effect-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport TypingEffect from \"@/content/registry/core/typing-effect\";\n\nexport default function Home() {\n    return <TypingEffect typingSpeed={100}>This is typing effect demo!</TypingEffect>;\n}\n",
    },
  },
  "functions": {
    "confetti.ts": {
      name: "confetti.ts",
      label: "confetti.ts",
      path: "functions/confetti.ts",
      component: React.lazy(() => import("@/content/registry/functions/confetti.ts")),
      type: "",
      rawCode: "interface ConfettiOptions {\n    particleCount?: number;\n    origin?:\n        | \"top\"\n        | \"bottom\"\n        | \"left\"\n        | \"right\"\n        | \"center\"\n        | \"top-left\"\n        | \"top-right\"\n        | \"bottom-left\"\n        | \"bottom-right\";\n    duration?: number;\n}\n\ninterface Particle {\n    update: () => void;\n    render: (ctx: CanvasRenderingContext2D) => void;\n    position: { x: number; y: number };\n}\n\nlet canvas: HTMLCanvasElement | null = null;\nlet ctx: CanvasRenderingContext2D | null = null;\nlet animationFrame: number | null = null;\nlet particles: Particle[] = [];\n\nconst gravityConfetti = 0.3;\nconst gravitySequins = 0.55;\nconst dragConfetti = 0.075;\nconst dragSequins = 0.02;\nconst terminalVelocity = 3;\n\nfunction createCanvas() {\n    if (typeof window === \"undefined\") return;\n\n    canvas = document.createElement(\"canvas\");\n    canvas.style.position = \"fixed\";\n    canvas.style.top = \"0\";\n    canvas.style.left = \"0\";\n    canvas.style.pointerEvents = \"none\";\n    canvas.style.zIndex = \"9999\";\n    document.body.appendChild(canvas);\n\n    ctx = canvas.getContext(\"2d\");\n    resizeCanvas();\n\n    window.addEventListener(\"resize\", resizeCanvas);\n}\n\nfunction resizeCanvas() {\n    if (!canvas || !ctx) return;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n}\n\nfunction removeCanvas() {\n    if (canvas && canvas.parentNode) {\n        canvas.parentNode.removeChild(canvas);\n    }\n    if (animationFrame) {\n        cancelAnimationFrame(animationFrame);\n    }\n    canvas = null;\n    ctx = null;\n    animationFrame = null;\n    particles = [];\n}\n\nconst randomRange = (min: number, max: number) => Math.random() * (max - min) + min;\n\nconst randomColor = () => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r},${g},${b})`;\n};\n\nconst initConfettoVelocity = (xRange: [number, number], yRange: [number, number]) => {\n    const x = randomRange(xRange[0], xRange[1]);\n    const range = yRange[1] - yRange[0] + 1;\n    let y = yRange[1] - Math.abs(randomRange(0, range) + randomRange(0, range) - range);\n    if (y >= yRange[1] - 1) {\n        y += Math.random() < 0.25 ? randomRange(1, 3) : 0;\n    }\n    return { x, y: -y };\n};\n\nfunction calculateOrigin(\n    canvasWidth: number,\n    canvasHeight: number,\n    origin: ConfettiOptions[\"origin\"]\n) {\n    const originMap = {\n        center: {\n            x: [canvasWidth / 2 - 50, canvasWidth / 2 + 50],\n            y: [canvasHeight / 2 + 50, canvasHeight / 2 + 100]\n        },\n        top: {\n            x: [canvasWidth / 2 - 50, canvasWidth / 2 + 50],\n            y: [50, 100]\n        },\n        bottom: {\n            x: [canvasWidth / 2 - 50, canvasWidth / 2 + 50],\n            y: [canvasHeight - 100, canvasHeight - 50]\n        },\n        left: {\n            x: [50, 100],\n            y: [canvasHeight / 2 - 50, canvasHeight / 2 + 50]\n        },\n        right: {\n            x: [canvasWidth - 100, canvasWidth - 50],\n            y: [canvasHeight / 2 - 50, canvasHeight / 2 + 50]\n        },\n        \"top-left\": { x: [50, 100], y: [50, 100] },\n        \"top-right\": { x: [canvasWidth - 100, canvasWidth - 50], y: [50, 100] },\n        \"bottom-left\": { x: [50, 100], y: [canvasHeight - 100, canvasHeight - 50] },\n        \"bottom-right\": {\n            x: [canvasWidth - 100, canvasWidth - 50],\n            y: [canvasHeight - 100, canvasHeight - 50]\n        }\n    };\n\n    return originMap[origin || \"center\"];\n}\n\nfunction createConfetto(\n    canvasWidth: number,\n    canvasHeight: number,\n    origin: ConfettiOptions[\"origin\"]\n): Particle {\n    const originBounds = calculateOrigin(canvasWidth, canvasHeight, origin);\n    const randomModifier = randomRange(0, 99);\n    const color = { front: randomColor(), back: randomColor() };\n    const dimensions = {\n        x: randomRange(5, 9),\n        y: randomRange(8, 15)\n    };\n    const position = {\n        x: randomRange(originBounds.x[0], originBounds.x[1]),\n        y: randomRange(originBounds.y[0], originBounds.y[1])\n    };\n    const rotation = randomRange(0, 2 * Math.PI);\n    const scale = { x: 1, y: 1 };\n    const velocity = initConfettoVelocity([-9, 9], [6, 11]);\n\n    return {\n        update() {\n            velocity.x -= velocity.x * dragConfetti;\n            velocity.y = Math.min(velocity.y + gravityConfetti, terminalVelocity);\n            velocity.x += Math.random() > 0.5 ? Math.random() : -Math.random();\n\n            position.x += velocity.x;\n            position.y += velocity.y;\n\n            scale.y = Math.cos((position.y + randomModifier) * 0.09);\n        },\n        render(ctx: CanvasRenderingContext2D) {\n            const width = dimensions.x * scale.x;\n            const height = dimensions.y * scale.y;\n\n            ctx.save();\n            ctx.translate(position.x, position.y);\n            ctx.rotate(rotation);\n\n            ctx.fillStyle = scale.y > 0 ? color.front : color.back;\n            ctx.fillRect(-width / 2, -height / 2, width, height);\n\n            ctx.restore();\n        },\n        position\n    };\n}\n\nfunction createSequin(\n    canvasWidth: number,\n    canvasHeight: number,\n    origin: ConfettiOptions[\"origin\"]\n): Particle {\n    const originBounds = calculateOrigin(canvasWidth, canvasHeight, origin);\n    const color = randomColor();\n    const radius = randomRange(1, 2);\n    const position = {\n        x: randomRange(originBounds.x[0], originBounds.x[1]),\n        y: randomRange(originBounds.y[0], originBounds.y[1])\n    };\n    const velocity = {\n        x: randomRange(-6, 6),\n        y: randomRange(-8, -12)\n    };\n\n    return {\n        update() {\n            velocity.x -= velocity.x * dragSequins;\n            velocity.y = velocity.y + gravitySequins;\n\n            position.x += velocity.x;\n            position.y += velocity.y;\n        },\n        render(ctx: CanvasRenderingContext2D) {\n            ctx.save();\n            ctx.translate(position.x, position.y);\n\n            ctx.fillStyle = color;\n            ctx.beginPath();\n            ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n            ctx.fill();\n\n            ctx.restore();\n        },\n        position\n    };\n}\n\nfunction render() {\n    if (!canvas || !ctx) return;\n\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    particles.forEach((particle) => {\n        particle.update();\n        particle.render(ctx!);\n    });\n\n    particles = particles.filter((p) => p.position.y < canvas!.height);\n\n    if (particles.length > 0) {\n        animationFrame = requestAnimationFrame(render);\n    } else {\n        removeCanvas();\n    }\n}\n\nexport function triggerConfetti(options: ConfettiOptions = {}) {\n    const { particleCount = 50, origin = \"center\", duration = 3000 } = options;\n\n    if (!canvas) {\n        createCanvas();\n    }\n\n    if (!canvas || !ctx) return;\n\n    const confettiCount = Math.floor(particleCount * 0.75);\n    const sequinCount = Math.floor(particleCount * 0.25);\n\n    const newConfetti = Array.from({ length: confettiCount }, () =>\n        createConfetto(canvas!.width, canvas!.height, origin)\n    );\n    const newSequins = Array.from({ length: sequinCount }, () =>\n        createSequin(canvas!.width, canvas!.height, origin)\n    );\n\n    particles = [...particles, ...newConfetti, ...newSequins];\n\n    if (!animationFrame) {\n        animationFrame = requestAnimationFrame(render);\n    }\n\n    // Optional: Remove canvas after duration\n    setTimeout(() => {\n        if (particles.length === 0) {\n            removeCanvas();\n        }\n    }, duration);\n}\n",
    },
  },
};
