// @ts-nocheck
// This file is autogenerated by scripts/create-pr-content.ts.
// Do not edit this file directly.

import React from 'react';

export type PreviewsType = typeof Previews;

export const Previews: Record<string, any> = {
  "core": {
    "custom-cursor": {
      name: "custom-cursor",
      label: "custom cursor",
      path: "core/custom-cursor",
      component: React.lazy(() => import("@/content/registry/core/custom-cursor")),
      type: "",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useState, useEffect, useRef } from \"react\";\n\ntype CursorType = \"icon\" | \"text\" | \"custom\";\n\ninterface CursorChangerProps {\n    children: React.ReactNode;\n    cursorType: CursorType;\n    cursorContent: string | React.ReactNode;\n    className?: string;\n}\n\nexport default function CustomCursor({\n    children,\n    cursorType,\n    cursorContent,\n    className\n}: CursorChangerProps) {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [isHovering, setIsHovering] = useState(false);\n    const [cursorPosition, setCursorPosition] = useState({ x: 0, y: 0 });\n\n    useEffect(() => {\n        const updateCursorPosition = (e: MouseEvent) => {\n            if (isHovering) {\n                const rect = containerRef.current?.getBoundingClientRect();\n                if (rect) {\n                    setCursorPosition({\n                        x: e.clientX - rect.left,\n                        y: e.clientY - rect.top\n                    });\n                }\n            }\n        };\n\n        document.addEventListener(\"mousemove\", updateCursorPosition);\n\n        return () => {\n            document.removeEventListener(\"mousemove\", updateCursorPosition);\n        };\n    }, [isHovering]);\n\n    const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {\n        const rect = containerRef.current?.getBoundingClientRect();\n        if (rect) {\n            const entryX = e.clientX - rect.left;\n            const entryY = e.clientY - rect.top;\n            setCursorPosition({ x: entryX, y: entryY });\n        }\n        setIsHovering(true);\n    };\n\n    const handleMouseLeave = () => setIsHovering(false);\n\n    const renderCursor = () => {\n        const content = (() => {\n            switch (cursorType) {\n                case \"icon\":\n                    return <span className=\"text-2xl\">{cursorContent}</span>;\n                case \"text\":\n                    return (\n                        <span className=\"text-sm border bg-white text-black px-2 py-1 rounded shadow\">\n                            {cursorContent}\n                        </span>\n                    );\n                case \"custom\":\n                    return cursorContent;\n                default:\n                    return null;\n            }\n        })();\n\n        return <div className=\"whitespace-nowrap\">{content}</div>;\n    };\n\n    return (\n        <div\n            ref={containerRef}\n            onMouseEnter={handleMouseEnter}\n            onMouseLeave={handleMouseLeave}\n            className={cn(\"relative\", className)}\n            style={{ cursor: isHovering ? \"none\" : \"default\" }}\n        >\n            {children}\n            {isHovering && (\n                <div\n                    className=\"absolute pointer-events-none z-50 transition-all duration-300 ease-out\"\n                    style={{\n                        left: cursorPosition.x,\n                        top: cursorPosition.y,\n                        transform: \"translate(-50%, -50%)\",\n                        transformOrigin: \"left center\"\n                    }}\n                >\n                    {renderCursor()}\n                </div>\n            )}\n        </div>\n    );\n}\n",
    },
    "marquee": {
      name: "marquee",
      label: "marquee",
      path: "core/marquee",
      component: React.lazy(() => import("@/content/registry/core/marquee")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface MarqueeProps {\n    duration?: number;\n    repeat?: number;\n    className?: string;\n    pauseOnHover?: boolean;\n    children: React.ReactNode;\n    direction?: \"left\" | \"right\";\n    gap?: number;\n}\n\nexport default function Marquee({\n    children,\n    className,\n    duration = 20,\n    repeat = 2,\n    direction = \"left\",\n    pauseOnHover = true,\n    gap = 0\n}: MarqueeProps) {\n    return (\n        <>\n            <div\n                className={cn(\n                    \"group relative flex overflow-hidden\",\n                    \"before:content-[''] before:absolute before:top-0 before:bottom-0 before:left-0 before:w-[50px] before:bg-gradient-to-r before:from-white before:to-transparent before:z-10\",\n                    \"after:content-[''] after:absolute after:top-0 after:bottom-0 after:right-0 after:w-[50px] after:bg-gradient-to-l after:from-white after:to-transparent after:z-10\",\n                    className\n                )}\n            >\n                {Array(repeat)\n                    .fill(0)\n                    .map((_, index) => (\n                        <div\n                            key={index}\n                            className={cn(\n                                `marquee-${direction}`,\n                                \"w-full flex shrink-0 items-center justify-around\",\n                                {\n                                    \"group-hover:[animation-play-state:paused]\": pauseOnHover\n                                }\n                            )}\n                            style={{\n                                gap: `${gap}px`,\n                                ...(index === 1 && direction === \"left\"\n                                    ? { marginLeft: `${gap}px` }\n                                    : { marginRight: `${gap}px` })\n                            }}\n                        >\n                            {children}\n                        </div>\n                    ))}\n            </div>\n\n            <style jsx>{`\n                @keyframes marquee-left {\n                    0% {\n                        transform: translateX(0);\n                    }\n                    100% {\n                        transform: translateX(-100%);\n                    }\n                }\n\n                @keyframes marquee-right {\n                    0% {\n                        transform: translateX(-100%);\n                    }\n                    100% {\n                        transform: translateX(0);\n                    }\n                }\n\n                .marquee-left {\n                    animation: marquee-left ${duration}s linear infinite;\n                }\n\n                .marquee-right {\n                    animation: marquee-right ${duration}s linear infinite;\n                }\n            `}</style>\n        </>\n    );\n}\n",
    },
    "text-scramble": {
      name: "text-scramble",
      label: "text scramble",
      path: "core/text-scramble",
      component: React.lazy(() => import("@/content/registry/core/text-scramble")),
      type: "",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useState, useEffect, useCallback } from \"react\";\n\ninterface TextScrambleProps {\n    displayText: string;\n    className?: string;\n    scrambleOnHover?: boolean;\n    duration?: number;\n    characters?: string;\n}\n\nconst defaultCharacters =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-={}[]|;:,.<>?\";\n\nexport default function TextScramble({\n    displayText = \"Hello, World!\",\n    className,\n    scrambleOnHover = true,\n    duration = 1000,\n    characters = defaultCharacters\n}: TextScrambleProps) {\n    const [isScrambling, setIsScrambling] = useState(false);\n    const [scrambledText, setScrambledText] = useState(displayText);\n\n    const scrambleText = useCallback(() => {\n        let iteration = 0;\n        const totalIterations = displayText.length * 8; // You can this multiplier to change the \"speed\" of reveal\n        const intervalDuration = duration / totalIterations;\n\n        setIsScrambling(true);\n\n        const interval = setInterval(() => {\n            setScrambledText((prevText) =>\n                prevText\n                    .split(\"\")\n                    .map((char, index) => {\n                        if (index < iteration / 8) {\n                            return displayText[index];\n                        }\n                        return characters[Math.floor(Math.random() * characters.length)];\n                    })\n                    .join(\"\")\n            );\n\n            if (iteration >= totalIterations) {\n                clearInterval(interval);\n                setIsScrambling(false);\n            }\n\n            iteration += 1;\n        }, intervalDuration);\n    }, [displayText, duration, characters]);\n\n    useEffect(() => {\n        if (!scrambleOnHover) {\n            scrambleText();\n        }\n    }, [scrambleOnHover, scrambleText]);\n\n    const handleMouseEnter = () => {\n        if (scrambleOnHover && !isScrambling) {\n            scrambleText();\n        }\n    };\n\n    return (\n        <span\n            className={cn(\n                \"inline-flex select-none\",\n                scrambleOnHover && \"cursor-pointer\",\n                className\n            )}\n            onMouseEnter={handleMouseEnter}\n            aria-label={displayText}\n        >\n            {scrambledText.split(\"\").map((char, index) => (\n                <span key={index} className=\"inline-block\" style={{ textAlign: \"center\" }}>\n                    {char}\n                </span>\n            ))}\n        </span>\n    );\n}\n",
    },
  },
  "text": {
    "split-flap": {
      name: "split-flap",
      label: "split flap",
      path: "text/split-flap",
      component: React.lazy(() => import("@/content/registry/text/split-flap")),
      type: "",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport default function SplitFlap({ text = \"Frontend\" }: { text?: string }) {\n    const [isHovered, setIsHovered] = useState(false);\n\n    return (\n        <h1\n            className=\"text-4xl md:text-6xl font-bold cursor-pointer\"\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n            aria-label={text}\n        >\n            {text.split(\"\").map((char, index) => (\n                <span key={index} className=\"inline-block overflow-hidden relative\">\n                    <AnimatePresence mode=\"popLayout\">\n                        <motion.span\n                            key={`${char}-${isHovered ? \"hovered\" : \"normal\"}`}\n                            initial={{ y: isHovered ? \"100%\" : 0 }}\n                            animate={{ y: 0 }}\n                            exit={{ y: isHovered ? 0 : \"-100%\" }}\n                            transition={{\n                                duration: 0.3,\n                                ease: \"easeInOut\",\n                                delay: index * 0.025\n                            }}\n                            className=\"inline-block\"\n                        >\n                            {char}\n                        </motion.span>\n                    </AnimatePresence>\n                </span>\n            ))}\n        </h1>\n    );\n}\n",
    },
  },
  "element": {
    "brutalist-button": {
      name: "brutalist-button",
      label: "brutalist button",
      path: "elements/button/brutalist-button",
      component: React.lazy(() => import("@/content/registry/elements/button/brutalist-button")),
      type: "button",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface BrutalistButtonProps {\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport default function BrutalistButton({ children, className, onClick }: BrutalistButtonProps) {\n    return (\n        <button\n            onClick={onClick}\n            className={cn(\n                \"h-12 w-28 px-4 flex items-center border-2 rounded-sm border-black shadow-[4px_4px_0_0_#000] transition-all duration-200\",\n                \"active:translate-x-1 active:translate-y-1 active:shadow-[2px_2px_0_0_#000]\",\n                className\n            )}\n        >\n            {children || \"Brutalist\"}\n        </button>\n    );\n}\n",
    },
    "shimmer-button": {
      name: "shimmer-button",
      label: "shimmer button",
      path: "elements/button/shimmer-button",
      component: React.lazy(() => import("@/content/registry/elements/button/shimmer-button")),
      type: "button",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ShimmerButtonProps {\n    className?: string;\n}\n\nconst ShimmerButton = ({ className }: ShimmerButtonProps) => {\n    return (\n        <>\n            <button\n                className={cn(\n                    \"h-12 w-28 rounded-full relative cursor-pointer flex items-center justify-center border border-white/10 bg-black overflow-hidden\",\n                    className\n                )}\n            >\n                <span\n                    className={cn(\n                        \"absolute w-full aspect-[1] top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n                        \"before:content-[''] before:absolute before:h-full before:w-full before:aspect-[1] top-1/2 left-100 before:-translate-x-1/2 before:-translate-y-1/2   before:bg-[conic-gradient(transparent,white_60deg,transparent_61deg)]\",\n                        \"before:animate-[lazy_2s_linear_infinite]\"\n                    )}\n                ></span>\n\n                <span className=\"absolute inset-[2px] bg-black rounded-full\"></span>\n                <span className=\"text-white z-10 text-sm\">Shimmer</span>\n            </button>\n\n            <style>{`\n                @keyframes lazy {\n                    0% {\n                        transform: rotate(0deg);\n                    }\n\n                    100% {\n                        transform: rotate(360deg);\n                    }\n                }\n            `}</style>\n        </>\n    );\n};\n\nexport default ShimmerButton;\n",
    },
    "animated-checkbox-01": {
      name: "animated-checkbox-01",
      label: "animated checkbox 01",
      path: "elements/checkbox/animated-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/animated-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function CustomCheckbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div className=\"flex items-center\">\n            <label className=\"w-7 h-7 cursor-pointer relative\">\n                <input\n                    type=\"checkbox\"\n                    className=\"hidden\"\n                    checked={isChecked}\n                    onChange={() => setIsChecked(!isChecked)}\n                />\n                <span\n                    className={`block w-full h-full border-2 border-gray-700 rounded-md transition-all duration-500 ${\n                        isChecked\n                            ? \"rotate-45 w-3.5 translate-x-2 -translate-y-1 border-t-transparent border-l-transparent rounded-none\"\n                            : \"\"\n                    }`}\n                ></span>\n            </label>\n        </div>\n    );\n}\n",
    },
    "animated-checkbox-02": {
      name: "animated-checkbox-02",
      label: "animated checkbox 02",
      path: "elements/checkbox/animated-checkbox-02",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/animated-checkbox-02")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function AnimatedCheckbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"hidden\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n            />\n            <svg viewBox=\"0 0 64 64\" className=\"h-7 w-7 overflow-visible\">\n                <path\n                    d=\"M 0 16 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 16 L 32 48 L 64 16 V 8 A 8 8 90 0 0 56 0 H 8 A 8 8 90 0 0 0 8 V 56 A 8 8 90 0 0 8 64 H 56 A 8 8 90 0 0 64 56 V 16\"\n                    pathLength=\"575.0541381835938\"\n                    className=\"fill-none stroke-black stroke-[4] stroke-round transition-all duration-500 ease-in-out\"\n                    style={{\n                        strokeDasharray: isChecked ? \"70.5096664428711 9999999\" : \"241 9999999\",\n                        strokeDashoffset: isChecked ? \"-262.2723388671875\" : \"0\"\n                    }}\n                />\n            </svg>\n        </label>\n    );\n}\n",
    },
    "fill-checkbox-01": {
      name: "fill-checkbox-01",
      label: "fill checkbox 01",
      path: "elements/checkbox/fill-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/fill-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\nimport React, { useState } from \"react\";\n\nexport default function CustomCheckbox() {\n    const [isChecked, setIsChecked] = useState(true);\n\n    return (\n        <label className=\"flex items-center\">\n            <input\n                type=\"checkbox\"\n                className={cn(\n                    \"relative w-7 h-7 outline-none appearance-none border-2 rounded-md transition-all cursor-pointer duration-500\",\n                    \"before:content-[''] before:absolute before:w-5 before:h-5 before:top-1/2 before:left-1/2 before:transform before:-translate-x-1/2 before:-translate-y-1/2 before:rounded-sm before:bg-gray-400 before:transition-[transform] before:duration-300\",\n                    isChecked && \"before:scale-1\",\n                    !isChecked && \"before:scale-0\"\n                )}\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n            />\n            {/* <span className=\"ml-3\">Option A</span> */}\n        </label>\n    );\n}\n",
    },
    "gradient-checkbox-01": {
      name: "gradient-checkbox-01",
      label: "gradient checkbox 01",
      path: "elements/checkbox/gradient-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/gradient-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nexport default function GradientCheckbox() {\n    const [isChecked, setIsChecked] = useState(true);\n\n    const toggleCheckbox = () => setIsChecked(!isChecked);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                    type=\"checkbox\"\n                    className=\"sr-only\"\n                    checked={isChecked}\n                    onChange={toggleCheckbox}\n                />\n                <motion.div\n                    className={`w-8 h-8 rounded-md border ${\n                        isChecked\n                            ? \"bg-gradient-to-br from-purple-500 via-pink-500 to-red-500\"\n                            : \"bg-white\"\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{\n                        type: \"spring\",\n                        stiffness: 300,\n                        damping: 20\n                    }}\n                >\n                    <motion.svg\n                        className=\"w-full h-full p-2 text-white\"\n                        viewBox=\"0 0 24 24\"\n                        initial=\"hidden\"\n                        animate={isChecked ? \"visible\" : \"hidden\"}\n                    >\n                        <motion.path\n                            d=\"M4 12.6111L8.92308 17.5L20 6.5\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"3\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            variants={{\n                                visible: {\n                                    pathLength: 1,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: \"easeOut\"\n                                    }\n                                },\n                                hidden: {\n                                    pathLength: 0,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: \"easeIn\"\n                                    }\n                                }\n                            }}\n                        />\n                    </motion.svg>\n                </motion.div>\n            </label>\n        </div>\n    );\n}\n",
    },
    "neo-brutalist-checkbox-01": {
      name: "neo-brutalist-checkbox-01",
      label: "neo brutalist checkbox 01",
      path: "elements/checkbox/neo-brutalist-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/neo-brutalist-checkbox-01")),
      type: "checkbox",
      rawCode: "import React from \"react\";\n\nexport default function NeoBrutalistCheckbox() {\n    return (\n        <label className=\"cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-7 h-7 bg-white border-2 border-black shadow-[4px_4px_0px_0px_rgba(0,0,0,1)] peer-checked:bg-yellow-400 transition-all\">\n                <svg\n                    className=\"w-7 h-7 text-black fill-current hidden peer-checked:block\"\n                    viewBox=\"0 0 20 20\"\n                >\n                    <path d=\"M0 11l2-2 5 5L18 3l2 2L7 18z\" />\n                </svg>\n            </div>\n        </label>\n    );\n}\n",
    },
    "neo-brutalist-checkbox-02": {
      name: "neo-brutalist-checkbox-02",
      label: "neo brutalist checkbox 02",
      path: "elements/checkbox/neo-brutalist-checkbox-02",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/neo-brutalist-checkbox-02")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function Checkbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"relative cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n                className=\"absolute opacity-0\"\n            />\n            <div\n                className={`w-[30px] h-[30px] relative border-2 border-[#323232] rounded-[5px] shadow-[4px_4px_#323232] transition-all duration-300\n                ${isChecked ? \"bg-green-500\" : \"bg-[#ccc]\"}`}\n            >\n                {isChecked && (\n                    <div className=\"w-[7px] h-[15px] absolute top-[2px] left-[8px] border-r-[2.5px] border-b-[2.5px] border-solid border-white transform rotate-45\"></div>\n                )}\n            </div>\n        </label>\n    );\n}\n",
    },
    "neomorphic-checkbox-01": {
      name: "neomorphic-checkbox-01",
      label: "neomorphic checkbox 01",
      path: "elements/checkbox/neomorphic-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/neomorphic-checkbox-01")),
      type: "checkbox",
      rawCode: "import React from \"react\";\n\nexport default function NeomorphicCheckbox() {\n    return (\n        <label className=\"cursor-pointer\">\n            <input type=\"checkbox\" className=\"sr-only peer\" />\n            <div className=\"w-7 h-7 bg-gray-200 rounded-md shadow-[inset_-2px_-2px_5px_rgba(255,255,255,0.7),inset_2px_2px_5px_rgba(0,0,0,0.1)] peer-checked:bg-blue-500\">\n                <svg\n                    className=\"w-7 h-7 text-white fill-current hidden peer-checked:block\"\n                    viewBox=\"0 0 20 20\"\n                >\n                    <path d=\"M0 11l2-2 5 5L18 3l2 2L7 18z\" />\n                </svg>\n            </div>\n        </label>\n    );\n}\n",
    },
    "skeuomorphic-checkbox-01": {
      name: "skeuomorphic-checkbox-01",
      label: "skeuomorphic checkbox 01",
      path: "elements/checkbox/skeuomorphic-checkbox-01",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/skeuomorphic-checkbox-01")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function SkeuomorphicCheckbox() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    const handleChange = () => {\n        setIsChecked((prev) => !prev);\n    };\n\n    return (\n        <label className=\"cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"\n                    appearance-none w-7 h-7 bg-white border-2 border-gray-300 duration-300 \n                    rounded-sm shadow-md checked:bg-blue-400 checked:border-blue-500 \n                    relative group cursor-pointer\n                \"\n                checked={isChecked}\n                onChange={handleChange}\n            />\n        </label>\n    );\n}\n",
    },
    "demo-input": {
      name: "demo-input",
      label: "demo input",
      path: "elements/input/demo-input",
      component: React.lazy(() => import("@/content/registry/elements/input/demo-input")),
      type: "input",
      rawCode: "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function DemoInput() {\n    return (\n        <div>\n            <input\n                type=\"text\"\n                name=\"text\"\n                className={cn(\n                    \"h-9 w-56 px-3 border border-black text-sm uppercase tracking-widest\",\n                    \"focus:outline-none focus:border-[0.5px] focus:shadow-[-5px_-5px_0px_0px_rgba(0,0,0,1)] placeholder:text-gray-500\",\n                    \"transition-all duration-100 ease-linear\"\n                )}\n                placeholder=\"search...\"\n            />\n        </div>\n    );\n}\n",
    },
    "classic": {
      name: "classic",
      label: "classic",
      path: "elements/loader/classic",
      component: React.lazy(() => import("@/content/registry/elements/loader/classic")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Classic({\n    size = \"md\",\n    color = \"primary\"\n}: {\n    size?: \"sm\" | \"md\" | \"lg\";\n    color?: \"primary\" | \"secondary\" | \"white\";\n}) {\n    const sizeClasses = {\n        sm: \"w-5 h-5\",\n        md: \"w-8 h-8\",\n        lg: \"w-12 h-12\"\n    };\n\n    const colorClasses = {\n        primary: \"text-primary\",\n        secondary: \"text-secondary\",\n        white: \"text-white\"\n    };\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <div\n                className={`${sizeClasses[size]} ${colorClasses[color]} animate-spin`}\n                style={{\n                    borderRadius: \"50%\",\n                    border: \"2px solid currentColor\",\n                    borderTopColor: \"transparent\"\n                }}\n                role=\"status\"\n                aria-label=\"loading\"\n            >\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n            <style jsx>{`\n                @keyframes spin {\n                    to {\n                        transform: rotate(360deg);\n                    }\n                }\n                .animate-spin {\n                    animation: spin 1s linear infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "jumping-dots": {
      name: "jumping-dots",
      label: "jumping dots",
      path: "elements/loader/jumping-dots",
      component: React.lazy(() => import("@/content/registry/elements/loader/jumping-dots")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function JumpingDots() {\n    return (\n        <div className=\"flex items-end justify-between w-[47px] h-[23.5px]\">\n            {Array.from({ length: 4 }).map((_, index) => (\n                <div\n                    key={index}\n                    className={`flex-shrink-0 w-[8px] h-[8px] rounded-full bg-black`}\n                    style={{\n                        animation: `jump 1s ease-in-out calc(1s * -${(4 - index) * 0.15}) infinite`\n                    }}\n                ></div>\n            ))}\n\n            <style jsx>{`\n                @keyframes jump {\n                    0%,\n                    100% {\n                        transform: translateY(0);\n                    }\n                    50% {\n                        transform: translateY(-200%);\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "leapfrog": {
      name: "leapfrog",
      label: "leapfrog",
      path: "elements/loader/leapfrog",
      component: React.lazy(() => import("@/content/registry/elements/loader/leapfrog")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function LeapFrog() {\n    // Array of dot configurations\n    const dots = [\n        { delay: \"0s\", translateX: \"translate-x-0\" },\n        { delay: \"-0.833s\", translateX: \"translate-x-4\" },\n        { delay: \"-1.667s\", translateX: \"translate-x-8\" }\n    ];\n\n    return (\n        <div className=\"h-10 w-10 relative flex items-center justify-between\">\n            {dots.map((dot, index) => (\n                <div\n                    key={index}\n                    className={`\n                        absolute top-0 left-0 flex items-center justify-start w-full h-full\n                        before:content-[''] before:block before:h-2 before:w-2 before:rounded-full before:bg-black\n                        before:transition-colors before:duration-300 before:ease-in-out\n                        animate-leapFrog\n                    `}\n                    style={{\n                        animationDelay: dot.delay\n                    }}\n                />\n            ))}\n\n            <style jsx>{`\n                @keyframes leapFrog {\n                    0% {\n                        transform: translateX(0) rotate(0deg);\n                    }\n                    33.333% {\n                        transform: translateX(0) rotate(180deg);\n                    }\n                    66.666% {\n                        transform: translateX(-15px) rotate(180deg);\n                    }\n                    99.999% {\n                        transform: translateX(-31px) rotate(180deg);\n                    }\n                    100% {\n                        transform: translateX(0) rotate(0deg);\n                    }\n                }\n\n                .animate-leapFrog {\n                    animation: leapFrog 2.5s ease infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "line-spinner": {
      name: "line-spinner",
      label: "line spinner",
      path: "elements/loader/line-spinner",
      component: React.lazy(() => import("@/content/registry/elements/loader/line-spinner")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n\nexport default function LineSpinner() {\n    return (\n        <div className=\"relative w-12 h-12\">\n            {[...Array(12)].map((_, i) => (\n                <motion.div\n                    key={i}\n                    className=\"absolute w-1 h-4 bg-primary\"\n                    style={{\n                        left: \"50%\",\n                        top: \"50%\",\n                        transform: `rotate(${i * 30}deg)`,\n                        transformOrigin: \"0% 0%\"\n                    }}\n                    animate={{\n                        opacity: [0.1, 1, 0.1]\n                    }}\n                    transition={{\n                        duration: 1,\n                        repeat: Infinity,\n                        delay: i * 0.1\n                    }}\n                />\n            ))}\n        </div>\n    );\n}\n",
    },
    "line-wobble": {
      name: "line-wobble",
      label: "line wobble",
      path: "elements/loader/line-wobble",
      component: React.lazy(() => import("@/content/registry/elements/loader/line-wobble")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function LineWobble() {\n    return (\n        <div className=\"relative flex items-center justify-center h-[5px] w-[80px] rounded-[2.5px] overflow-hidden transform\">\n            <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-10 transition-colors duration-300\"></div>\n            <div className=\"h-full w-full rounded-[2.5px] animate-wobble bg-black transition-colors duration-300\"></div>\n\n            <style jsx>{`\n                @keyframes wobble {\n                    0%,\n                    100% {\n                        transform: translateX(-95%);\n                    }\n                    50% {\n                        transform: translateX(95%);\n                    }\n                }\n                .animate-wobble {\n                    animation: wobble 1.75s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "newtons-cradle": {
      name: "newtons-cradle",
      label: "newtons cradle",
      path: "elements/loader/newtons-cradle",
      component: React.lazy(() => import("@/content/registry/elements/loader/newtons-cradle")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function NewtonsCradle() {\n    return (\n        <div className=\"h-10 w-10 relative flex items-center justify-center\">\n            <div className=\"dot animate-swing\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot animate-swing2\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot\">\n                <div className=\"dot-inner\" />\n            </div>\n\n            <style jsx>{`\n                .dot {\n                    position: relative;\n                    display: flex;\n                    flex-shrink: 0;\n                    align-items: center;\n                    justify-content: center;\n                    height: 100%;\n                    width: 25%;\n                    transform-origin: center top;\n                }\n\n                .dot-inner {a\n                    content: \"\";\n                    display: block;\n                    width: 100%;\n                    height: 25%;\n                    border-radius: 50%;\n                    background-color: black;\n                    transition: background-color 0.3s ease;\n                }\n\n                .dot:first-child {\n                    animation: swing 1.4s linear infinite;\n                }\n\n                .dot:last-child {\n                    animation: swing2 1.4s linear infinite;\n                }\n\n                @keyframes swing {\n                    0% {\n                        transform: rotate(0deg);\n                        animation-timing-function: ease-out;\n                    }\n                    25% {\n                        transform: rotate(70deg);\n                        animation-timing-function: ease-in;\n                    }\n                    50% {\n                        transform: rotate(0deg);\n                        animation-timing-function: linear;\n                    }\n                }\n\n                @keyframes swing2 {\n                    0% {\n                        transform: rotate(0deg);\n                        animation-timing-function: linear;\n                    }\n                    50% {\n                        transform: rotate(0deg);\n                        animation-timing-function: ease-out;\n                    }\n                    75% {\n                        transform: rotate(-70deg);\n                        animation-timing-function: ease-in;\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "orbit": {
      name: "orbit",
      label: "orbit",
      path: "elements/loader/orbit",
      component: React.lazy(() => import("@/content/registry/elements/loader/orbit")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Orbit() {\n    return (\n        <div>\n            <div className=\"relative h-[14px] w-[35px]\">\n                <div className=\"absolute h-[14px] w-[14px] rounded-full bg-black animate-[orbit_1.4s_linear_infinite]\"></div>\n                <div className=\"absolute h-[14px] w-[14px] rounded-full bg-black animate-[orbit_1.4s_linear_infinite] delay-700\"></div>\n            </div>\n\n            <style jsx>{`\n                @keyframes orbit {\n                    0% {\n                        transform: translateX(calc(35px * 0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                    5% {\n                        transform: translateX(calc(35px * 0.235)) scale(0.684208);\n                        opacity: 0.58;\n                    }\n                    10% {\n                        transform: translateX(calc(35px * 0.182)) scale(0.631576);\n                        opacity: 0.51;\n                    }\n                    15% {\n                        transform: translateX(calc(35px * 0.129)) scale(0.578944);\n                        opacity: 0.44;\n                    }\n                    20% {\n                        transform: translateX(calc(35px * 0.076)) scale(0.526312);\n                        opacity: 0.37;\n                    }\n                    25% {\n                        transform: translateX(0%) scale(0.47368);\n                        opacity: 0.3;\n                    }\n                    30% {\n                        transform: translateX(calc(35px * -0.076)) scale(0.526312);\n                        opacity: 0.37;\n                    }\n                    35% {\n                        transform: translateX(calc(35px * -0.129)) scale(0.578944);\n                        opacity: 0.44;\n                    }\n                    40% {\n                        transform: translateX(calc(35px * -0.182)) scale(0.631576);\n                        opacity: 0.51;\n                    }\n                    45% {\n                        transform: translateX(calc(35px * -0.235)) scale(0.684208);\n                        opacity: 0.58;\n                    }\n                    50% {\n                        transform: translateX(calc(35px * -0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                    55% {\n                        transform: translateX(calc(35px * -0.235)) scale(0.789472);\n                        opacity: 0.72;\n                    }\n                    60% {\n                        transform: translateX(calc(35px * -0.182)) scale(0.842104);\n                        opacity: 0.79;\n                    }\n                    65% {\n                        transform: translateX(calc(35px * -0.129)) scale(0.894736);\n                        opacity: 0.86;\n                    }\n                    70% {\n                        transform: translateX(calc(35px * -0.076)) scale(0.947368);\n                        opacity: 0.93;\n                    }\n                    75% {\n                        transform: translateX(0%) scale(1);\n                        opacity: 1;\n                    }\n                    80% {\n                        transform: translateX(calc(35px * 0.076)) scale(0.947368);\n                        opacity: 0.93;\n                    }\n                    85% {\n                        transform: translateX(calc(35px * 0.129)) scale(0.894736);\n                        opacity: 0.86;\n                    }\n                    90% {\n                        transform: translateX(calc(35px * 0.182)) scale(0.842104);\n                        opacity: 0.79;\n                    }\n                    95% {\n                        transform: translateX(calc(35px * 0.235)) scale(0.789472);\n                        opacity: 0.72;\n                    }\n                    100% {\n                        transform: translateX(calc(35px * 0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "pendulum": {
      name: "pendulum",
      label: "pendulum",
      path: "elements/loader/pendulum",
      component: React.lazy(() => import("@/content/registry/elements/loader/pendulum")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport { motion } from \"framer-motion\";\n\ninterface PendulumLoadingProps {\n    swingDuration?: number;\n    swingAngle?: number;\n    threadLength?: number;\n}\n\nexport default function Pendulum(props: PendulumLoadingProps) {\n    const swingDuration = props.swingDuration || 1.5;\n    const swingAngle = props.swingAngle || 30; // degrees\n    const threadLength = props.threadLength || 60; // pixels\n\n    return (\n        <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n            {/* Pendulum anchor point */}\n            <circle cx=\"100\" cy=\"50\" r=\"3\" fill=\"black\" />\n\n            {/* Pendulum thread */}\n            <motion.line\n                x1=\"100\"\n                y1=\"50\"\n                x2=\"100\"\n                y2={50 + threadLength}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                animate={{\n                    rotate: [swingAngle, -swingAngle]\n                }}\n                transition={{\n                    duration: swingDuration,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                    repeatType: \"reverse\"\n                }}\n                style={{ originX: \"100px\", originY: \"50px\" }}\n            />\n\n            {/* Pendulum bob (circle) */}\n            <motion.circle\n                cx=\"100\"\n                cy={50 + threadLength}\n                r=\"8\"\n                fill=\"black\"\n                animate={{\n                    rotate: [swingAngle, -swingAngle]\n                }}\n                transition={{\n                    duration: swingDuration,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                    repeatType: \"reverse\"\n                }}\n                style={{ originX: \"100px\", originY: \"50px\" }}\n            />\n        </svg>\n    );\n}\n",
    },
    "pulsating-dots": {
      name: "pulsating-dots",
      label: "pulsating dots",
      path: "elements/loader/pulsating-dots",
      component: React.lazy(() => import("@/content/registry/elements/loader/pulsating-dots")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function PulsingDots() {\n    return (\n        <div className=\"relative flex items-center justify-between w-[43px] h-[10.32px]\">\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-0\"></div>\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-200\"></div>\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-400\"></div>\n\n            <style jsx>{`\n                @keyframes pulse {\n                    0%,\n                    100% {\n                        transform: scale(0);\n                    }\n                    50% {\n                        transform: scale(1);\n                    }\n                }\n\n                .animate-pulse {\n                    animation: pulse 1.3s ease-in-out infinite;\n                }\n\n                .delay-0 {\n                    animation-delay: calc(1.3s * -0.25);\n                }\n\n                .delay-200 {\n                    animation-delay: calc(1.3s * -0.125);\n                }\n\n                .delay-400 {\n                    animation-delay: 0s;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "spinner": {
      name: "spinner",
      label: "spinner",
      path: "elements/loader/spinner",
      component: React.lazy(() => import("@/content/registry/elements/loader/spinner")),
      type: "loader",
      rawCode: "import React from \"react\";\n\nexport default function SpinnerLoader() {\n    return (\n        <div\n            className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-black\"\n            aria-label=\"Loading\"\n        >\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n",
    },
    "spiral": {
      name: "spiral",
      label: "spiral",
      path: "elements/loader/spiral",
      component: React.lazy(() => import("@/content/registry/elements/loader/spiral")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Spiral() {\n    return (\n        <div className=\"relative flex items-center justify-start h-[40px] w-[40px]\">\n            {Array.from({ length: 8 }).map((_, index) => (\n                <div\n                    key={index}\n                    className=\"absolute top-0 left-0 flex items-center justify-start h-full w-full\"\n                    style={{ transform: `rotate(${index * 45}deg)` }}\n                >\n                    <div\n                        className={`h-[20%] w-[20%] rounded-full bg-black opacity-50 animate-pulse`}\n                        style={{\n                            animationDelay: `-${index * 0.1125}s`,\n                            animationDuration: \"0.9s\",\n                        }}\n                    ></div>\n                </div>\n            ))}\n            <style jsx>{`\n                @keyframes pulse {\n                    0%,\n                    100% {\n                        transform: scale(0);\n                        opacity: 0.5;\n                    }\n                    50% {\n                        transform: scale(1);\n                        opacity: 1;\n                    }\n                }\n                .animate-pulse {\n                    animation: pulse 0.9s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "three-body": {
      name: "three-body",
      label: "three body",
      path: "elements/loader/three-body",
      component: React.lazy(() => import("@/content/registry/elements/loader/three-body")),
      type: "loader",
      rawCode: "\"use client\"\n\nimport React from \"react\";\n\nexport default function ThreeBody() {\n    return (\n        <>\n            <div className=\"relative inline-block h-[35px] w-[35px] animate-[spin78236_2s_infinite_linear]\">\n                <div className=\"absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] left-0 rotate-[60deg]\">\n                    <div\n                        className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]\"\n                        style={{ animationDelay: \"-0.24s\" }}\n                    ></div>\n                </div>\n                <div className=\"absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] right-0 rotate-[-60deg]\">\n                    <div\n                        className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]\"\n                        style={{ animationDelay: \"-0.12s\" }}\n                    ></div>\n                </div>\n                <div className=\"absolute h-full w-[30%] bottom-[-5%] left-0 translate-x-[116.666%]\">\n                    <div className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full top-0 left-0 animate-[wobble2_0.8s_infinite_ease-in-out]\"></div>\n                </div>\n            </div>\n\n            <style jsx>\n                {`\n                    @keyframes spin78236 {\n                        0% {\n                            transform: rotate(0deg);\n                        }\n                        100% {\n                            transform: rotate(360deg);\n                        }\n                    }\n                    @keyframes wobble1 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(-66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                    @keyframes wobble2 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                `}\n            </style>\n        </>\n    );\n};",
    },
    "zoomies": {
      name: "zoomies",
      label: "zoomies",
      path: "elements/loader/zoomies",
      component: React.lazy(() => import("@/content/registry/elements/loader/zoomies")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Zoomies() {\n    return (\n        <div className=\"relative flex items-center justify-center h-[5px] w-[80px] rounded-[2.5px] overflow-hidden transform\">\n            <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-10 transition-colors duration-300\"></div>\n            <div className=\"h-full w-full rounded-[2.5px] animate-zoom bg-black transition-colors duration-300\"></div>\n\n            <style jsx>{`\n                @keyframes zoom {\n                    0% {\n                        transform: translateX(-100%);\n                    }\n                    100% {\n                        transform: translateX(100%);\n                    }\n                }\n                .animate-zoom {\n                    animation: zoom 1.4s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "demo-select": {
      name: "demo-select",
      label: "demo select",
      path: "elements/select/demo-select",
      component: React.lazy(() => import("@/content/registry/elements/select/demo-select")),
      type: "select",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { ChevronDown } from \"lucide-react\";\n\ntype Option = {\n    value: string;\n    label: string;\n};\n\nconst options: Option[] = [\n    { value: \"node\", label: \"Node\" },\n    { value: \"laravel\", label: \"Laravel\" },\n    { value: \"django\", label: \"Django\" },\n    { value: \"rails\", label: \"Rails\" }\n];\n\nexport default function DemoSelect() {\n    const [selectedOption, setSelectedOption] = useState(\"\");\n\n    const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedOption(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"w-40 relative\">\n                <select\n                    value={selectedOption}\n                    onChange={handleChange}\n                    className=\"w-full px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary\"\n                >\n                    <option value=\"\" disabled>\n                        Framework\n                    </option>\n                    {options.map((option) => (\n                        <option key={option.value} value={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none\">\n                    <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
    },
    "brutalist-switch-01": {
      name: "brutalist-switch-01",
      label: "brutalist switch 01",
      path: "elements/toggle-switch/brutalist-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/brutalist-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function BrutalistSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <button\n                onClick={toggleSwitch}\n                className={`w-16 h-10 border-4 border-black flex items-center justify-start p-1 ${\n                    isOn ? \"bg-yellow-400\" : \"bg-gray-300\"\n                }`}\n            >\n                <div\n                    className={`w-6 h-6 bg-black transform duration-100 ${\n                        isOn ? \"translate-x-6\" : \"\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "classic-switch-01": {
      name: "classic-switch-01",
      label: "classic switch 01",
      path: "elements/toggle-switch/classic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/classic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function ClassicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <button\n                className={`w-14 h-8 flex items-center rounded-full p-1 cursor-pointer ${\n                    isOn ? \"bg-green-500\" : \"bg-gray-300\"\n                }`}\n                onClick={toggleSwitch}\n            >\n                <span\n                    className={`bg-white w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ease-in-out ${\n                        isOn ? \"translate-x-6\" : \"\"\n                    }`}\n                ></span>\n            </button>\n        </div>\n    );\n}\n",
    },
    "day-night-switch-01": {
      name: "day-night-switch-01",
      label: "day night switch 01",
      path: "elements/toggle-switch/day-night-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/day-night-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function DayNightSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"relative inline-block w-20 h-10 cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"sr-only\"\n                checked={isChecked}\n                onChange={(e) => setIsChecked(e.target.checked)}\n            />\n            <span\n                className={cn(\n                    \"absolute inset-0 rounded-full transition-all duration-300 ease-in-out\",\n                    isChecked ? \"bg-indigo-900\" : \"bg-sky-400\",\n                    \"before:content-[''] before:absolute before:w-8 before:h-8 before:rounded-full before:left-1 before:top-1\",\n                    \"before:transition-all before:duration-300 before:ease-in-out\",\n                    isChecked\n                        ? \"before:bg-yellow-200 before:translate-x-10 before:scale-[0.75] before:shadow-[inset_-4px_-2px_0px_0px_#eab308]\"\n                        : \"before:bg-yellow-300 before:scale-100 before:shadow-[inset_8px_-4px_0px_0px_#fbbf24]\"\n                )}\n            >\n                {isChecked && (\n                    <span className=\"absolute inset-0 overflow-hidden rounded-full\">\n                        <span className=\"absolute top-1 left-1 w-1 h-1 bg-white rounded-full opacity-50\" />\n                        <span className=\"absolute top-3 left-6 w-1 h-1 bg-white rounded-full opacity-30\" />\n                        <span className=\"absolute top-5 left-3 w-1 h-1 bg-white rounded-full opacity-70\" />\n                    </span>\n                )}\n            </span>\n            <span className=\"sr-only\">\n                {isChecked ? \"Switch to day mode\" : \"Switch to night mode\"}\n            </span>\n        </label>\n    );\n}\n",
    },
    "emoji-switch-01": {
      name: "emoji-switch-01",
      label: "emoji switch 01",
      path: "elements/toggle-switch/emoji-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/emoji-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function EmojiSwitch() {\n  const [isOn, setIsOn] = useState(false);\n  const handleToggle = () => setIsOn(!isOn);\n\n  return (\n    <div>\n      <div className=\"flex items-center justify-center\">\n        <button\n          className={`w-16 h-9 flex items-center rounded-full p-1 cursor-pointer ${\n            isOn ? \"bg-yellow-400\" : \"bg-gray-300\"\n          }`}\n          onClick={handleToggle}\n        >\n          <span\n            className={`w-8 h-8 rounded-full text-2xl transform transition-transform duration-300 ease-in-out ${\n              isOn ? \"translate-x-6\" : \"\"\n            }`}\n          >\n            {isOn ? \"😊\" : \"😴\"}\n          </span>\n        </button>\n      </div>\n    </div>\n  );\n}\n",
    },
    "fluid-switch-01": {
      name: "fluid-switch-01",
      label: "fluid switch 01",
      path: "elements/toggle-switch/fluid-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/fluid-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function FluidSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div\n            className=\"relative h-8\"\n            style={\n                {\n                    \"--active-color\": \"#1868e3\",\n                    \"--inactive-color\": \"#d3d3d6\"\n                } as React.CSSProperties\n            }\n        >\n            <input\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n                className=\"appearance-none m-0 absolute z-10 top-0 left-0 w-full h-full cursor-pointer\"\n            />\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 292 142\"\n                className=\"w-full h-full overflow-visible\"\n            >\n                <path\n                    d=\"M71 142C31.7878 142 0 110.212 0 71C0 31.7878 31.7878 0 71 0C110.212 0 119 30 146 30C173 30 182 0 221 0C260 0 292 31.7878 292 71C292 110.212 260.212 142 221 142C181.788 142 173 112 146 112C119 112 110.212 142 71 142Z\"\n                    className={`transition-colors duration-500 ${\n                        isChecked ? \"fill-[var(--active-color)]\" : \"fill-[var(--inactive-color)]\"\n                    }`}\n                />\n                <g filter=\"url(#goo)\">\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"29\"\n                        height=\"58\"\n                        width=\"116\"\n                        y=\"42\"\n                        x=\"13\"\n                        className={`transition-transform duration-300 origin-center ${\n                            isChecked ? \"translate-x-[150px]\" : \"\"\n                        }`}\n                    />\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"58\"\n                        height=\"114\"\n                        width=\"114\"\n                        y=\"14\"\n                        x=\"14\"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? \"scale-0\" : \"scale-100\"\n                        }`}\n                    />\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"58\"\n                        height=\"114\"\n                        width=\"114\"\n                        y=\"14\"\n                        x=\"164\"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? \"scale-100\" : \"scale-0\"\n                        }`}\n                    />\n                </g>\n                <filter id=\"goo\">\n                    <feGaussianBlur stdDeviation=\"10\" result=\"blur\" in=\"SourceGraphic\" />\n                    <feColorMatrix\n                        result=\"goo\"\n                        values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\"\n                        mode=\"matrix\"\n                        in=\"blur\"\n                    />\n                </filter>\n            </svg>\n        </div>\n    );\n}\n",
    },
    "glassmorphic-switch-01": {
      name: "glassmorphic-switch-01",
      label: "glassmorphic switch 01",
      path: "elements/toggle-switch/glassmorphic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/glassmorphic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function GlassmorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <div\n                className={`relative w-16 h-8 rounded-full p-1 transition-all duration-300 ${\n                    isOn ? \"bg-gradient-to-r from-blue-500 to-purple-500\" : \"bg-gray-200\"\n                }`}\n                onClick={handleToggle}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full bg-white backdrop-blur-md shadow-lg transform transition-all duration-300 ${\n                        isOn ? \"translate-x-8\" : \"translate-x-0\"\n                    }`}\n                    style={{\n                        background: \"rgba(255, 255, 255, 0.2)\",\n                        boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\n                        border: \"1px solid rgba(255, 255, 255, 0.3)\"\n                    }}\n                ></div>\n            </div>\n        </div>\n    );\n}\n",
    },
    "glow-switch-01": {
      name: "glow-switch-01",
      label: "glow switch 01",
      path: "elements/toggle-switch/glow-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/glow-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function GlowSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`\n                    w-14 h-7 rounded-full transition-all duration-300\n                    ${isOn ? \"bg-blue-500 shadow-[0_0_15px_rgba(59,130,246,0.5)]\" : \"bg-gray-700\"}\n                `}\n            >\n                <div\n                    className={`\n                        w-5 h-5 rounded-full bg-white transition-transform duration-200\n                        m-1 shadow-md\n                        ${isOn ? \"translate-x-7\" : \"translate-x-0\"}\n                    `}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "gradient-switch-01": {
      name: "gradient-switch-01",
      label: "gradient switch 01",
      path: "elements/toggle-switch/gradient-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/gradient-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function GradientSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div>\n            <div className=\"checkbox-wrapper-25\">\n                <input\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={() => setIsChecked(!isChecked)}\n                    className=\"appearance-none h-[25px] w-[75px] rounded-[25px] cursor-pointer transition-all duration-250 ease-in-out\"\n                />\n            </div>\n\n            <style jsx>{`\n                .checkbox-wrapper-25 input[type=\"checkbox\"] {\n                    background-image: -webkit-linear-gradient(\n                            hsla(0, 0%, 0%, 0.1),\n                            hsla(0, 0%, 100%, 0.1)\n                        ),\n                    -webkit-linear-gradient(left, #f66 50%, #6cf 50%);\n                    background-size: 100% 100%, 200% 100%;\n                    background-position: 0 0, 15px 0;\n                    box-shadow: inset 0 1px 4px hsla(0, 0%, 0%, 0.5),\n                        inset 0 0 10px hsla(0, 0%, 0%, 0.5), 0 0 0 1px hsla(0, 0%, 0%, 0.1),\n                        0 -1px 2px 2px hsla(0, 0%, 0%, 0.25), 0 2px 2px 2px hsla(0, 0%, 100%, 0.75);\n                    padding-right: 25px;\n                }\n\n                .checkbox-wrapper-25 input[type=\"checkbox\"]:after {\n                    background-color: #eee;\n                    background-image: -webkit-linear-gradient(\n                        hsla(0, 0%, 100%, 0.1),\n                        hsla(0, 0%, 0%, 0.1)\n                    );\n                    border-radius: 25px;\n                    box-shadow: inset 0 1px 1px 1px hsla(0, 0%, 100%, 1),\n                        inset 0 -1px 1px 1px hsla(0, 0%, 0%, 0.25),\n                        0 1px 3px 1px hsla(0, 0%, 0%, 0.5), 0 0 2px hsla(0, 0%, 0%, 0.25);\n                    content: \"\";\n                    display: block;\n                    height: 25px;\n                    width: 50px;\n                }\n\n                .checkbox-wrapper-25 input[type=\"checkbox\"]:checked {\n                    background-position: 0 0, 35px 0;\n                    padding-left: 25px;\n                    padding-right: 0;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "gradient-switch-02": {
      name: "gradient-switch-02",
      label: "gradient switch 02",
      path: "elements/toggle-switch/gradient-switch-02",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/gradient-switch-02")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function GradientSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-8 rounded-full p-1 duration-300 ease-in-out ${\n                    isOn\n                        ? \"bg-gradient-to-r from-purple-400 via-pink-500 to-red-500\"\n                        : \"bg-gradient-to-r from-gray-200 to-gray-300\"\n                }`}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full bg-white shadow-md transform duration-300 ease-in-out ${\n                        isOn ? \"translate-x-8\" : \"\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "minimalist-switch-01": {
      name: "minimalist-switch-01",
      label: "minimalist switch 01",
      path: "elements/toggle-switch/minimalist-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/minimalist-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function MinimalistSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button onClick={handleToggle} className=\"w-12 h-6 flex items-center\">\n                <div\n                    className={`\n                        w-full h-[2px] bg-gray-200 relative transition-all duration-200\n                        ${isOn ? \"bg-black\" : \"\"}\n                    `}\n                >\n                    <div\n                        className={`\n                            absolute top-1/2 -translate-y-1/2 w-4 h-4 rounded-full border-2 \n                            transition-all duration-200 cursor-pointer\n                            ${\n                                isOn\n                                    ? \"right-0 border-black bg-black\"\n                                    : \"left-0 border-gray-200 bg-gray-100\"\n                            }\n                        `}\n                    />\n                </div>\n            </button>\n        </div>\n    );\n}\n",
    },
    "neo-brutalist-switch-01": {
      name: "neo-brutalist-switch-01",
      label: "neo brutalist switch 01",
      path: "elements/toggle-switch/neo-brutalist-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neo-brutalist-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function NeoBrutalistToggleSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                className={`\n                    relative w-28 h-12\n                    bg-black border-4 border-black\n                    shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]\n                    transition-all duration-300 ease-in-out\n                `}\n                onClick={toggleSwitch}\n                aria-checked={isOn}\n                role=\"switch\"\n            >\n                <div\n                    className={`\n                    absolute top-0 left-0 w-1/2 h-full bg-white\n                    transform transition-transform duration-300 ease-in-out\n                    flex items-center justify-center\n                    ${isOn ? \"translate-x-full\" : \"translate-x-0\"}\n                `}\n                >\n                    <span className=\"text-black font-bold text-xs\">{isOn ? \"ON\" : \"OFF\"}</span>\n                </div>\n            </button>\n        </div>\n    );\n}\n",
    },
    "neomorphic-switch-01": {
      name: "neomorphic-switch-01",
      label: "neomorphic switch 01",
      path: "elements/toggle-switch/neomorphic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neomorphic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function NeomorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-8 rounded-full bg-gray-200 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] flex items-center justify-start p-1`}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-8 bg-white shadow-[0_2px_4px_rgba(0,0,0,0.1)]\"\n                            : \"bg-gray-300 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "neomorphic-switch-02": {
      name: "neomorphic-switch-02",
      label: "neomorphic switch 02",
      path: "elements/toggle-switch/neomorphic-switch-02",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neomorphic-switch-02")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function NeomorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className=\"w-16 h-8 rounded-full bg-gray-100 shadow-[inset_0px_2px_4px_rgba(0,0,0,0.1)] p-1\"\n            >\n                <div\n                    className={`\n                            w-6 h-6 rounded-full transition-all duration-200\n                            ${\n                                isOn\n                                    ? \"bg-blue-500 shadow-lg translate-x-8\"\n                                    : \"bg-white shadow-md translate-x-0\"\n                            }\n                        `}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "neon-switch-01": {
      name: "neon-switch-01",
      label: "neon switch 01",
      path: "elements/toggle-switch/neon-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/neon-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function NeonSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-8 rounded-full p-1 duration-300 ease-in-out ${\n                    isOn\n                        ? \"bg-purple-900 shadow-[0_0_10px_2px_rgba(147,51,234,0.7)]\"\n                        : \"bg-gray-500\"\n                }`}\n            >\n                <div\n                    className={`w-6 h-6 rounded-full transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-8 bg-purple-400 shadow-[0_0_10px_2px_rgba(167,139,250,0.7)]\"\n                            : \"bg-gray-400\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "retro-switch-01": {
      name: "retro-switch-01",
      label: "retro switch 01",
      path: "elements/toggle-switch/retro-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/retro-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function RetroSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-10 rounded-lg bg-gradient-to-b from-gray-300 to-gray-400 border-2 border-gray-600 shadow-inner flex items-center justify-start p-1`}\n            >\n                <div\n                    className={`w-6 h-6 rounded transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-7 bg-gradient-to-b from-red-400 to-red-600 border-2 border-red-700\"\n                            : \"bg-gradient-to-b from-gray-600 to-gray-800 border-2 border-gray-900\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "skeuomorphic-switch-01": {
      name: "skeuomorphic-switch-01",
      label: "skeuomorphic switch 01",
      path: "elements/toggle-switch/skeuomorphic-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/skeuomorphic-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function SkeuomorphicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n    const handleToggle = () => setIsOn(!isOn);\n\n    return (\n        <div>\n            <button\n                onClick={handleToggle}\n                className={`w-16 h-10 rounded-full bg-gradient-to-b from-gray-300 to-gray-400 border border-gray-400 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)] flex items-center justify-start p-1`}\n            >\n                <div\n                    className={`w-8 h-8 rounded-full transform duration-300 ease-in-out ${\n                        isOn\n                            ? \"translate-x-6 bg-gradient-to-b from-green-400 to-green-500 border border-green-600 shadow-md\"\n                            : \"bg-gradient-to-b from-gray-100 to-gray-300 border border-gray-400 shadow-[inset_0_2px_4px_rgba(0,0,0,0.1)]\"\n                    }`}\n                />\n            </button>\n        </div>\n    );\n}\n",
    },
    "theme-switch-01": {
      name: "theme-switch-01",
      label: "theme switch 01",
      path: "elements/toggle-switch/theme-switch-01",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/theme-switch-01")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState, useEffect } from \"react\";\nimport { Monitor, Moon, Sun } from \"lucide-react\";\n\ntype Theme = \"system\" | \"light\" | \"dark\";\n\nexport default function ThemeSwitch() {\n    const [theme, setTheme] = useState<Theme>(\"system\");\n\n    useEffect(() => {\n        const savedTheme = localStorage.getItem(\"theme\") as Theme;\n        if (savedTheme) {\n            setTheme(savedTheme);\n        }\n    }, []);\n\n    useEffect(() => {\n        localStorage.setItem(\"theme\", theme);\n\n        if (theme === \"dark\") {\n            document.documentElement.classList.add(\"dark\");\n        } else if (theme === \"light\") {\n            document.documentElement.classList.remove(\"dark\");\n        } else {\n            if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n                document.documentElement.classList.add(\"dark\");\n            } else {\n                document.documentElement.classList.remove(\"dark\");\n            }\n        }\n    }, [theme]);\n\n    return (\n        <div>\n            <div className=\"relative flex bg-gray-200 rounded-full p-1 gap-1 items-center h-10\">\n                {/* Sliding background */}\n                <div\n                    className={`absolute h-8 my-1 w-8 bg-white rounded-full shadow-sm transition-transform duration-200 ease-in-out ${\n                        theme === \"system\"\n                            ? \"translate-x-0\"\n                            : theme === \"light\"\n                            ? \"translate-x-9\"\n                            : \"translate-x-[4.5rem]\"\n                    }`}\n                />\n\n                {/* System theme button */}\n                <button\n                    onClick={() => setTheme(\"system\")}\n                    className={`relative z-10 p-2 rounded-full transition-colors duration-200 ${\n                        theme === \"system\" ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\"\n                    }`}\n                    aria-label=\"System theme\"\n                >\n                    <Sun className=\"h-4 w-4\" />\n                </button>\n\n                {/* Light theme button */}\n                <button\n                    onClick={() => setTheme(\"light\")}\n                    className={`relative z-10 p-2 rounded-full transition-colors duration-200 ${\n                        theme === \"light\" ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\"\n                    }`}\n                    aria-label=\"Light theme\"\n                >\n                    <Monitor className=\"h-4 w-4\" />\n                </button>\n\n                {/* Dark theme button */}\n                <button\n                    onClick={() => setTheme(\"dark\")}\n                    className={`relative z-10 p-2 rounded-full transition-colors duration-200 ${\n                        theme === \"dark\" ? \"text-gray-900\" : \"text-gray-600 hover:text-gray-900\"\n                    }`}\n                    aria-label=\"Dark theme\"\n                >\n                    <Moon className=\"h-4 w-4\" />\n                </button>\n            </div>\n        </div>\n    );\n}\n",
    },
  },
  "examples": {
    "custom-cursor-basic": {
      name: "custom-cursor-basic",
      label: "custom cursor basic",
      path: "custom-cursor-basic",
      component: React.lazy(() => import("@/content/examples/custom-cursor-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport CustomCursor from \"../registry/core/custom-cursor\";\n\nexport default function CustomCursorBasic() {\n    return (\n        <CustomCursor cursorType=\"icon\" cursorContent=\"👋\">\n            <div className=\"px-8 py-4 border rounded-md\">Hover me!</div>\n        </CustomCursor>\n    );\n}\n",
    },
    "custom-cursor-complex": {
      name: "custom-cursor-complex",
      label: "custom cursor complex",
      path: "custom-cursor-complex",
      component: React.lazy(() => import("@/content/examples/custom-cursor-complex")),
      type: "",
      rawCode: "\"use client\";\n\nimport { ArrowRight, Sparkles } from \"lucide-react\";\nimport CustomCursor from \"@/content/registry/core/custom-cursor\";\n\nexport default function CustomCursorComplex() {\n    return (\n        <CustomCursor\n            cursorType=\"custom\"\n            cursorContent={\n                <div className=\"flex items-center space-x-2 bg-yellow-300 px-3 py-1 rounded-full shadow-lg\">\n                    <Sparkles className=\"w-4 h-4 text-yellow-600\" />\n                    <span className=\"text-sm font-semibold text-yellow-800\">\n                        Click Here!\n                    </span>\n                    <ArrowRight className=\"w-4 h-4 text-yellow-600\" />\n                </div>\n            }\n        >\n            <div className=\"border p-8 rounded-md text-center\">\n                <h2 className=\"text-xl font-semibold mb-2\">Custom Cursor</h2>\n                <p>Hover over this area to see a custom cursor</p>\n            </div>\n        </CustomCursor>\n    );\n}\n",
    },
    "custom-cursor-text": {
      name: "custom-cursor-text",
      label: "custom cursor text",
      path: "custom-cursor-text",
      component: React.lazy(() => import("@/content/examples/custom-cursor-text")),
      type: "",
      rawCode: "\"use client\";\n\nimport CustomCursor from \"@/content/registry/core/custom-cursor\";\n\nexport default function CursorChangerText() {\n    return (\n        <CustomCursor cursorType=\"text\" cursorContent=\"Hello, World!\">\n            <div className=\"border p-8 rounded-md text-center\">\n                <h2 className=\"text-xl font-semibold mb-2\">Text Cursor</h2>\n                <p>Hover over this area to see a text cursor</p>\n            </div>\n        </CustomCursor>\n    );\n}\n",
    },
    "marquee-basic": {
      name: "marquee-basic",
      label: "marquee basic",
      path: "marquee-basic",
      component: React.lazy(() => import("@/content/examples/marquee-basic")),
      type: "",
      rawCode: "import React from \"react\";\nimport { Icons } from \"@/components/website/icons\";\nimport Marquee from \"@/content/registry/core/marquee\";\n\nconst data = [\n    {\n        name: \"React\",\n        icon: Icons.react\n    },\n    {\n        name: \"Next\",\n        icon: Icons.next\n    },\n    {\n        name: \"Remix\",\n        icon: Icons.remix\n    },\n    {\n        name: \"Svelte\",\n        icon: Icons.svelte\n    },\n    {\n        name: \"Vue\",\n        icon: Icons.vue\n    },\n    {\n        name: \"Nuxt\",\n        icon: Icons.nuxt\n    },\n    {\n        name: \"Astro\",\n        icon: Icons.astro\n    }\n];\n\nexport default function MarqueeBasic() {\n    return (\n        <Marquee\n            duration={20}\n            repeat={2}\n            direction=\"left\"\n            pauseOnHover\n            className=\"w-[500px]\"\n        >\n            {data.map((item, index) => (\n                <div key={`${item.name}-${index}`} className=\"flex flex-col items-center\">\n                    <item.icon className=\"h-14 w-14 px-4 dark:invert\" />\n                    <span className=\"text-xs\">{item.name}</span>\n                </div>\n            ))}\n        </Marquee>\n    );\n}\n",
    },
    "marquee-reverse": {
      name: "marquee-reverse",
      label: "marquee reverse",
      path: "marquee-reverse",
      component: React.lazy(() => import("@/content/examples/marquee-reverse")),
      type: "",
      rawCode: "import React from \"react\";\nimport Marquee from \"@/content/registry/core/marquee\";\n\nconst testimonials = [\n    {\n        name: \"Jack Thompson\",\n        testimonial: \"Amazing service, highly recommend!\",\n        role: \"Product Designer\",\n        id: 1\n    },\n    {\n        name: \"Maria Rodriguez\",\n        testimonial: \"Great experience, will return again.\",\n        role: \"Marketing Director\",\n        id: 2\n    },\n    {\n        name: \"Alex Chen\",\n        testimonial: \"Exceptional quality and friendly staff.\",\n        role: \"Tech Lead\",\n        id: 3\n    },\n    {\n        name: \"Sarah Wilson\",\n        testimonial: \"Loved the atmosphere and support!\",\n        role: \"Startup Founder\",\n        id: 4\n    },\n    {\n        name: \"David Lee\",\n        testimonial: \"Fantastic service from start to finish.\",\n        role: \"Creative Director\",\n        id: 5\n    },\n    {\n        name: \"Nina Patel\",\n        testimonial: \"A wonderful experience overall.\",\n        role: \"UX Researcher\",\n        id: 6\n    }\n];\n\nconst getInitials = (name: string) => {\n    return name\n        .split(\" \")\n        .map((part) => part[0])\n        .join(\"\")\n        .toUpperCase();\n};\n\nexport default function TestimonialsMarquee() {\n    return (\n        <Marquee\n            duration={35}\n            repeat={3}\n            direction=\"right\"\n            gap={12}\n            className=\"w-[90%] py-8\"\n            pauseOnHover\n        >\n            {testimonials.map((item) => (\n                <div\n                    key={item.id}\n                    className=\"h-[250px] border rounded-md p-6 flex flex-col items-center  \"\n                >\n                    <span className=\"mb-4 font-bold h-[50px] w-[50px] border rounded-full grid place-content-center\">\n                        {getInitials(item.name)}\n                    </span>\n                    <span className=\"text-gray-500 text-sm text-center\">{item.name}</span>\n                    <span className=\"mb-2 text-gray-500 text-sm text-center\">{item.role}</span>\n                    <span className=\"text-gray-900 text-sm text-center\">{item.testimonial}</span>\n                </div>\n            ))}\n        </Marquee>\n    );\n}\n",
    },
    "text-scramble-basic": {
      name: "text-scramble-basic",
      label: "text scramble basic",
      path: "text-scramble-basic",
      component: React.lazy(() => import("@/content/examples/text-scramble-basic")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport TextScramble from \"@/content/registry/core/text-scramble\";\n\nexport default function TextScrambleBasic() {\n    return (\n        <TextScramble\n            displayText=\"Text Scramble Effect Demo\"\n            scrambleOnHover={false}\n            duration={1.2}\n        />\n    );\n}\n",
    },
    "text-scramble-custom-chars": {
      name: "text-scramble-custom-chars",
      label: "text scramble custom chars",
      path: "text-scramble-custom-chars",
      component: React.lazy(() => import("@/content/examples/text-scramble-custom-chars")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport TextScramble from \"@/content/registry/core/text-scramble\";\n\nexport default function TextScrambleCustomChars() {\n    return (\n        <TextScramble\n            displayText=\"Text Scramble Effect Demo\"\n            scrambleOnHover={false}\n            duration={1.2}\n            characters=\"_\"\n        />\n    );\n}\n",
    },
    "text-scramble-on-hover": {
      name: "text-scramble-on-hover",
      label: "text scramble on hover",
      path: "text-scramble-on-hover",
      component: React.lazy(() => import("@/content/examples/text-scramble-on-hover")),
      type: "",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport TextScramble from \"@/content/registry/core/text-scramble\";\n\nexport default function TextScrambleOnHover() {\n    return (\n        <TextScramble\n            displayText=\"Text Scramble Effect Demo\"\n            scrambleOnHover={true}\n            duration={1.2}\n        />\n    );\n}\n",
    },
  },
};
