// @ts-nocheck
// This file is autogenerated by scripts/create-pr-content.ts.
// Do not edit this file directly.

import React from 'react';

export type PreviewsType = typeof Previews;

export const Previews: Record<string, any> = {
  "component": {
    "pendulum-wave": {
      name: "pendulum-wave",
      label: "pendulum wave",
      path: "components/pendulum-wave",
      component: React.lazy(() => import("@/content/registry/components/pendulum-wave")),
      type: "",
      rawCode: "\"use client\";\n\nimport { motion } from \"framer-motion\";\n\ninterface PendulumLoadingProps {\n    pendulumCount?: number;\n    swingDuration?: number;\n    swingAngle?: number;\n    threadLength?: number;\n}\n\nexport default function PendulumWave({\n    pendulumCount = 8,\n    swingDuration = 2,\n    swingAngle = 30,\n    threadLength = 80\n}: PendulumLoadingProps) {\n    // Create an array of pendulum configurations with different delays\n    const pendulums = Array.from({ length: pendulumCount }, (_, index) => ({\n        id: index,\n        // Create a circular pattern of delays\n        delay: index * (swingDuration / pendulumCount)\n    }));\n\n    return (\n        <div className=\"w-full h-full flex items-center justify-center\">\n            <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\" className=\"overflow-visible\">\n                {/* Center anchor point */}\n                <circle cx=\"100\" cy=\"60\" r=\"3\" fill=\"black\" />\n\n                {pendulums.map((pendulum, i) => (\n                    <g key={pendulum.id}>\n                        {/* Pendulum thread */}\n                        <motion.line\n                            x1=\"100\"\n                            y1=\"60\"\n                            x2=\"100\"\n                            y2={60 + i * 5 + threadLength}\n                            stroke=\"black\"\n                            strokeWidth=\"1.5\"\n                            animate={{\n                                rotate: [swingAngle, -swingAngle]\n                            }}\n                            transition={{\n                                duration: swingDuration,\n                                repeat: Infinity,\n                                ease: \"easeInOut\",\n                                repeatType: \"reverse\",\n                                delay: pendulum.delay\n                            }}\n                            style={{\n                                originX: \"100px\",\n                                originY: \"60px\"\n                            }}\n                        />\n\n                        {/* Pendulum bob */}\n                        <motion.g\n                            animate={{\n                                rotate: [swingAngle, -swingAngle]\n                            }}\n                            transition={{\n                                duration: swingDuration,\n                                repeat: Infinity,\n                                ease: \"easeInOut\",\n                                repeatType: \"reverse\",\n                                delay: pendulum.delay\n                            }}\n                            style={{\n                                originX: \"100px\",\n                                originY: \"60px\"\n                            }}\n                        >\n                            {/* Bob shadow */}\n                            <circle\n                                cx=\"100\"\n                                cy={60 + i * 5 + threadLength}\n                                r=\"6\"\n                                className=\"fill-black/10\"\n                                filter=\"blur(2px)\"\n                            />\n                            {/* Main bob */}\n                            <circle\n                                cx=\"100\"\n                                cy={60 + i * 5 + threadLength}\n                                r=\"5\"\n                                className=\"fill-black\"\n                            />\n                        </motion.g>\n                    </g>\n                ))}\n            </svg>\n        </div>\n    );\n}\n",
    },
  },
  "element": {
    "brutalist-button": {
      name: "brutalist-button",
      label: "brutalist button",
      path: "elements/button/brutalist-button",
      component: React.lazy(() => import("@/content/registry/elements/button/brutalist-button")),
      type: "button",
      rawCode: "\"use client\";\n\nimport { cn } from \"@/lib/utils\";\n\ninterface BrutalistButtonProps {\n    children?: React.ReactNode;\n    className?: string;\n    onClick?: () => void;\n}\n\nexport default function BrutalistButton({ children, className, onClick }: BrutalistButtonProps) {\n    return (\n        <button\n            onClick={onClick}\n            className={cn(\n                \"h-12 w-28 px-4 flex items-center border-2 rounded-sm border-black shadow-[4px_4px_0_0_#000] transition-all duration-200\",\n                \"active:translate-x-1 active:translate-y-1 active:shadow-[2px_2px_0_0_#000]\",\n                className\n            )}\n        >\n            {children || \"Brutalist\"}\n        </button>\n    );\n}\n",
    },
    "shimmer-button": {
      name: "shimmer-button",
      label: "shimmer button",
      path: "elements/button/shimmer-button",
      component: React.lazy(() => import("@/content/registry/elements/button/shimmer-button")),
      type: "button",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface ShimmerButtonProps {\n    className?: string;\n}\n\nconst ShimmerButton = ({ className }: ShimmerButtonProps) => {\n    return (\n        <>\n            <button\n                className={cn(\n                    \"h-12 w-28 rounded-full relative cursor-pointer flex items-center justify-center border border-white/10 bg-black overflow-hidden\",\n                    className\n                )}\n            >\n                <span\n                    className={cn(\n                        \"absolute w-full aspect-[1] top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\",\n                        \"before:content-[''] before:absolute before:h-full before:w-full before:aspect-[1] top-1/2 left-100 before:-translate-x-1/2 before:-translate-y-1/2   before:bg-[conic-gradient(transparent,white_60deg,transparent_61deg)]\",\n                        \"before:animate-[lazy_2s_linear_infinite]\"\n                    )}\n                ></span>\n\n                <span className=\"absolute inset-[2px] bg-black rounded-full\"></span>\n                <span className=\"text-white z-10 text-sm\">Shimmer</span>\n            </button>\n\n            <style>{`\n                @keyframes lazy {\n                    0% {\n                        transform: rotate(0deg);\n                    }\n\n                    100% {\n                        transform: rotate(360deg);\n                    }\n                }\n            `}</style>\n        </>\n    );\n};\n\nexport default ShimmerButton;\n",
    },
    "demo-checkbox": {
      name: "demo-checkbox",
      label: "demo checkbox",
      path: "elements/checkbox/demo-checkbox",
      component: React.lazy(() => import("@/content/registry/elements/checkbox/demo-checkbox")),
      type: "checkbox",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\nimport { motion } from \"framer-motion\";\n\nexport default function AmazingCheckbox() {\n    const [isChecked, setIsChecked] = useState(true);\n\n    const toggleCheckbox = () => setIsChecked(!isChecked);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <label className=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                    type=\"checkbox\"\n                    className=\"sr-only\"\n                    checked={isChecked}\n                    onChange={toggleCheckbox}\n                />\n                <motion.div\n                    className={`w-9 h-9 rounded-xl border ${\n                        isChecked\n                            ? \"bg-gradient-to-br from-purple-500 via-pink-500 to-red-500\"\n                            : \"bg-white\"\n                    }`}\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    transition={{\n                        type: \"spring\",\n                        stiffness: 300,\n                        damping: 20\n                    }}\n                >\n                    <motion.svg\n                        className=\"w-full h-full p-2 text-white\"\n                        viewBox=\"0 0 24 24\"\n                        initial=\"hidden\"\n                        animate={isChecked ? \"visible\" : \"hidden\"}\n                    >\n                        <motion.path\n                            d=\"M4 12.6111L8.92308 17.5L20 6.5\"\n                            fill=\"none\"\n                            stroke=\"currentColor\"\n                            strokeWidth=\"3\"\n                            strokeLinecap=\"round\"\n                            strokeLinejoin=\"round\"\n                            variants={{\n                                visible: {\n                                    pathLength: 1,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: \"easeOut\"\n                                    }\n                                },\n                                hidden: {\n                                    pathLength: 0,\n                                    transition: {\n                                        duration: 0.3,\n                                        ease: \"easeIn\"\n                                    }\n                                }\n                            }}\n                        />\n                    </motion.svg>\n                </motion.div>\n            </label>\n        </div>\n    );\n}\n",
    },
    "demo-input": {
      name: "demo-input",
      label: "demo input",
      path: "elements/input/demo-input",
      component: React.lazy(() => import("@/content/registry/elements/input/demo-input")),
      type: "input",
      rawCode: "import React from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function DemoInput() {\n    return (\n        <div>\n            <input\n                type=\"text\"\n                name=\"text\"\n                className={cn(\n                    \"h-9 w-56 px-3 border border-black text-sm uppercase tracking-widest\",\n                    \"focus:outline-none focus:border-[0.5px] focus:shadow-[-5px_-5px_0px_0px_rgba(0,0,0,1)] placeholder:text-gray-500\",\n                    \"transition-all duration-100 ease-linear\"\n                )}\n                placeholder=\"search...\"\n            />\n        </div>\n    );\n}\n",
    },
    "classic": {
      name: "classic",
      label: "classic",
      path: "elements/loader/classic",
      component: React.lazy(() => import("@/content/registry/elements/loader/classic")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Classic({\n    size = \"md\",\n    color = \"primary\"\n}: {\n    size?: \"sm\" | \"md\" | \"lg\";\n    color?: \"primary\" | \"secondary\" | \"white\";\n}) {\n    const sizeClasses = {\n        sm: \"w-5 h-5\",\n        md: \"w-8 h-8\",\n        lg: \"w-12 h-12\"\n    };\n\n    const colorClasses = {\n        primary: \"text-primary\",\n        secondary: \"text-secondary\",\n        white: \"text-white\"\n    };\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <div\n                className={`${sizeClasses[size]} ${colorClasses[color]} animate-spin`}\n                style={{\n                    borderRadius: \"50%\",\n                    border: \"2px solid currentColor\",\n                    borderTopColor: \"transparent\"\n                }}\n                role=\"status\"\n                aria-label=\"loading\"\n            >\n                <span className=\"sr-only\">Loading...</span>\n            </div>\n            <style jsx>{`\n                @keyframes spin {\n                    to {\n                        transform: rotate(360deg);\n                    }\n                }\n                .animate-spin {\n                    animation: spin 1s linear infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "jumping-dots": {
      name: "jumping-dots",
      label: "jumping dots",
      path: "elements/loader/jumping-dots",
      component: React.lazy(() => import("@/content/registry/elements/loader/jumping-dots")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function JumpingDots() {\n    return (\n        <div className=\"flex items-end justify-between w-[47px] h-[23.5px]\">\n            {Array.from({ length: 4 }).map((_, index) => (\n                <div\n                    key={index}\n                    className={`flex-shrink-0 w-[8px] h-[8px] rounded-full bg-black`}\n                    style={{\n                        animation: `jump 1s ease-in-out calc(1s * -${(4 - index) * 0.15}) infinite`\n                    }}\n                ></div>\n            ))}\n\n            <style jsx>{`\n                @keyframes jump {\n                    0%,\n                    100% {\n                        transform: translateY(0);\n                    }\n                    50% {\n                        transform: translateY(-200%);\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "leapfrog": {
      name: "leapfrog",
      label: "leapfrog",
      path: "elements/loader/leapfrog",
      component: React.lazy(() => import("@/content/registry/elements/loader/leapfrog")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function LeapFrog() {\n    // Array of dot configurations\n    const dots = [\n        { delay: \"0s\", translateX: \"translate-x-0\" },\n        { delay: \"-0.833s\", translateX: \"translate-x-4\" },\n        { delay: \"-1.667s\", translateX: \"translate-x-8\" }\n    ];\n\n    return (\n        <div className=\"h-10 w-10 relative flex items-center justify-between\">\n            {dots.map((dot, index) => (\n                <div\n                    key={index}\n                    className={`\n                        absolute top-0 left-0 flex items-center justify-start w-full h-full\n                        before:content-[''] before:block before:h-2 before:w-2 before:rounded-full before:bg-black\n                        before:transition-colors before:duration-300 before:ease-in-out\n                        animate-leapFrog\n                    `}\n                    style={{\n                        animationDelay: dot.delay\n                    }}\n                />\n            ))}\n\n            <style jsx>{`\n                @keyframes leapFrog {\n                    0% {\n                        transform: translateX(0) rotate(0deg);\n                    }\n                    33.333% {\n                        transform: translateX(0) rotate(180deg);\n                    }\n                    66.666% {\n                        transform: translateX(-15px) rotate(180deg);\n                    }\n                    99.999% {\n                        transform: translateX(-31px) rotate(180deg);\n                    }\n                    100% {\n                        transform: translateX(0) rotate(0deg);\n                    }\n                }\n\n                .animate-leapFrog {\n                    animation: leapFrog 2.5s ease infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "line-spinner": {
      name: "line-spinner",
      label: "line spinner",
      path: "elements/loader/line-spinner",
      component: React.lazy(() => import("@/content/registry/elements/loader/line-spinner")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { motion } from \"framer-motion\";\n\nexport default function LineSpinner() {\n    return (\n        <div className=\"relative w-12 h-12\">\n            {[...Array(12)].map((_, i) => (\n                <motion.div\n                    key={i}\n                    className=\"absolute w-1 h-4 bg-primary\"\n                    style={{\n                        left: \"50%\",\n                        top: \"50%\",\n                        transform: `rotate(${-i * 30}deg)`,\n                        transformOrigin: \"0% 0%\"\n                    }}\n                    animate={{\n                        opacity: [0.1, 1, 0.1]\n                    }}\n                    transition={{\n                        duration: 1,\n                        repeat: Infinity,\n                        delay: i * 0.1\n                    }}\n                />\n            ))}\n        </div>\n    );\n}\n",
    },
    "line-wobble": {
      name: "line-wobble",
      label: "line wobble",
      path: "elements/loader/line-wobble",
      component: React.lazy(() => import("@/content/registry/elements/loader/line-wobble")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function LineWobble() {\n    return (\n        <div className=\"relative flex items-center justify-center h-[5px] w-[80px] rounded-[2.5px] overflow-hidden transform\">\n            <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-10 transition-colors duration-300\"></div>\n            <div className=\"h-full w-full rounded-[2.5px] animate-wobble bg-black transition-colors duration-300\"></div>\n\n            <style jsx>{`\n                @keyframes wobble {\n                    0%,\n                    100% {\n                        transform: translateX(-95%);\n                    }\n                    50% {\n                        transform: translateX(95%);\n                    }\n                }\n                .animate-wobble {\n                    animation: wobble 1.75s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "newtons-cradle": {
      name: "newtons-cradle",
      label: "newtons cradle",
      path: "elements/loader/newtons-cradle",
      component: React.lazy(() => import("@/content/registry/elements/loader/newtons-cradle")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function NewtonsCradle() {\n    return (\n        <div className=\"h-10 w-10 relative flex items-center justify-center\">\n            <div className=\"dot animate-swing\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot animate-swing2\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot\">\n                <div className=\"dot-inner\" />\n            </div>\n            <div className=\"dot\">\n                <div className=\"dot-inner\" />\n            </div>\n\n            <style jsx>{`\n                .dot {\n                    position: relative;\n                    display: flex;\n                    flex-shrink: 0;\n                    align-items: center;\n                    justify-content: center;\n                    height: 100%;\n                    width: 25%;\n                    transform-origin: center top;\n                }\n\n                .dot-inner {a\n                    content: \"\";\n                    display: block;\n                    width: 100%;\n                    height: 25%;\n                    border-radius: 50%;\n                    background-color: black;\n                    transition: background-color 0.3s ease;\n                }\n\n                .dot:first-child {\n                    animation: swing 1.4s linear infinite;\n                }\n\n                .dot:last-child {\n                    animation: swing2 1.4s linear infinite;\n                }\n\n                @keyframes swing {\n                    0% {\n                        transform: rotate(0deg);\n                        animation-timing-function: ease-out;\n                    }\n                    25% {\n                        transform: rotate(70deg);\n                        animation-timing-function: ease-in;\n                    }\n                    50% {\n                        transform: rotate(0deg);\n                        animation-timing-function: linear;\n                    }\n                }\n\n                @keyframes swing2 {\n                    0% {\n                        transform: rotate(0deg);\n                        animation-timing-function: linear;\n                    }\n                    50% {\n                        transform: rotate(0deg);\n                        animation-timing-function: ease-out;\n                    }\n                    75% {\n                        transform: rotate(-70deg);\n                        animation-timing-function: ease-in;\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "pendulum": {
      name: "pendulum",
      label: "pendulum",
      path: "elements/loader/pendulum",
      component: React.lazy(() => import("@/content/registry/elements/loader/pendulum")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport { motion } from \"framer-motion\";\n\ninterface PendulumLoadingProps {\n    swingDuration?: number;\n    swingAngle?: number;\n    threadLength?: number;\n}\n\nexport default function Pendulum(props: PendulumLoadingProps) {\n    const swingDuration = props.swingDuration || 1.5;\n    const swingAngle = props.swingAngle || 30; // degrees\n    const threadLength = props.threadLength || 60; // pixels\n\n    return (\n        <svg width=\"200\" height=\"200\" viewBox=\"0 0 200 200\">\n            {/* Pendulum anchor point */}\n            <circle cx=\"100\" cy=\"50\" r=\"3\" fill=\"black\" />\n\n            {/* Pendulum thread */}\n            <motion.line\n                x1=\"100\"\n                y1=\"50\"\n                x2=\"100\"\n                y2={50 + threadLength}\n                stroke=\"black\"\n                strokeWidth=\"2\"\n                animate={{\n                    rotate: [swingAngle, -swingAngle]\n                }}\n                transition={{\n                    duration: swingDuration,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                    repeatType: \"reverse\"\n                }}\n                style={{ originX: \"100px\", originY: \"50px\" }}\n            />\n\n            {/* Pendulum bob (circle) */}\n            <motion.circle\n                cx=\"100\"\n                cy={50 + threadLength}\n                r=\"8\"\n                fill=\"black\"\n                animate={{\n                    rotate: [swingAngle, -swingAngle]\n                }}\n                transition={{\n                    duration: swingDuration,\n                    repeat: Infinity,\n                    ease: \"easeInOut\",\n                    repeatType: \"reverse\"\n                }}\n                style={{ originX: \"100px\", originY: \"50px\" }}\n            />\n        </svg>\n    );\n}\n",
    },
    "pulsating-dots": {
      name: "pulsating-dots",
      label: "pulsating dots",
      path: "elements/loader/pulsating-dots",
      component: React.lazy(() => import("@/content/registry/elements/loader/pulsating-dots")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function PulsingDots() {\n    return (\n        <div className=\"relative flex items-center justify-between w-[43px] h-[10.32px]\">\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-0\"></div>\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-200\"></div>\n            <div className=\"w-[10.32px] h-[10.32px] rounded-full bg-black animate-pulse delay-400\"></div>\n\n            <style jsx>{`\n                @keyframes pulse {\n                    0%,\n                    100% {\n                        transform: scale(0);\n                    }\n                    50% {\n                        transform: scale(1);\n                    }\n                }\n\n                .animate-pulse {\n                    animation: pulse 1.3s ease-in-out infinite;\n                }\n\n                .delay-0 {\n                    animation-delay: calc(1.3s * -0.25);\n                }\n\n                .delay-200 {\n                    animation-delay: calc(1.3s * -0.125);\n                }\n\n                .delay-400 {\n                    animation-delay: 0s;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "spinner": {
      name: "spinner",
      label: "spinner",
      path: "elements/loader/spinner",
      component: React.lazy(() => import("@/content/registry/elements/loader/spinner")),
      type: "loader",
      rawCode: "import React from \"react\";\n\nexport default function SpinnerLoader() {\n    return (\n        <div\n            className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-black\"\n            aria-label=\"Loading\"\n        >\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n",
    },
    "spiral": {
      name: "spiral",
      label: "spiral",
      path: "elements/loader/spiral",
      component: React.lazy(() => import("@/content/registry/elements/loader/spiral")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Spiral() {\n    return (\n        <div className=\"relative flex items-center justify-start h-[40px] w-[40px]\">\n            {Array.from({ length: 8 }).map((_, index) => (\n                <div\n                    key={index}\n                    className=\"absolute top-0 left-0 flex items-center justify-start h-full w-full\"\n                    style={{ transform: `rotate(${index * 45}deg)` }}\n                >\n                    <div\n                        className={`h-[20%] w-[20%] rounded-full bg-black opacity-50 animate-pulse`}\n                        style={{\n                            animationDelay: `-${index * 0.1125}s`,\n                            animationDuration: \"0.9s\",\n                        }}\n                    ></div>\n                </div>\n            ))}\n            <style jsx>{`\n                @keyframes pulse {\n                    0%,\n                    100% {\n                        transform: scale(0);\n                        opacity: 0.5;\n                    }\n                    50% {\n                        transform: scale(1);\n                        opacity: 1;\n                    }\n                }\n                .animate-pulse {\n                    animation: pulse 0.9s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "three-body": {
      name: "three-body",
      label: "three body",
      path: "elements/loader/three-body",
      component: React.lazy(() => import("@/content/registry/elements/loader/three-body")),
      type: "loader",
      rawCode: "\"use client\"\n\nimport React from \"react\";\n\nexport default function ThreeBody() {\n    return (\n        <>\n            <div className=\"relative inline-block h-[35px] w-[35px] animate-[spin78236_2s_infinite_linear]\">\n                <div className=\"absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] left-0 rotate-[60deg]\">\n                    <div\n                        className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]\"\n                        style={{ animationDelay: \"-0.24s\" }}\n                    ></div>\n                </div>\n                <div className=\"absolute h-full w-[30%] origin-[50%_85%] bottom-[5%] right-0 rotate-[-60deg]\">\n                    <div\n                        className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full bottom-0 left-0 animate-[wobble1_0.8s_infinite_ease-in-out]\"\n                        style={{ animationDelay: \"-0.12s\" }}\n                    ></div>\n                </div>\n                <div className=\"absolute h-full w-[30%] bottom-[-5%] left-0 translate-x-[116.666%]\">\n                    <div className=\"absolute h-0 w-full pb-[100%] bg-black rounded-full top-0 left-0 animate-[wobble2_0.8s_infinite_ease-in-out]\"></div>\n                </div>\n            </div>\n\n            <style jsx>\n                {`\n                    @keyframes spin78236 {\n                        0% {\n                            transform: rotate(0deg);\n                        }\n                        100% {\n                            transform: rotate(360deg);\n                        }\n                    }\n                    @keyframes wobble1 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(-66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                    @keyframes wobble2 {\n                        0%,\n                        100% {\n                            transform: translateY(0%) scale(1);\n                            opacity: 1;\n                        }\n                        50% {\n                            transform: translateY(66%) scale(0.65);\n                            opacity: 0.8;\n                        }\n                    }\n                `}\n            </style>\n        </>\n    );\n};",
    },
    "tiktok": {
      name: "tiktok",
      label: "tiktok",
      path: "elements/loader/tiktok",
      component: React.lazy(() => import("@/content/registry/elements/loader/tiktok")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Tiktok() {\n    return (\n        <div>\n            <div className=\"relative h-[14px] w-[35px]\">\n                <div className=\"absolute h-[14px] w-[14px] rounded-full bg-[#FE2C55] animate-[orbit_1.4s_linear_infinite]\"></div>\n                <div className=\"absolute h-[14px] w-[14px] rounded-full bg-[#25F4EE] animate-[orbit_1.4s_linear_infinite] delay-700\"></div>\n            </div>\n\n            <style jsx>{`\n                @keyframes orbit {\n                    0% {\n                        transform: translateX(calc(35px * 0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                    5% {\n                        transform: translateX(calc(35px * 0.235)) scale(0.684208);\n                        opacity: 0.58;\n                    }\n                    10% {\n                        transform: translateX(calc(35px * 0.182)) scale(0.631576);\n                        opacity: 0.51;\n                    }\n                    15% {\n                        transform: translateX(calc(35px * 0.129)) scale(0.578944);\n                        opacity: 0.44;\n                    }\n                    20% {\n                        transform: translateX(calc(35px * 0.076)) scale(0.526312);\n                        opacity: 0.37;\n                    }\n                    25% {\n                        transform: translateX(0%) scale(0.47368);\n                        opacity: 0.3;\n                    }\n                    30% {\n                        transform: translateX(calc(35px * -0.076)) scale(0.526312);\n                        opacity: 0.37;\n                    }\n                    35% {\n                        transform: translateX(calc(35px * -0.129)) scale(0.578944);\n                        opacity: 0.44;\n                    }\n                    40% {\n                        transform: translateX(calc(35px * -0.182)) scale(0.631576);\n                        opacity: 0.51;\n                    }\n                    45% {\n                        transform: translateX(calc(35px * -0.235)) scale(0.684208);\n                        opacity: 0.58;\n                    }\n                    50% {\n                        transform: translateX(calc(35px * -0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                    55% {\n                        transform: translateX(calc(35px * -0.235)) scale(0.789472);\n                        opacity: 0.72;\n                    }\n                    60% {\n                        transform: translateX(calc(35px * -0.182)) scale(0.842104);\n                        opacity: 0.79;\n                    }\n                    65% {\n                        transform: translateX(calc(35px * -0.129)) scale(0.894736);\n                        opacity: 0.86;\n                    }\n                    70% {\n                        transform: translateX(calc(35px * -0.076)) scale(0.947368);\n                        opacity: 0.93;\n                    }\n                    75% {\n                        transform: translateX(0%) scale(1);\n                        opacity: 1;\n                    }\n                    80% {\n                        transform: translateX(calc(35px * 0.076)) scale(0.947368);\n                        opacity: 0.93;\n                    }\n                    85% {\n                        transform: translateX(calc(35px * 0.129)) scale(0.894736);\n                        opacity: 0.86;\n                    }\n                    90% {\n                        transform: translateX(calc(35px * 0.182)) scale(0.842104);\n                        opacity: 0.79;\n                    }\n                    95% {\n                        transform: translateX(calc(35px * 0.235)) scale(0.789472);\n                        opacity: 0.72;\n                    }\n                    100% {\n                        transform: translateX(calc(35px * 0.25)) scale(0.73684);\n                        opacity: 0.65;\n                    }\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "zoomies": {
      name: "zoomies",
      label: "zoomies",
      path: "elements/loader/zoomies",
      component: React.lazy(() => import("@/content/registry/elements/loader/zoomies")),
      type: "loader",
      rawCode: "\"use client\";\n\nimport React from \"react\";\n\nexport default function Zoomies() {\n    return (\n        <div className=\"relative flex items-center justify-center h-[5px] w-[80px] rounded-[2.5px] overflow-hidden transform\">\n            <div className=\"absolute top-0 left-0 h-full w-full bg-black opacity-10 transition-colors duration-300\"></div>\n            <div className=\"h-full w-full rounded-[2.5px] animate-zoom bg-black transition-colors duration-300\"></div>\n\n            <style jsx>{`\n                @keyframes zoom {\n                    0% {\n                        transform: translateX(-100%);\n                    }\n                    100% {\n                        transform: translateX(100%);\n                    }\n                }\n                .animate-zoom {\n                    animation: zoom 1.4s ease-in-out infinite;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
    "demo-radio": {
      name: "demo-radio",
      label: "demo radio",
      path: "elements/radio/demo-radio",
      component: React.lazy(() => import("@/content/registry/elements/radio/demo-radio")),
      type: "radio",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\ntype Option = {\n    id: string;\n    label: string;\n};\n\nconst options: Option[] = [\n    { id: \"react\", label: \"React\" },\n    { id: \"vue\", label: \"Vue\" },\n    { id: \"svelte\", label: \"Svelte\" }\n];\n\nexport default function DemoRadio() {\n    const [selectedOption, setSelectedOption] = useState<string | null>(null);\n\n    const handleOptionChange = (optionId: string) => {\n        setSelectedOption(optionId);\n    };\n\n    return (\n        <div className=\"flex flex-col justify-center\">\n            {options.map((option) => (\n                <label\n                    key={option.id}\n                    className=\"flex items-center space-x-3 mb-3 cursor-pointer group\"\n                >\n                    <div className=\"relative\">\n                        <input\n                            type=\"radio\"\n                            className=\"sr-only\"\n                            name=\"radio-group\"\n                            value={option.id}\n                            checked={selectedOption === option.id}\n                            onChange={() => handleOptionChange(option.id)}\n                        />\n                        <div\n                            className={`w-4 h-4 border-2 rounded-full ${\n                                selectedOption === option.id\n                                    ? \"border-primary\"\n                                    : \"border-gray-300 group-hover:border-gray-400\"\n                            } transition-colors duration-200 ease-in-out`}\n                        >\n                            <div\n                                className={`w-2 h-2 rounded-full absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 ${\n                                    selectedOption === option.id\n                                        ? \"bg-primary scale-100\"\n                                        : \"bg-gray-300 scale-0\"\n                                } transition-all duration-200 ease-in-out`}\n                            ></div>\n                        </div>\n                    </div>\n                    <span className=\"text-gray-700 font-medium group-hover:text-gray-900 transition-colors duration-200 ease-in-out\">\n                        {option.label}\n                    </span>\n                </label>\n            ))}\n        </div>\n    );\n}\n",
    },
    "demo-select": {
      name: "demo-select",
      label: "demo select",
      path: "elements/select/demo-select",
      component: React.lazy(() => import("@/content/registry/elements/select/demo-select")),
      type: "select",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { ChevronDown } from \"lucide-react\";\n\ntype Option = {\n    value: string;\n    label: string;\n};\n\nconst options: Option[] = [\n    { value: \"node\", label: \"Node\" },\n    { value: \"laravel\", label: \"Laravel\" },\n    { value: \"django\", label: \"Django\" },\n    { value: \"rails\", label: \"Rails\" }\n];\n\nexport default function DemoSelect() {\n    const [selectedOption, setSelectedOption] = useState(\"\");\n\n    const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n        setSelectedOption(event.target.value);\n    };\n\n    return (\n        <div>\n            <div className=\"w-40 relative\">\n                <select\n                    value={selectedOption}\n                    onChange={handleChange}\n                    className=\"w-full px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm appearance-none focus:outline-none focus:ring-2 focus:ring-primary focus:border-primary\"\n                >\n                    <option value=\"\" disabled>\n                        Framework\n                    </option>\n                    {options.map((option) => (\n                        <option key={option.value} value={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </select>\n                <div className=\"absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none\">\n                    <ChevronDown className=\"w-5 h-5 text-gray-400\" />\n                </div>\n            </div>\n        </div>\n    );\n}\n",
    },
    "brutalist-switch": {
      name: "brutalist-switch",
      label: "brutalist switch",
      path: "elements/toggle-switch/brutalist-switch",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/brutalist-switch")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\n\nexport default function BrutalistToggleSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className=\"flex items-center justify-center p-8\">\n            <button\n                className={`\n                    relative w-28 h-12\n                    bg-black border-4 border-black\n                    shadow-[4px_4px_0px_0px_rgba(0,0,0,1)]\n                    transition-all duration-300 ease-in-out\n                `}\n                onClick={toggleSwitch}\n                aria-checked={isOn}\n                role=\"switch\"\n            >\n                <div\n                    className={`\n                    absolute top-0 left-0 w-1/2 h-full bg-white\n                    transform transition-transform duration-300 ease-in-out\n                    flex items-center justify-center\n                    ${isOn ? \"translate-x-full\" : \"translate-x-0\"}\n                `}\n                >\n                    <span className=\"text-black font-bold text-xs\">{isOn ? \"ON\" : \"OFF\"}</span>\n                </div>\n            </button>\n        </div>\n    );\n}\n",
    },
    "classic-switch": {
      name: "classic-switch",
      label: "classic switch",
      path: "elements/toggle-switch/classic-switch",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/classic-switch")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport React from \"react\";\nimport { useState } from \"react\";\n\nexport default function ClassicSwitch() {\n    const [isOn, setIsOn] = useState(false);\n\n    const toggleSwitch = () => setIsOn(!isOn);\n\n    return (\n        <div className=\"flex items-center justify-center\">\n            <button\n                className={`w-14 h-8 flex items-center rounded-full p-1 cursor-pointer ${\n                    isOn ? \"bg-green-500\" : \"bg-gray-300\"\n                }`}\n                onClick={toggleSwitch}\n            >\n                <span\n                    className={`bg-white w-6 h-6 rounded-full shadow-md transform transition-transform duration-300 ease-in-out ${\n                        isOn ? \"translate-x-6\" : \"\"\n                    }`}\n                ></span>\n            </button>\n        </div>\n    );\n}\n",
    },
    "day-night-switch": {
      name: "day-night-switch",
      label: "day night switch",
      path: "elements/toggle-switch/day-night-switch",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/day-night-switch")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\nexport default function DayNightSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <label className=\"relative inline-block w-20 h-10 cursor-pointer\">\n            <input\n                type=\"checkbox\"\n                className=\"sr-only\"\n                checked={isChecked}\n                onChange={(e) => setIsChecked(e.target.checked)}\n            />\n            <span\n                className={cn(\n                    \"absolute inset-0 rounded-full transition-all duration-300 ease-in-out\",\n                    isChecked ? \"bg-indigo-900\" : \"bg-sky-400\",\n                    \"before:content-[''] before:absolute before:w-8 before:h-8 before:rounded-full before:left-1 before:top-1\",\n                    \"before:transition-all before:duration-300 before:ease-in-out\",\n                    isChecked\n                        ? \"before:bg-yellow-200 before:translate-x-10 before:scale-[0.75] before:shadow-[inset_-4px_-2px_0px_0px_#eab308]\"\n                        : \"before:bg-yellow-300 before:scale-100 before:shadow-[inset_8px_-4px_0px_0px_#fbbf24]\"\n                )}\n            >\n                {isChecked && (\n                    <span className=\"absolute inset-0 overflow-hidden rounded-full\">\n                        <span className=\"absolute top-1 left-1 w-1 h-1 bg-white rounded-full opacity-50\" />\n                        <span className=\"absolute top-3 left-6 w-1 h-1 bg-white rounded-full opacity-30\" />\n                        <span className=\"absolute top-5 left-3 w-1 h-1 bg-white rounded-full opacity-70\" />\n                    </span>\n                )}\n            </span>\n            <span className=\"sr-only\">\n                {isChecked ? \"Switch to day mode\" : \"Switch to night mode\"}\n            </span>\n        </label>\n    );\n}\n",
    },
    "fluid-switch": {
      name: "fluid-switch",
      label: "fluid switch",
      path: "elements/toggle-switch/fluid-switch",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/fluid-switch")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function FluidSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div\n            className=\"relative h-8\"\n            style={\n                {\n                    \"--active-color\": \"#1868e3\",\n                    \"--inactive-color\": \"#d3d3d6\"\n                } as React.CSSProperties\n            }\n        >\n            <input\n                type=\"checkbox\"\n                checked={isChecked}\n                onChange={() => setIsChecked(!isChecked)}\n                className=\"appearance-none m-0 absolute z-10 top-0 left-0 w-full h-full cursor-pointer\"\n            />\n            <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                viewBox=\"0 0 292 142\"\n                className=\"w-full h-full overflow-visible\"\n            >\n                <path\n                    d=\"M71 142C31.7878 142 0 110.212 0 71C0 31.7878 31.7878 0 71 0C110.212 0 119 30 146 30C173 30 182 0 221 0C260 0 292 31.7878 292 71C292 110.212 260.212 142 221 142C181.788 142 173 112 146 112C119 112 110.212 142 71 142Z\"\n                    className={`transition-colors duration-500 ${\n                        isChecked ? \"fill-[var(--active-color)]\" : \"fill-[var(--inactive-color)]\"\n                    }`}\n                />\n                <g filter=\"url(#goo)\">\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"29\"\n                        height=\"58\"\n                        width=\"116\"\n                        y=\"42\"\n                        x=\"13\"\n                        className={`transition-transform duration-300 origin-center ${\n                            isChecked ? \"translate-x-[150px]\" : \"\"\n                        }`}\n                    />\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"58\"\n                        height=\"114\"\n                        width=\"114\"\n                        y=\"14\"\n                        x=\"14\"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? \"scale-0\" : \"scale-100\"\n                        }`}\n                    />\n                    <rect\n                        fill=\"#fff\"\n                        rx=\"58\"\n                        height=\"114\"\n                        width=\"114\"\n                        y=\"14\"\n                        x=\"164\"\n                        className={`transition-transform duration-500 origin-center ${\n                            isChecked ? \"scale-100\" : \"scale-0\"\n                        }`}\n                    />\n                </g>\n                <filter id=\"goo\">\n                    <feGaussianBlur stdDeviation=\"10\" result=\"blur\" in=\"SourceGraphic\" />\n                    <feColorMatrix\n                        result=\"goo\"\n                        values=\"1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7\"\n                        mode=\"matrix\"\n                        in=\"blur\"\n                    />\n                </filter>\n            </svg>\n        </div>\n    );\n}\n",
    },
    "gradient-switch": {
      name: "gradient-switch",
      label: "gradient switch",
      path: "elements/toggle-switch/gradient-switch",
      component: React.lazy(() => import("@/content/registry/elements/toggle-switch/gradient-switch")),
      type: "toggle-switch",
      rawCode: "\"use client\";\n\nimport { useState } from \"react\";\n\nexport default function GradientSwitch() {\n    const [isChecked, setIsChecked] = useState(false);\n\n    return (\n        <div>\n            <div className=\"checkbox-wrapper-25\">\n                <input\n                    type=\"checkbox\"\n                    checked={isChecked}\n                    onChange={() => setIsChecked(!isChecked)}\n                    className=\"appearance-none h-[25px] w-[75px] rounded-[25px] cursor-pointer transition-all duration-250 ease-in-out\"\n                />\n            </div>\n\n            <style jsx>{`\n                .checkbox-wrapper-25 input[type=\"checkbox\"] {\n                    background-image: -webkit-linear-gradient(\n                            hsla(0, 0%, 0%, 0.1),\n                            hsla(0, 0%, 100%, 0.1)\n                        ),\n                    -webkit-linear-gradient(left, #f66 50%, #6cf 50%);\n                    background-size: 100% 100%, 200% 100%;\n                    background-position: 0 0, 15px 0;\n                    box-shadow: inset 0 1px 4px hsla(0, 0%, 0%, 0.5),\n                        inset 0 0 10px hsla(0, 0%, 0%, 0.5), 0 0 0 1px hsla(0, 0%, 0%, 0.1),\n                        0 -1px 2px 2px hsla(0, 0%, 0%, 0.25), 0 2px 2px 2px hsla(0, 0%, 100%, 0.75);\n                    padding-right: 25px;\n                }\n\n                .checkbox-wrapper-25 input[type=\"checkbox\"]:after {\n                    background-color: #eee;\n                    background-image: -webkit-linear-gradient(\n                        hsla(0, 0%, 100%, 0.1),\n                        hsla(0, 0%, 0%, 0.1)\n                    );\n                    border-radius: 25px;\n                    box-shadow: inset 0 1px 1px 1px hsla(0, 0%, 100%, 1),\n                        inset 0 -1px 1px 1px hsla(0, 0%, 0%, 0.25),\n                        0 1px 3px 1px hsla(0, 0%, 0%, 0.5), 0 0 2px hsla(0, 0%, 0%, 0.25);\n                    content: \"\";\n                    display: block;\n                    height: 25px;\n                    width: 50px;\n                }\n\n                .checkbox-wrapper-25 input[type=\"checkbox\"]:checked {\n                    background-position: 0 0, 35px 0;\n                    padding-left: 25px;\n                    padding-right: 0;\n                }\n            `}</style>\n        </div>\n    );\n}\n",
    },
  },
  "text": {
    "split-flap": {
      name: "split-flap",
      label: "split flap",
      path: "text/split-flap",
      component: React.lazy(() => import("@/content/registry/text/split-flap")),
      type: "",
      rawCode: "\"use client\";\n\nimport React, { useState } from \"react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport default function SplitFlap({ text = \"Frontend\" }: { text?: string }) {\n    const [isHovered, setIsHovered] = useState(false);\n\n    return (\n        <h1\n            className=\"text-4xl md:text-6xl font-bold cursor-pointer\"\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n            aria-label={text}\n        >\n            {text.split(\"\").map((char, index) => (\n                <span key={index} className=\"inline-block overflow-hidden relative\">\n                    <AnimatePresence mode=\"popLayout\">\n                        <motion.span\n                            key={`${char}-${isHovered ? \"hovered\" : \"normal\"}`}\n                            initial={{ y: isHovered ? \"100%\" : 0 }}\n                            animate={{ y: 0 }}\n                            exit={{ y: isHovered ? 0 : \"-100%\" }}\n                            transition={{\n                                duration: 0.3,\n                                ease: \"easeInOut\",\n                                delay: index * 0.025\n                            }}\n                            className=\"inline-block\"\n                        >\n                            {char}\n                        </motion.span>\n                    </AnimatePresence>\n                </span>\n            ))}\n        </h1>\n    );\n}\n",
    },
  },
};
