// @ts-nocheck
const fs = require("fs");
const path = require("path");

const baseDir = path.resolve(__dirname, "../src/content");
const blocksDir = path.join(baseDir, "registry", "blocks");
const elementsDir = path.join(baseDir, "registry", "elements");
const componentDir = path.join(baseDir, "registry", "components");

const outputMapFilePath = path.resolve(baseDir, "previews.ts");

fs.writeFileSync(outputMapFilePath, "");

function getAllFiles(dirPath: string, arrayOfFiles: string[] = []) {
    const files = fs.readdirSync(dirPath);
    files.forEach((file) => {
        const filePath = path.join(dirPath, file);
        if (fs.statSync(filePath).isDirectory()) {
            arrayOfFiles = getAllFiles(filePath, arrayOfFiles);
        } else if (file.endsWith(".tsx")) {
            arrayOfFiles.push(filePath);
        }
    });
    return arrayOfFiles;
}

const components = [
    ...getAllFiles(componentDir),
    ...getAllFiles(elementsDir),
    ...getAllFiles(blocksDir)
].reduce((acc, filePath) => {
    const category = filePath.startsWith(componentDir)
        ? "component"
        : filePath.startsWith(elementsDir)
        ? "element"
        : "block";

    // Initialize the category object if it doesn't exist
    if (!acc[category]) {
        acc[category] = {};
    }

    const name = path.basename(filePath, ".tsx");

    let type = "";
    if (category === "element") {
        type = filePath.split("/").slice(-2)[0];
    }

    const content = fs.readFileSync(filePath, "utf8");
    const relativePath = path.relative(baseDir, filePath).replace(/\\/g, "/").replace(".tsx", "");
    const importPath = `@/content/${relativePath}`;
    const key = relativePath.split("/").slice(1).join("/");

    acc[category][key] = {
        name,
        type,
        component: importPath,
        raw: content,
        path: relativePath,
    };

    return acc;
}, {});

let previewContent = "// @ts-nocheck\n";
previewContent += "// This file is autogenerated by scripts/create-pr-content.ts.\n";
previewContent += "// Do not edit this file directly.\n\n";
previewContent += "import React from 'react';\n\n";
previewContent += "export type PreviewsType = typeof Previews;\n\n";
previewContent += "export const Previews: Record<string, any> = {\n";

// Iterate over the components object
Object.entries(components).forEach(([category, items]) => {
    previewContent += `  "${category}": {\n`;
    Object.entries(items).forEach(([key, { component, raw, name, type }]) => {
        previewContent += `  "${name}": {\n`;
        previewContent += `    name: "${name}",\n`;
        previewContent += `    path: "${key}",\n`;
        previewContent += `    component: React.lazy(() => import("${component}")),\n`;
        previewContent += `    type: "${type}",\n`;
        previewContent += `    raw: ${JSON.stringify(raw, null, 2)}\n`;
        previewContent += `  },\n`;
    });
    previewContent += "},\n";
});
previewContent += "};\n";

fs.writeFileSync(outputMapFilePath, previewContent);
console.log(`Component map generated into ${outputMapFilePath}`);
